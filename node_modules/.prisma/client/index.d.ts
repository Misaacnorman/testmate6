
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Test
 * 
 */
export type Test = $Result.DefaultSelection<Prisma.$TestPayload>
/**
 * Model Sample
 * 
 */
export type Sample = $Result.DefaultSelection<Prisma.$SamplePayload>
/**
 * Model SampleTest
 * 
 */
export type SampleTest = $Result.DefaultSelection<Prisma.$SampleTestPayload>
/**
 * Model SampleLog
 * 
 */
export type SampleLog = $Result.DefaultSelection<Prisma.$SampleLogPayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model AccessLevel
 * 
 */
export type AccessLevel = $Result.DefaultSelection<Prisma.$AccessLevelPayload>
/**
 * Model Log
 * 
 */
export type Log = $Result.DefaultSelection<Prisma.$LogPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.test`: Exposes CRUD operations for the **Test** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tests
    * const tests = await prisma.test.findMany()
    * ```
    */
  get test(): Prisma.TestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sample`: Exposes CRUD operations for the **Sample** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Samples
    * const samples = await prisma.sample.findMany()
    * ```
    */
  get sample(): Prisma.SampleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sampleTest`: Exposes CRUD operations for the **SampleTest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SampleTests
    * const sampleTests = await prisma.sampleTest.findMany()
    * ```
    */
  get sampleTest(): Prisma.SampleTestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sampleLog`: Exposes CRUD operations for the **SampleLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SampleLogs
    * const sampleLogs = await prisma.sampleLog.findMany()
    * ```
    */
  get sampleLog(): Prisma.SampleLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accessLevel`: Exposes CRUD operations for the **AccessLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccessLevels
    * const accessLevels = await prisma.accessLevel.findMany()
    * ```
    */
  get accessLevel(): Prisma.AccessLevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Client: 'Client',
    Project: 'Project',
    Test: 'Test',
    Sample: 'Sample',
    SampleTest: 'SampleTest',
    SampleLog: 'SampleLog',
    Invoice: 'Invoice',
    Payment: 'Payment',
    AccessLevel: 'AccessLevel',
    Log: 'Log',
    Message: 'Message'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "client" | "project" | "test" | "sample" | "sampleTest" | "sampleLog" | "invoice" | "payment" | "accessLevel" | "log" | "message"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Test: {
        payload: Prisma.$TestPayload<ExtArgs>
        fields: Prisma.TestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          findFirst: {
            args: Prisma.TestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          findMany: {
            args: Prisma.TestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>[]
          }
          create: {
            args: Prisma.TestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          createMany: {
            args: Prisma.TestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>[]
          }
          delete: {
            args: Prisma.TestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          update: {
            args: Prisma.TestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          deleteMany: {
            args: Prisma.TestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>[]
          }
          upsert: {
            args: Prisma.TestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          aggregate: {
            args: Prisma.TestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTest>
          }
          groupBy: {
            args: Prisma.TestGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestCountArgs<ExtArgs>
            result: $Utils.Optional<TestCountAggregateOutputType> | number
          }
        }
      }
      Sample: {
        payload: Prisma.$SamplePayload<ExtArgs>
        fields: Prisma.SampleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SampleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SampleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          findFirst: {
            args: Prisma.SampleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SampleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          findMany: {
            args: Prisma.SampleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>[]
          }
          create: {
            args: Prisma.SampleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          createMany: {
            args: Prisma.SampleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SampleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>[]
          }
          delete: {
            args: Prisma.SampleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          update: {
            args: Prisma.SampleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          deleteMany: {
            args: Prisma.SampleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SampleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SampleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>[]
          }
          upsert: {
            args: Prisma.SampleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          aggregate: {
            args: Prisma.SampleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSample>
          }
          groupBy: {
            args: Prisma.SampleGroupByArgs<ExtArgs>
            result: $Utils.Optional<SampleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SampleCountArgs<ExtArgs>
            result: $Utils.Optional<SampleCountAggregateOutputType> | number
          }
        }
      }
      SampleTest: {
        payload: Prisma.$SampleTestPayload<ExtArgs>
        fields: Prisma.SampleTestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SampleTestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SampleTestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload>
          }
          findFirst: {
            args: Prisma.SampleTestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SampleTestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload>
          }
          findMany: {
            args: Prisma.SampleTestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload>[]
          }
          create: {
            args: Prisma.SampleTestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload>
          }
          createMany: {
            args: Prisma.SampleTestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SampleTestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload>[]
          }
          delete: {
            args: Prisma.SampleTestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload>
          }
          update: {
            args: Prisma.SampleTestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload>
          }
          deleteMany: {
            args: Prisma.SampleTestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SampleTestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SampleTestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload>[]
          }
          upsert: {
            args: Prisma.SampleTestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleTestPayload>
          }
          aggregate: {
            args: Prisma.SampleTestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSampleTest>
          }
          groupBy: {
            args: Prisma.SampleTestGroupByArgs<ExtArgs>
            result: $Utils.Optional<SampleTestGroupByOutputType>[]
          }
          count: {
            args: Prisma.SampleTestCountArgs<ExtArgs>
            result: $Utils.Optional<SampleTestCountAggregateOutputType> | number
          }
        }
      }
      SampleLog: {
        payload: Prisma.$SampleLogPayload<ExtArgs>
        fields: Prisma.SampleLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SampleLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SampleLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload>
          }
          findFirst: {
            args: Prisma.SampleLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SampleLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload>
          }
          findMany: {
            args: Prisma.SampleLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload>[]
          }
          create: {
            args: Prisma.SampleLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload>
          }
          createMany: {
            args: Prisma.SampleLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SampleLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload>[]
          }
          delete: {
            args: Prisma.SampleLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload>
          }
          update: {
            args: Prisma.SampleLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload>
          }
          deleteMany: {
            args: Prisma.SampleLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SampleLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SampleLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload>[]
          }
          upsert: {
            args: Prisma.SampleLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleLogPayload>
          }
          aggregate: {
            args: Prisma.SampleLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSampleLog>
          }
          groupBy: {
            args: Prisma.SampleLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SampleLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SampleLogCountArgs<ExtArgs>
            result: $Utils.Optional<SampleLogCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      AccessLevel: {
        payload: Prisma.$AccessLevelPayload<ExtArgs>
        fields: Prisma.AccessLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccessLevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccessLevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload>
          }
          findFirst: {
            args: Prisma.AccessLevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccessLevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload>
          }
          findMany: {
            args: Prisma.AccessLevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload>[]
          }
          create: {
            args: Prisma.AccessLevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload>
          }
          createMany: {
            args: Prisma.AccessLevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccessLevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload>[]
          }
          delete: {
            args: Prisma.AccessLevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload>
          }
          update: {
            args: Prisma.AccessLevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload>
          }
          deleteMany: {
            args: Prisma.AccessLevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccessLevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccessLevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload>[]
          }
          upsert: {
            args: Prisma.AccessLevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessLevelPayload>
          }
          aggregate: {
            args: Prisma.AccessLevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccessLevel>
          }
          groupBy: {
            args: Prisma.AccessLevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccessLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccessLevelCountArgs<ExtArgs>
            result: $Utils.Optional<AccessLevelCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: Prisma.$LogPayload<ExtArgs>
        fields: Prisma.LogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    client?: ClientOmit
    project?: ProjectOmit
    test?: TestOmit
    sample?: SampleOmit
    sampleTest?: SampleTestOmit
    sampleLog?: SampleLogOmit
    invoice?: InvoiceOmit
    payment?: PaymentOmit
    accessLevel?: AccessLevelOmit
    log?: LogOmit
    message?: MessageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    samples: number
    logs: number
    sentMessages: number
    receivedMessages: number
    accessLevels: number
    submitterSampleTests: number
    reviewerSampleTests: number
    approverSampleTests: number
    sampleLogs: number
    issuedInvoices: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | UserCountOutputTypeCountSamplesArgs
    logs?: boolean | UserCountOutputTypeCountLogsArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    receivedMessages?: boolean | UserCountOutputTypeCountReceivedMessagesArgs
    accessLevels?: boolean | UserCountOutputTypeCountAccessLevelsArgs
    submitterSampleTests?: boolean | UserCountOutputTypeCountSubmitterSampleTestsArgs
    reviewerSampleTests?: boolean | UserCountOutputTypeCountReviewerSampleTestsArgs
    approverSampleTests?: boolean | UserCountOutputTypeCountApproverSampleTestsArgs
    sampleLogs?: boolean | UserCountOutputTypeCountSampleLogsArgs
    issuedInvoices?: boolean | UserCountOutputTypeCountIssuedInvoicesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccessLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccessLevelWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmitterSampleTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleTestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewerSampleTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleTestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApproverSampleTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleTestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSampleLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountIssuedInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    samples: number
    projects: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | ClientCountOutputTypeCountSamplesArgs
    projects?: boolean | ClientCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountSamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    samples: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | ProjectCountOutputTypeCountSamplesArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountSamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
  }


  /**
   * Count Type TestCountOutputType
   */

  export type TestCountOutputType = {
    sampleTests: number
  }

  export type TestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sampleTests?: boolean | TestCountOutputTypeCountSampleTestsArgs
  }

  // Custom InputTypes
  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCountOutputType
     */
    select?: TestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeCountSampleTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleTestWhereInput
  }


  /**
   * Count Type SampleCountOutputType
   */

  export type SampleCountOutputType = {
    sampleTests: number
    logs: number
    invoices: number
    sampleLogs: number
  }

  export type SampleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sampleTests?: boolean | SampleCountOutputTypeCountSampleTestsArgs
    logs?: boolean | SampleCountOutputTypeCountLogsArgs
    invoices?: boolean | SampleCountOutputTypeCountInvoicesArgs
    sampleLogs?: boolean | SampleCountOutputTypeCountSampleLogsArgs
  }

  // Custom InputTypes
  /**
   * SampleCountOutputType without action
   */
  export type SampleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleCountOutputType
     */
    select?: SampleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SampleCountOutputType without action
   */
  export type SampleCountOutputTypeCountSampleTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleTestWhereInput
  }

  /**
   * SampleCountOutputType without action
   */
  export type SampleCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }

  /**
   * SampleCountOutputType without action
   */
  export type SampleCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * SampleCountOutputType without action
   */
  export type SampleCountOutputTypeCountSampleLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleLogWhereInput
  }


  /**
   * Count Type InvoiceCountOutputType
   */

  export type InvoiceCountOutputType = {
    payments: number
  }

  export type InvoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | InvoiceCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     */
    select?: InvoiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type AccessLevelCountOutputType
   */

  export type AccessLevelCountOutputType = {
    users: number
  }

  export type AccessLevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AccessLevelCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * AccessLevelCountOutputType without action
   */
  export type AccessLevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevelCountOutputType
     */
    select?: AccessLevelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccessLevelCountOutputType without action
   */
  export type AccessLevelCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    level: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    level: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    level: number | null
    department: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    level: number | null
    department: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    level: number
    department: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    level?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    level?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    level?: true
    department?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    level?: true
    department?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    level?: true
    department?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    level: number
    department: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    level?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    samples?: boolean | User$samplesArgs<ExtArgs>
    logs?: boolean | User$logsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | User$receivedMessagesArgs<ExtArgs>
    accessLevels?: boolean | User$accessLevelsArgs<ExtArgs>
    submitterSampleTests?: boolean | User$submitterSampleTestsArgs<ExtArgs>
    reviewerSampleTests?: boolean | User$reviewerSampleTestsArgs<ExtArgs>
    approverSampleTests?: boolean | User$approverSampleTestsArgs<ExtArgs>
    sampleLogs?: boolean | User$sampleLogsArgs<ExtArgs>
    issuedInvoices?: boolean | User$issuedInvoicesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    level?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    level?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    level?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "level" | "department" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | User$samplesArgs<ExtArgs>
    logs?: boolean | User$logsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | User$receivedMessagesArgs<ExtArgs>
    accessLevels?: boolean | User$accessLevelsArgs<ExtArgs>
    submitterSampleTests?: boolean | User$submitterSampleTestsArgs<ExtArgs>
    reviewerSampleTests?: boolean | User$reviewerSampleTestsArgs<ExtArgs>
    approverSampleTests?: boolean | User$approverSampleTestsArgs<ExtArgs>
    sampleLogs?: boolean | User$sampleLogsArgs<ExtArgs>
    issuedInvoices?: boolean | User$issuedInvoicesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      samples: Prisma.$SamplePayload<ExtArgs>[]
      logs: Prisma.$LogPayload<ExtArgs>[]
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
      receivedMessages: Prisma.$MessagePayload<ExtArgs>[]
      accessLevels: Prisma.$AccessLevelPayload<ExtArgs>[]
      submitterSampleTests: Prisma.$SampleTestPayload<ExtArgs>[]
      reviewerSampleTests: Prisma.$SampleTestPayload<ExtArgs>[]
      approverSampleTests: Prisma.$SampleTestPayload<ExtArgs>[]
      sampleLogs: Prisma.$SampleLogPayload<ExtArgs>[]
      issuedInvoices: Prisma.$InvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      level: number
      department: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    samples<T extends User$samplesArgs<ExtArgs> = {}>(args?: Subset<T, User$samplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends User$logsArgs<ExtArgs> = {}>(args?: Subset<T, User$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedMessages<T extends User$receivedMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accessLevels<T extends User$accessLevelsArgs<ExtArgs> = {}>(args?: Subset<T, User$accessLevelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submitterSampleTests<T extends User$submitterSampleTestsArgs<ExtArgs> = {}>(args?: Subset<T, User$submitterSampleTestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviewerSampleTests<T extends User$reviewerSampleTestsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewerSampleTestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    approverSampleTests<T extends User$approverSampleTestsArgs<ExtArgs> = {}>(args?: Subset<T, User$approverSampleTestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sampleLogs<T extends User$sampleLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$sampleLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    issuedInvoices<T extends User$issuedInvoicesArgs<ExtArgs> = {}>(args?: Subset<T, User$issuedInvoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly level: FieldRef<"User", 'Int'>
    readonly department: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.samples
   */
  export type User$samplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    cursor?: SampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * User.logs
   */
  export type User$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.receivedMessages
   */
  export type User$receivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.accessLevels
   */
  export type User$accessLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
    where?: AccessLevelWhereInput
    orderBy?: AccessLevelOrderByWithRelationInput | AccessLevelOrderByWithRelationInput[]
    cursor?: AccessLevelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccessLevelScalarFieldEnum | AccessLevelScalarFieldEnum[]
  }

  /**
   * User.submitterSampleTests
   */
  export type User$submitterSampleTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    where?: SampleTestWhereInput
    orderBy?: SampleTestOrderByWithRelationInput | SampleTestOrderByWithRelationInput[]
    cursor?: SampleTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleTestScalarFieldEnum | SampleTestScalarFieldEnum[]
  }

  /**
   * User.reviewerSampleTests
   */
  export type User$reviewerSampleTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    where?: SampleTestWhereInput
    orderBy?: SampleTestOrderByWithRelationInput | SampleTestOrderByWithRelationInput[]
    cursor?: SampleTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleTestScalarFieldEnum | SampleTestScalarFieldEnum[]
  }

  /**
   * User.approverSampleTests
   */
  export type User$approverSampleTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    where?: SampleTestWhereInput
    orderBy?: SampleTestOrderByWithRelationInput | SampleTestOrderByWithRelationInput[]
    cursor?: SampleTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleTestScalarFieldEnum | SampleTestScalarFieldEnum[]
  }

  /**
   * User.sampleLogs
   */
  export type User$sampleLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    where?: SampleLogWhereInput
    orderBy?: SampleLogOrderByWithRelationInput | SampleLogOrderByWithRelationInput[]
    cursor?: SampleLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleLogScalarFieldEnum | SampleLogScalarFieldEnum[]
  }

  /**
   * User.issuedInvoices
   */
  export type User$issuedInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
    createdBy: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    contact: string | null
    billingName: string | null
    billingAddress: string | null
    billingContact: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    contact: string | null
    billingName: string | null
    billingAddress: string | null
    billingContact: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    name: number
    address: number
    contact: number
    billingName: number
    billingAddress: number
    billingContact: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
    createdBy?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
    createdBy?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contact?: true
    billingName?: true
    billingAddress?: true
    billingContact?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contact?: true
    billingName?: true
    billingAddress?: true
    billingContact?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    contact?: true
    billingName?: true
    billingAddress?: true
    billingContact?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: number
    name: string
    address: string | null
    contact: string | null
    billingName: string | null
    billingAddress: string | null
    billingContact: string | null
    createdBy: number | null
    createdAt: Date
    updatedAt: Date
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    contact?: boolean
    billingName?: boolean
    billingAddress?: boolean
    billingContact?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    samples?: boolean | Client$samplesArgs<ExtArgs>
    projects?: boolean | Client$projectsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    contact?: boolean
    billingName?: boolean
    billingAddress?: boolean
    billingContact?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["client"]>

  export type ClientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    contact?: boolean
    billingName?: boolean
    billingAddress?: boolean
    billingContact?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    contact?: boolean
    billingName?: boolean
    billingAddress?: boolean
    billingContact?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "contact" | "billingName" | "billingAddress" | "billingContact" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["client"]>
  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | Client$samplesArgs<ExtArgs>
    projects?: boolean | Client$projectsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      samples: Prisma.$SamplePayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string | null
      contact: string | null
      billingName: string | null
      billingAddress: string | null
      billingContact: string | null
      createdBy: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients and returns the data updated in the database.
     * @param {ClientUpdateManyAndReturnArgs} args - Arguments to update many Clients.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClientUpdateManyAndReturnArgs>(args: SelectSubset<T, ClientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    samples<T extends Client$samplesArgs<ExtArgs> = {}>(args?: Subset<T, Client$samplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends Client$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Client$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'Int'>
    readonly name: FieldRef<"Client", 'String'>
    readonly address: FieldRef<"Client", 'String'>
    readonly contact: FieldRef<"Client", 'String'>
    readonly billingName: FieldRef<"Client", 'String'>
    readonly billingAddress: FieldRef<"Client", 'String'>
    readonly billingContact: FieldRef<"Client", 'String'>
    readonly createdBy: FieldRef<"Client", 'Int'>
    readonly createdAt: FieldRef<"Client", 'DateTime'>
    readonly updatedAt: FieldRef<"Client", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client createManyAndReturn
   */
  export type ClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Client updateManyAndReturn
   */
  export type ClientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to delete.
     */
    limit?: number
  }

  /**
   * Client.samples
   */
  export type Client$samplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    cursor?: SampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Client.projects
   */
  export type Client$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    createdBy: number | null
  }

  export type ProjectSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    createdBy: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    clientId: number | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    clientId: number | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    title: number
    description: number
    clientId: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
    clientId?: true
    createdBy?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
    clientId?: true
    createdBy?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    clientId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    clientId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    clientId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: number
    title: string
    description: string | null
    clientId: number
    createdBy: number | null
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    clientId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    samples?: boolean | Project$samplesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    clientId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    clientId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    clientId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "clientId" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    samples?: boolean | Project$samplesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      samples: Prisma.$SamplePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      clientId: number
      createdBy: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    samples<T extends Project$samplesArgs<ExtArgs> = {}>(args?: Subset<T, Project$samplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'Int'>
    readonly title: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly clientId: FieldRef<"Project", 'Int'>
    readonly createdBy: FieldRef<"Project", 'Int'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project updateManyAndReturn
   */
  export type ProjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.samples
   */
  export type Project$samplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    cursor?: SampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Test
   */

  export type AggregateTest = {
    _count: TestCountAggregateOutputType | null
    _avg: TestAvgAggregateOutputType | null
    _sum: TestSumAggregateOutputType | null
    _min: TestMinAggregateOutputType | null
    _max: TestMaxAggregateOutputType | null
  }

  export type TestAvgAggregateOutputType = {
    id: number | null
    priceUgx: number | null
    priceUsd: number | null
    leadTimeDays: number | null
  }

  export type TestSumAggregateOutputType = {
    id: number | null
    priceUgx: number | null
    priceUsd: number | null
    leadTimeDays: number | null
  }

  export type TestMinAggregateOutputType = {
    id: number | null
    code: string | null
    category: string | null
    name: string | null
    method: string | null
    accredited: boolean | null
    unit: string | null
    priceUgx: number | null
    priceUsd: number | null
    leadTimeDays: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestMaxAggregateOutputType = {
    id: number | null
    code: string | null
    category: string | null
    name: string | null
    method: string | null
    accredited: boolean | null
    unit: string | null
    priceUgx: number | null
    priceUsd: number | null
    leadTimeDays: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCountAggregateOutputType = {
    id: number
    code: number
    category: number
    name: number
    method: number
    accredited: number
    unit: number
    priceUgx: number
    priceUsd: number
    leadTimeDays: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TestAvgAggregateInputType = {
    id?: true
    priceUgx?: true
    priceUsd?: true
    leadTimeDays?: true
  }

  export type TestSumAggregateInputType = {
    id?: true
    priceUgx?: true
    priceUsd?: true
    leadTimeDays?: true
  }

  export type TestMinAggregateInputType = {
    id?: true
    code?: true
    category?: true
    name?: true
    method?: true
    accredited?: true
    unit?: true
    priceUgx?: true
    priceUsd?: true
    leadTimeDays?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestMaxAggregateInputType = {
    id?: true
    code?: true
    category?: true
    name?: true
    method?: true
    accredited?: true
    unit?: true
    priceUgx?: true
    priceUsd?: true
    leadTimeDays?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCountAggregateInputType = {
    id?: true
    code?: true
    category?: true
    name?: true
    method?: true
    accredited?: true
    unit?: true
    priceUgx?: true
    priceUsd?: true
    leadTimeDays?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Test to aggregate.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tests
    **/
    _count?: true | TestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestMaxAggregateInputType
  }

  export type GetTestAggregateType<T extends TestAggregateArgs> = {
        [P in keyof T & keyof AggregateTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTest[P]>
      : GetScalarType<T[P], AggregateTest[P]>
  }




  export type TestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestWhereInput
    orderBy?: TestOrderByWithAggregationInput | TestOrderByWithAggregationInput[]
    by: TestScalarFieldEnum[] | TestScalarFieldEnum
    having?: TestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCountAggregateInputType | true
    _avg?: TestAvgAggregateInputType
    _sum?: TestSumAggregateInputType
    _min?: TestMinAggregateInputType
    _max?: TestMaxAggregateInputType
  }

  export type TestGroupByOutputType = {
    id: number
    code: string
    category: string
    name: string
    method: string
    accredited: boolean
    unit: string | null
    priceUgx: number | null
    priceUsd: number | null
    leadTimeDays: number | null
    createdAt: Date
    updatedAt: Date
    _count: TestCountAggregateOutputType | null
    _avg: TestAvgAggregateOutputType | null
    _sum: TestSumAggregateOutputType | null
    _min: TestMinAggregateOutputType | null
    _max: TestMaxAggregateOutputType | null
  }

  type GetTestGroupByPayload<T extends TestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestGroupByOutputType[P]>
            : GetScalarType<T[P], TestGroupByOutputType[P]>
        }
      >
    >


  export type TestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    category?: boolean
    name?: boolean
    method?: boolean
    accredited?: boolean
    unit?: boolean
    priceUgx?: boolean
    priceUsd?: boolean
    leadTimeDays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sampleTests?: boolean | Test$sampleTestsArgs<ExtArgs>
    _count?: boolean | TestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["test"]>

  export type TestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    category?: boolean
    name?: boolean
    method?: boolean
    accredited?: boolean
    unit?: boolean
    priceUgx?: boolean
    priceUsd?: boolean
    leadTimeDays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["test"]>

  export type TestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    category?: boolean
    name?: boolean
    method?: boolean
    accredited?: boolean
    unit?: boolean
    priceUgx?: boolean
    priceUsd?: boolean
    leadTimeDays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["test"]>

  export type TestSelectScalar = {
    id?: boolean
    code?: boolean
    category?: boolean
    name?: boolean
    method?: boolean
    accredited?: boolean
    unit?: boolean
    priceUgx?: boolean
    priceUsd?: boolean
    leadTimeDays?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "category" | "name" | "method" | "accredited" | "unit" | "priceUgx" | "priceUsd" | "leadTimeDays" | "createdAt" | "updatedAt", ExtArgs["result"]["test"]>
  export type TestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sampleTests?: boolean | Test$sampleTestsArgs<ExtArgs>
    _count?: boolean | TestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Test"
    objects: {
      sampleTests: Prisma.$SampleTestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      category: string
      name: string
      method: string
      accredited: boolean
      unit: string | null
      priceUgx: number | null
      priceUsd: number | null
      leadTimeDays: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["test"]>
    composites: {}
  }

  type TestGetPayload<S extends boolean | null | undefined | TestDefaultArgs> = $Result.GetResult<Prisma.$TestPayload, S>

  type TestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestCountAggregateInputType | true
    }

  export interface TestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Test'], meta: { name: 'Test' } }
    /**
     * Find zero or one Test that matches the filter.
     * @param {TestFindUniqueArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestFindUniqueArgs>(args: SelectSubset<T, TestFindUniqueArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Test that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestFindUniqueOrThrowArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestFindUniqueOrThrowArgs>(args: SelectSubset<T, TestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Test that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindFirstArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestFindFirstArgs>(args?: SelectSubset<T, TestFindFirstArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Test that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindFirstOrThrowArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestFindFirstOrThrowArgs>(args?: SelectSubset<T, TestFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tests
     * const tests = await prisma.test.findMany()
     * 
     * // Get first 10 Tests
     * const tests = await prisma.test.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testWithIdOnly = await prisma.test.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestFindManyArgs>(args?: SelectSubset<T, TestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Test.
     * @param {TestCreateArgs} args - Arguments to create a Test.
     * @example
     * // Create one Test
     * const Test = await prisma.test.create({
     *   data: {
     *     // ... data to create a Test
     *   }
     * })
     * 
     */
    create<T extends TestCreateArgs>(args: SelectSubset<T, TestCreateArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tests.
     * @param {TestCreateManyArgs} args - Arguments to create many Tests.
     * @example
     * // Create many Tests
     * const test = await prisma.test.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestCreateManyArgs>(args?: SelectSubset<T, TestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tests and returns the data saved in the database.
     * @param {TestCreateManyAndReturnArgs} args - Arguments to create many Tests.
     * @example
     * // Create many Tests
     * const test = await prisma.test.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tests and only return the `id`
     * const testWithIdOnly = await prisma.test.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestCreateManyAndReturnArgs>(args?: SelectSubset<T, TestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Test.
     * @param {TestDeleteArgs} args - Arguments to delete one Test.
     * @example
     * // Delete one Test
     * const Test = await prisma.test.delete({
     *   where: {
     *     // ... filter to delete one Test
     *   }
     * })
     * 
     */
    delete<T extends TestDeleteArgs>(args: SelectSubset<T, TestDeleteArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Test.
     * @param {TestUpdateArgs} args - Arguments to update one Test.
     * @example
     * // Update one Test
     * const test = await prisma.test.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestUpdateArgs>(args: SelectSubset<T, TestUpdateArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tests.
     * @param {TestDeleteManyArgs} args - Arguments to filter Tests to delete.
     * @example
     * // Delete a few Tests
     * const { count } = await prisma.test.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestDeleteManyArgs>(args?: SelectSubset<T, TestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tests
     * const test = await prisma.test.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestUpdateManyArgs>(args: SelectSubset<T, TestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tests and returns the data updated in the database.
     * @param {TestUpdateManyAndReturnArgs} args - Arguments to update many Tests.
     * @example
     * // Update many Tests
     * const test = await prisma.test.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tests and only return the `id`
     * const testWithIdOnly = await prisma.test.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TestUpdateManyAndReturnArgs>(args: SelectSubset<T, TestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Test.
     * @param {TestUpsertArgs} args - Arguments to update or create a Test.
     * @example
     * // Update or create a Test
     * const test = await prisma.test.upsert({
     *   create: {
     *     // ... data to create a Test
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Test we want to update
     *   }
     * })
     */
    upsert<T extends TestUpsertArgs>(args: SelectSubset<T, TestUpsertArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCountArgs} args - Arguments to filter Tests to count.
     * @example
     * // Count the number of Tests
     * const count = await prisma.test.count({
     *   where: {
     *     // ... the filter for the Tests we want to count
     *   }
     * })
    **/
    count<T extends TestCountArgs>(
      args?: Subset<T, TestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Test.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestAggregateArgs>(args: Subset<T, TestAggregateArgs>): Prisma.PrismaPromise<GetTestAggregateType<T>>

    /**
     * Group by Test.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestGroupByArgs['orderBy'] }
        : { orderBy?: TestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Test model
   */
  readonly fields: TestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Test.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sampleTests<T extends Test$sampleTestsArgs<ExtArgs> = {}>(args?: Subset<T, Test$sampleTestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Test model
   */
  interface TestFieldRefs {
    readonly id: FieldRef<"Test", 'Int'>
    readonly code: FieldRef<"Test", 'String'>
    readonly category: FieldRef<"Test", 'String'>
    readonly name: FieldRef<"Test", 'String'>
    readonly method: FieldRef<"Test", 'String'>
    readonly accredited: FieldRef<"Test", 'Boolean'>
    readonly unit: FieldRef<"Test", 'String'>
    readonly priceUgx: FieldRef<"Test", 'Int'>
    readonly priceUsd: FieldRef<"Test", 'Float'>
    readonly leadTimeDays: FieldRef<"Test", 'Int'>
    readonly createdAt: FieldRef<"Test", 'DateTime'>
    readonly updatedAt: FieldRef<"Test", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Test findUnique
   */
  export type TestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test findUniqueOrThrow
   */
  export type TestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test findFirst
   */
  export type TestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tests.
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tests.
     */
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Test findFirstOrThrow
   */
  export type TestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tests.
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tests.
     */
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Test findMany
   */
  export type TestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Tests to fetch.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tests.
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Test create
   */
  export type TestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * The data needed to create a Test.
     */
    data: XOR<TestCreateInput, TestUncheckedCreateInput>
  }

  /**
   * Test createMany
   */
  export type TestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tests.
     */
    data: TestCreateManyInput | TestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Test createManyAndReturn
   */
  export type TestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * The data used to create many Tests.
     */
    data: TestCreateManyInput | TestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Test update
   */
  export type TestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * The data needed to update a Test.
     */
    data: XOR<TestUpdateInput, TestUncheckedUpdateInput>
    /**
     * Choose, which Test to update.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test updateMany
   */
  export type TestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tests.
     */
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyInput>
    /**
     * Filter which Tests to update
     */
    where?: TestWhereInput
    /**
     * Limit how many Tests to update.
     */
    limit?: number
  }

  /**
   * Test updateManyAndReturn
   */
  export type TestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * The data used to update Tests.
     */
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyInput>
    /**
     * Filter which Tests to update
     */
    where?: TestWhereInput
    /**
     * Limit how many Tests to update.
     */
    limit?: number
  }

  /**
   * Test upsert
   */
  export type TestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * The filter to search for the Test to update in case it exists.
     */
    where: TestWhereUniqueInput
    /**
     * In case the Test found by the `where` argument doesn't exist, create a new Test with this data.
     */
    create: XOR<TestCreateInput, TestUncheckedCreateInput>
    /**
     * In case the Test was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestUpdateInput, TestUncheckedUpdateInput>
  }

  /**
   * Test delete
   */
  export type TestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter which Test to delete.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test deleteMany
   */
  export type TestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tests to delete
     */
    where?: TestWhereInput
    /**
     * Limit how many Tests to delete.
     */
    limit?: number
  }

  /**
   * Test.sampleTests
   */
  export type Test$sampleTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    where?: SampleTestWhereInput
    orderBy?: SampleTestOrderByWithRelationInput | SampleTestOrderByWithRelationInput[]
    cursor?: SampleTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleTestScalarFieldEnum | SampleTestScalarFieldEnum[]
  }

  /**
   * Test without action
   */
  export type TestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
  }


  /**
   * Model Sample
   */

  export type AggregateSample = {
    _count: SampleCountAggregateOutputType | null
    _avg: SampleAvgAggregateOutputType | null
    _sum: SampleSumAggregateOutputType | null
    _min: SampleMinAggregateOutputType | null
    _max: SampleMaxAggregateOutputType | null
  }

  export type SampleAvgAggregateOutputType = {
    id: number | null
    projectId: number | null
    clientId: number | null
    assignedTo: number | null
  }

  export type SampleSumAggregateOutputType = {
    id: number | null
    projectId: number | null
    clientId: number | null
    assignedTo: number | null
  }

  export type SampleMinAggregateOutputType = {
    id: number | null
    projectId: number | null
    clientId: number | null
    assignedTo: number | null
    status: string | null
    receivedDate: Date | null
    deliveryInfo: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SampleMaxAggregateOutputType = {
    id: number | null
    projectId: number | null
    clientId: number | null
    assignedTo: number | null
    status: string | null
    receivedDate: Date | null
    deliveryInfo: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SampleCountAggregateOutputType = {
    id: number
    projectId: number
    clientId: number
    assignedTo: number
    status: number
    receivedDate: number
    deliveryInfo: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SampleAvgAggregateInputType = {
    id?: true
    projectId?: true
    clientId?: true
    assignedTo?: true
  }

  export type SampleSumAggregateInputType = {
    id?: true
    projectId?: true
    clientId?: true
    assignedTo?: true
  }

  export type SampleMinAggregateInputType = {
    id?: true
    projectId?: true
    clientId?: true
    assignedTo?: true
    status?: true
    receivedDate?: true
    deliveryInfo?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SampleMaxAggregateInputType = {
    id?: true
    projectId?: true
    clientId?: true
    assignedTo?: true
    status?: true
    receivedDate?: true
    deliveryInfo?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SampleCountAggregateInputType = {
    id?: true
    projectId?: true
    clientId?: true
    assignedTo?: true
    status?: true
    receivedDate?: true
    deliveryInfo?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SampleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sample to aggregate.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Samples
    **/
    _count?: true | SampleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SampleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SampleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SampleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SampleMaxAggregateInputType
  }

  export type GetSampleAggregateType<T extends SampleAggregateArgs> = {
        [P in keyof T & keyof AggregateSample]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSample[P]>
      : GetScalarType<T[P], AggregateSample[P]>
  }




  export type SampleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithAggregationInput | SampleOrderByWithAggregationInput[]
    by: SampleScalarFieldEnum[] | SampleScalarFieldEnum
    having?: SampleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SampleCountAggregateInputType | true
    _avg?: SampleAvgAggregateInputType
    _sum?: SampleSumAggregateInputType
    _min?: SampleMinAggregateInputType
    _max?: SampleMaxAggregateInputType
  }

  export type SampleGroupByOutputType = {
    id: number
    projectId: number
    clientId: number
    assignedTo: number | null
    status: string
    receivedDate: Date
    deliveryInfo: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: SampleCountAggregateOutputType | null
    _avg: SampleAvgAggregateOutputType | null
    _sum: SampleSumAggregateOutputType | null
    _min: SampleMinAggregateOutputType | null
    _max: SampleMaxAggregateOutputType | null
  }

  type GetSampleGroupByPayload<T extends SampleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SampleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SampleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SampleGroupByOutputType[P]>
            : GetScalarType<T[P], SampleGroupByOutputType[P]>
        }
      >
    >


  export type SampleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    clientId?: boolean
    assignedTo?: boolean
    status?: boolean
    receivedDate?: boolean
    deliveryInfo?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
    assignedUser?: boolean | Sample$assignedUserArgs<ExtArgs>
    sampleTests?: boolean | Sample$sampleTestsArgs<ExtArgs>
    logs?: boolean | Sample$logsArgs<ExtArgs>
    invoices?: boolean | Sample$invoicesArgs<ExtArgs>
    sampleLogs?: boolean | Sample$sampleLogsArgs<ExtArgs>
    _count?: boolean | SampleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sample"]>

  export type SampleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    clientId?: boolean
    assignedTo?: boolean
    status?: boolean
    receivedDate?: boolean
    deliveryInfo?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
    assignedUser?: boolean | Sample$assignedUserArgs<ExtArgs>
  }, ExtArgs["result"]["sample"]>

  export type SampleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    clientId?: boolean
    assignedTo?: boolean
    status?: boolean
    receivedDate?: boolean
    deliveryInfo?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
    assignedUser?: boolean | Sample$assignedUserArgs<ExtArgs>
  }, ExtArgs["result"]["sample"]>

  export type SampleSelectScalar = {
    id?: boolean
    projectId?: boolean
    clientId?: boolean
    assignedTo?: boolean
    status?: boolean
    receivedDate?: boolean
    deliveryInfo?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SampleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "clientId" | "assignedTo" | "status" | "receivedDate" | "deliveryInfo" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["sample"]>
  export type SampleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
    assignedUser?: boolean | Sample$assignedUserArgs<ExtArgs>
    sampleTests?: boolean | Sample$sampleTestsArgs<ExtArgs>
    logs?: boolean | Sample$logsArgs<ExtArgs>
    invoices?: boolean | Sample$invoicesArgs<ExtArgs>
    sampleLogs?: boolean | Sample$sampleLogsArgs<ExtArgs>
    _count?: boolean | SampleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SampleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
    assignedUser?: boolean | Sample$assignedUserArgs<ExtArgs>
  }
  export type SampleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
    assignedUser?: boolean | Sample$assignedUserArgs<ExtArgs>
  }

  export type $SamplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sample"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs>
      assignedUser: Prisma.$UserPayload<ExtArgs> | null
      sampleTests: Prisma.$SampleTestPayload<ExtArgs>[]
      logs: Prisma.$LogPayload<ExtArgs>[]
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
      sampleLogs: Prisma.$SampleLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      projectId: number
      clientId: number
      assignedTo: number | null
      status: string
      receivedDate: Date
      deliveryInfo: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sample"]>
    composites: {}
  }

  type SampleGetPayload<S extends boolean | null | undefined | SampleDefaultArgs> = $Result.GetResult<Prisma.$SamplePayload, S>

  type SampleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SampleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SampleCountAggregateInputType | true
    }

  export interface SampleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sample'], meta: { name: 'Sample' } }
    /**
     * Find zero or one Sample that matches the filter.
     * @param {SampleFindUniqueArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SampleFindUniqueArgs>(args: SelectSubset<T, SampleFindUniqueArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sample that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SampleFindUniqueOrThrowArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SampleFindUniqueOrThrowArgs>(args: SelectSubset<T, SampleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sample that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindFirstArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SampleFindFirstArgs>(args?: SelectSubset<T, SampleFindFirstArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sample that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindFirstOrThrowArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SampleFindFirstOrThrowArgs>(args?: SelectSubset<T, SampleFindFirstOrThrowArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Samples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Samples
     * const samples = await prisma.sample.findMany()
     * 
     * // Get first 10 Samples
     * const samples = await prisma.sample.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sampleWithIdOnly = await prisma.sample.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SampleFindManyArgs>(args?: SelectSubset<T, SampleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sample.
     * @param {SampleCreateArgs} args - Arguments to create a Sample.
     * @example
     * // Create one Sample
     * const Sample = await prisma.sample.create({
     *   data: {
     *     // ... data to create a Sample
     *   }
     * })
     * 
     */
    create<T extends SampleCreateArgs>(args: SelectSubset<T, SampleCreateArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Samples.
     * @param {SampleCreateManyArgs} args - Arguments to create many Samples.
     * @example
     * // Create many Samples
     * const sample = await prisma.sample.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SampleCreateManyArgs>(args?: SelectSubset<T, SampleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Samples and returns the data saved in the database.
     * @param {SampleCreateManyAndReturnArgs} args - Arguments to create many Samples.
     * @example
     * // Create many Samples
     * const sample = await prisma.sample.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Samples and only return the `id`
     * const sampleWithIdOnly = await prisma.sample.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SampleCreateManyAndReturnArgs>(args?: SelectSubset<T, SampleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sample.
     * @param {SampleDeleteArgs} args - Arguments to delete one Sample.
     * @example
     * // Delete one Sample
     * const Sample = await prisma.sample.delete({
     *   where: {
     *     // ... filter to delete one Sample
     *   }
     * })
     * 
     */
    delete<T extends SampleDeleteArgs>(args: SelectSubset<T, SampleDeleteArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sample.
     * @param {SampleUpdateArgs} args - Arguments to update one Sample.
     * @example
     * // Update one Sample
     * const sample = await prisma.sample.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SampleUpdateArgs>(args: SelectSubset<T, SampleUpdateArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Samples.
     * @param {SampleDeleteManyArgs} args - Arguments to filter Samples to delete.
     * @example
     * // Delete a few Samples
     * const { count } = await prisma.sample.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SampleDeleteManyArgs>(args?: SelectSubset<T, SampleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Samples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Samples
     * const sample = await prisma.sample.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SampleUpdateManyArgs>(args: SelectSubset<T, SampleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Samples and returns the data updated in the database.
     * @param {SampleUpdateManyAndReturnArgs} args - Arguments to update many Samples.
     * @example
     * // Update many Samples
     * const sample = await prisma.sample.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Samples and only return the `id`
     * const sampleWithIdOnly = await prisma.sample.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SampleUpdateManyAndReturnArgs>(args: SelectSubset<T, SampleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sample.
     * @param {SampleUpsertArgs} args - Arguments to update or create a Sample.
     * @example
     * // Update or create a Sample
     * const sample = await prisma.sample.upsert({
     *   create: {
     *     // ... data to create a Sample
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sample we want to update
     *   }
     * })
     */
    upsert<T extends SampleUpsertArgs>(args: SelectSubset<T, SampleUpsertArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Samples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleCountArgs} args - Arguments to filter Samples to count.
     * @example
     * // Count the number of Samples
     * const count = await prisma.sample.count({
     *   where: {
     *     // ... the filter for the Samples we want to count
     *   }
     * })
    **/
    count<T extends SampleCountArgs>(
      args?: Subset<T, SampleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SampleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SampleAggregateArgs>(args: Subset<T, SampleAggregateArgs>): Prisma.PrismaPromise<GetSampleAggregateType<T>>

    /**
     * Group by Sample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SampleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SampleGroupByArgs['orderBy'] }
        : { orderBy?: SampleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SampleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSampleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sample model
   */
  readonly fields: SampleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sample.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SampleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedUser<T extends Sample$assignedUserArgs<ExtArgs> = {}>(args?: Subset<T, Sample$assignedUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    sampleTests<T extends Sample$sampleTestsArgs<ExtArgs> = {}>(args?: Subset<T, Sample$sampleTestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends Sample$logsArgs<ExtArgs> = {}>(args?: Subset<T, Sample$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invoices<T extends Sample$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, Sample$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sampleLogs<T extends Sample$sampleLogsArgs<ExtArgs> = {}>(args?: Subset<T, Sample$sampleLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sample model
   */
  interface SampleFieldRefs {
    readonly id: FieldRef<"Sample", 'Int'>
    readonly projectId: FieldRef<"Sample", 'Int'>
    readonly clientId: FieldRef<"Sample", 'Int'>
    readonly assignedTo: FieldRef<"Sample", 'Int'>
    readonly status: FieldRef<"Sample", 'String'>
    readonly receivedDate: FieldRef<"Sample", 'DateTime'>
    readonly deliveryInfo: FieldRef<"Sample", 'String'>
    readonly notes: FieldRef<"Sample", 'String'>
    readonly createdAt: FieldRef<"Sample", 'DateTime'>
    readonly updatedAt: FieldRef<"Sample", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sample findUnique
   */
  export type SampleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample findUniqueOrThrow
   */
  export type SampleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample findFirst
   */
  export type SampleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Samples.
     */
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Sample findFirstOrThrow
   */
  export type SampleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Samples.
     */
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Sample findMany
   */
  export type SampleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Samples to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Sample create
   */
  export type SampleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The data needed to create a Sample.
     */
    data: XOR<SampleCreateInput, SampleUncheckedCreateInput>
  }

  /**
   * Sample createMany
   */
  export type SampleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Samples.
     */
    data: SampleCreateManyInput | SampleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sample createManyAndReturn
   */
  export type SampleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * The data used to create many Samples.
     */
    data: SampleCreateManyInput | SampleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sample update
   */
  export type SampleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The data needed to update a Sample.
     */
    data: XOR<SampleUpdateInput, SampleUncheckedUpdateInput>
    /**
     * Choose, which Sample to update.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample updateMany
   */
  export type SampleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Samples.
     */
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyInput>
    /**
     * Filter which Samples to update
     */
    where?: SampleWhereInput
    /**
     * Limit how many Samples to update.
     */
    limit?: number
  }

  /**
   * Sample updateManyAndReturn
   */
  export type SampleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * The data used to update Samples.
     */
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyInput>
    /**
     * Filter which Samples to update
     */
    where?: SampleWhereInput
    /**
     * Limit how many Samples to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sample upsert
   */
  export type SampleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The filter to search for the Sample to update in case it exists.
     */
    where: SampleWhereUniqueInput
    /**
     * In case the Sample found by the `where` argument doesn't exist, create a new Sample with this data.
     */
    create: XOR<SampleCreateInput, SampleUncheckedCreateInput>
    /**
     * In case the Sample was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SampleUpdateInput, SampleUncheckedUpdateInput>
  }

  /**
   * Sample delete
   */
  export type SampleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter which Sample to delete.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample deleteMany
   */
  export type SampleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Samples to delete
     */
    where?: SampleWhereInput
    /**
     * Limit how many Samples to delete.
     */
    limit?: number
  }

  /**
   * Sample.assignedUser
   */
  export type Sample$assignedUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Sample.sampleTests
   */
  export type Sample$sampleTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    where?: SampleTestWhereInput
    orderBy?: SampleTestOrderByWithRelationInput | SampleTestOrderByWithRelationInput[]
    cursor?: SampleTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleTestScalarFieldEnum | SampleTestScalarFieldEnum[]
  }

  /**
   * Sample.logs
   */
  export type Sample$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Sample.invoices
   */
  export type Sample$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Sample.sampleLogs
   */
  export type Sample$sampleLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    where?: SampleLogWhereInput
    orderBy?: SampleLogOrderByWithRelationInput | SampleLogOrderByWithRelationInput[]
    cursor?: SampleLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleLogScalarFieldEnum | SampleLogScalarFieldEnum[]
  }

  /**
   * Sample without action
   */
  export type SampleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
  }


  /**
   * Model SampleTest
   */

  export type AggregateSampleTest = {
    _count: SampleTestCountAggregateOutputType | null
    _avg: SampleTestAvgAggregateOutputType | null
    _sum: SampleTestSumAggregateOutputType | null
    _min: SampleTestMinAggregateOutputType | null
    _max: SampleTestMaxAggregateOutputType | null
  }

  export type SampleTestAvgAggregateOutputType = {
    id: number | null
    sampleId: number | null
    testId: number | null
    submittedBy: number | null
    reviewedBy: number | null
    approvedBy: number | null
  }

  export type SampleTestSumAggregateOutputType = {
    id: number | null
    sampleId: number | null
    testId: number | null
    submittedBy: number | null
    reviewedBy: number | null
    approvedBy: number | null
  }

  export type SampleTestMinAggregateOutputType = {
    id: number | null
    sampleId: number | null
    testId: number | null
    result: string | null
    submittedBy: number | null
    reviewedBy: number | null
    approvedBy: number | null
    submittedAt: Date | null
    reviewedAt: Date | null
    approvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SampleTestMaxAggregateOutputType = {
    id: number | null
    sampleId: number | null
    testId: number | null
    result: string | null
    submittedBy: number | null
    reviewedBy: number | null
    approvedBy: number | null
    submittedAt: Date | null
    reviewedAt: Date | null
    approvedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SampleTestCountAggregateOutputType = {
    id: number
    sampleId: number
    testId: number
    result: number
    submittedBy: number
    reviewedBy: number
    approvedBy: number
    submittedAt: number
    reviewedAt: number
    approvedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SampleTestAvgAggregateInputType = {
    id?: true
    sampleId?: true
    testId?: true
    submittedBy?: true
    reviewedBy?: true
    approvedBy?: true
  }

  export type SampleTestSumAggregateInputType = {
    id?: true
    sampleId?: true
    testId?: true
    submittedBy?: true
    reviewedBy?: true
    approvedBy?: true
  }

  export type SampleTestMinAggregateInputType = {
    id?: true
    sampleId?: true
    testId?: true
    result?: true
    submittedBy?: true
    reviewedBy?: true
    approvedBy?: true
    submittedAt?: true
    reviewedAt?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SampleTestMaxAggregateInputType = {
    id?: true
    sampleId?: true
    testId?: true
    result?: true
    submittedBy?: true
    reviewedBy?: true
    approvedBy?: true
    submittedAt?: true
    reviewedAt?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SampleTestCountAggregateInputType = {
    id?: true
    sampleId?: true
    testId?: true
    result?: true
    submittedBy?: true
    reviewedBy?: true
    approvedBy?: true
    submittedAt?: true
    reviewedAt?: true
    approvedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SampleTestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SampleTest to aggregate.
     */
    where?: SampleTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleTests to fetch.
     */
    orderBy?: SampleTestOrderByWithRelationInput | SampleTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SampleTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SampleTests
    **/
    _count?: true | SampleTestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SampleTestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SampleTestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SampleTestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SampleTestMaxAggregateInputType
  }

  export type GetSampleTestAggregateType<T extends SampleTestAggregateArgs> = {
        [P in keyof T & keyof AggregateSampleTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSampleTest[P]>
      : GetScalarType<T[P], AggregateSampleTest[P]>
  }




  export type SampleTestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleTestWhereInput
    orderBy?: SampleTestOrderByWithAggregationInput | SampleTestOrderByWithAggregationInput[]
    by: SampleTestScalarFieldEnum[] | SampleTestScalarFieldEnum
    having?: SampleTestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SampleTestCountAggregateInputType | true
    _avg?: SampleTestAvgAggregateInputType
    _sum?: SampleTestSumAggregateInputType
    _min?: SampleTestMinAggregateInputType
    _max?: SampleTestMaxAggregateInputType
  }

  export type SampleTestGroupByOutputType = {
    id: number
    sampleId: number
    testId: number
    result: string | null
    submittedBy: number | null
    reviewedBy: number | null
    approvedBy: number | null
    submittedAt: Date | null
    reviewedAt: Date | null
    approvedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SampleTestCountAggregateOutputType | null
    _avg: SampleTestAvgAggregateOutputType | null
    _sum: SampleTestSumAggregateOutputType | null
    _min: SampleTestMinAggregateOutputType | null
    _max: SampleTestMaxAggregateOutputType | null
  }

  type GetSampleTestGroupByPayload<T extends SampleTestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SampleTestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SampleTestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SampleTestGroupByOutputType[P]>
            : GetScalarType<T[P], SampleTestGroupByOutputType[P]>
        }
      >
    >


  export type SampleTestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    testId?: boolean
    result?: boolean
    submittedBy?: boolean
    reviewedBy?: boolean
    approvedBy?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    test?: boolean | TestDefaultArgs<ExtArgs>
    submitter?: boolean | SampleTest$submitterArgs<ExtArgs>
    reviewer?: boolean | SampleTest$reviewerArgs<ExtArgs>
    approver?: boolean | SampleTest$approverArgs<ExtArgs>
  }, ExtArgs["result"]["sampleTest"]>

  export type SampleTestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    testId?: boolean
    result?: boolean
    submittedBy?: boolean
    reviewedBy?: boolean
    approvedBy?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    test?: boolean | TestDefaultArgs<ExtArgs>
    submitter?: boolean | SampleTest$submitterArgs<ExtArgs>
    reviewer?: boolean | SampleTest$reviewerArgs<ExtArgs>
    approver?: boolean | SampleTest$approverArgs<ExtArgs>
  }, ExtArgs["result"]["sampleTest"]>

  export type SampleTestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    testId?: boolean
    result?: boolean
    submittedBy?: boolean
    reviewedBy?: boolean
    approvedBy?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    test?: boolean | TestDefaultArgs<ExtArgs>
    submitter?: boolean | SampleTest$submitterArgs<ExtArgs>
    reviewer?: boolean | SampleTest$reviewerArgs<ExtArgs>
    approver?: boolean | SampleTest$approverArgs<ExtArgs>
  }, ExtArgs["result"]["sampleTest"]>

  export type SampleTestSelectScalar = {
    id?: boolean
    sampleId?: boolean
    testId?: boolean
    result?: boolean
    submittedBy?: boolean
    reviewedBy?: boolean
    approvedBy?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SampleTestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sampleId" | "testId" | "result" | "submittedBy" | "reviewedBy" | "approvedBy" | "submittedAt" | "reviewedAt" | "approvedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["sampleTest"]>
  export type SampleTestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    test?: boolean | TestDefaultArgs<ExtArgs>
    submitter?: boolean | SampleTest$submitterArgs<ExtArgs>
    reviewer?: boolean | SampleTest$reviewerArgs<ExtArgs>
    approver?: boolean | SampleTest$approverArgs<ExtArgs>
  }
  export type SampleTestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    test?: boolean | TestDefaultArgs<ExtArgs>
    submitter?: boolean | SampleTest$submitterArgs<ExtArgs>
    reviewer?: boolean | SampleTest$reviewerArgs<ExtArgs>
    approver?: boolean | SampleTest$approverArgs<ExtArgs>
  }
  export type SampleTestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    test?: boolean | TestDefaultArgs<ExtArgs>
    submitter?: boolean | SampleTest$submitterArgs<ExtArgs>
    reviewer?: boolean | SampleTest$reviewerArgs<ExtArgs>
    approver?: boolean | SampleTest$approverArgs<ExtArgs>
  }

  export type $SampleTestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SampleTest"
    objects: {
      sample: Prisma.$SamplePayload<ExtArgs>
      test: Prisma.$TestPayload<ExtArgs>
      submitter: Prisma.$UserPayload<ExtArgs> | null
      reviewer: Prisma.$UserPayload<ExtArgs> | null
      approver: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sampleId: number
      testId: number
      result: string | null
      submittedBy: number | null
      reviewedBy: number | null
      approvedBy: number | null
      submittedAt: Date | null
      reviewedAt: Date | null
      approvedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sampleTest"]>
    composites: {}
  }

  type SampleTestGetPayload<S extends boolean | null | undefined | SampleTestDefaultArgs> = $Result.GetResult<Prisma.$SampleTestPayload, S>

  type SampleTestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SampleTestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SampleTestCountAggregateInputType | true
    }

  export interface SampleTestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SampleTest'], meta: { name: 'SampleTest' } }
    /**
     * Find zero or one SampleTest that matches the filter.
     * @param {SampleTestFindUniqueArgs} args - Arguments to find a SampleTest
     * @example
     * // Get one SampleTest
     * const sampleTest = await prisma.sampleTest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SampleTestFindUniqueArgs>(args: SelectSubset<T, SampleTestFindUniqueArgs<ExtArgs>>): Prisma__SampleTestClient<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SampleTest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SampleTestFindUniqueOrThrowArgs} args - Arguments to find a SampleTest
     * @example
     * // Get one SampleTest
     * const sampleTest = await prisma.sampleTest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SampleTestFindUniqueOrThrowArgs>(args: SelectSubset<T, SampleTestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SampleTestClient<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SampleTest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTestFindFirstArgs} args - Arguments to find a SampleTest
     * @example
     * // Get one SampleTest
     * const sampleTest = await prisma.sampleTest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SampleTestFindFirstArgs>(args?: SelectSubset<T, SampleTestFindFirstArgs<ExtArgs>>): Prisma__SampleTestClient<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SampleTest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTestFindFirstOrThrowArgs} args - Arguments to find a SampleTest
     * @example
     * // Get one SampleTest
     * const sampleTest = await prisma.sampleTest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SampleTestFindFirstOrThrowArgs>(args?: SelectSubset<T, SampleTestFindFirstOrThrowArgs<ExtArgs>>): Prisma__SampleTestClient<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SampleTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SampleTests
     * const sampleTests = await prisma.sampleTest.findMany()
     * 
     * // Get first 10 SampleTests
     * const sampleTests = await prisma.sampleTest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sampleTestWithIdOnly = await prisma.sampleTest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SampleTestFindManyArgs>(args?: SelectSubset<T, SampleTestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SampleTest.
     * @param {SampleTestCreateArgs} args - Arguments to create a SampleTest.
     * @example
     * // Create one SampleTest
     * const SampleTest = await prisma.sampleTest.create({
     *   data: {
     *     // ... data to create a SampleTest
     *   }
     * })
     * 
     */
    create<T extends SampleTestCreateArgs>(args: SelectSubset<T, SampleTestCreateArgs<ExtArgs>>): Prisma__SampleTestClient<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SampleTests.
     * @param {SampleTestCreateManyArgs} args - Arguments to create many SampleTests.
     * @example
     * // Create many SampleTests
     * const sampleTest = await prisma.sampleTest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SampleTestCreateManyArgs>(args?: SelectSubset<T, SampleTestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SampleTests and returns the data saved in the database.
     * @param {SampleTestCreateManyAndReturnArgs} args - Arguments to create many SampleTests.
     * @example
     * // Create many SampleTests
     * const sampleTest = await prisma.sampleTest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SampleTests and only return the `id`
     * const sampleTestWithIdOnly = await prisma.sampleTest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SampleTestCreateManyAndReturnArgs>(args?: SelectSubset<T, SampleTestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SampleTest.
     * @param {SampleTestDeleteArgs} args - Arguments to delete one SampleTest.
     * @example
     * // Delete one SampleTest
     * const SampleTest = await prisma.sampleTest.delete({
     *   where: {
     *     // ... filter to delete one SampleTest
     *   }
     * })
     * 
     */
    delete<T extends SampleTestDeleteArgs>(args: SelectSubset<T, SampleTestDeleteArgs<ExtArgs>>): Prisma__SampleTestClient<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SampleTest.
     * @param {SampleTestUpdateArgs} args - Arguments to update one SampleTest.
     * @example
     * // Update one SampleTest
     * const sampleTest = await prisma.sampleTest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SampleTestUpdateArgs>(args: SelectSubset<T, SampleTestUpdateArgs<ExtArgs>>): Prisma__SampleTestClient<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SampleTests.
     * @param {SampleTestDeleteManyArgs} args - Arguments to filter SampleTests to delete.
     * @example
     * // Delete a few SampleTests
     * const { count } = await prisma.sampleTest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SampleTestDeleteManyArgs>(args?: SelectSubset<T, SampleTestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SampleTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SampleTests
     * const sampleTest = await prisma.sampleTest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SampleTestUpdateManyArgs>(args: SelectSubset<T, SampleTestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SampleTests and returns the data updated in the database.
     * @param {SampleTestUpdateManyAndReturnArgs} args - Arguments to update many SampleTests.
     * @example
     * // Update many SampleTests
     * const sampleTest = await prisma.sampleTest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SampleTests and only return the `id`
     * const sampleTestWithIdOnly = await prisma.sampleTest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SampleTestUpdateManyAndReturnArgs>(args: SelectSubset<T, SampleTestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SampleTest.
     * @param {SampleTestUpsertArgs} args - Arguments to update or create a SampleTest.
     * @example
     * // Update or create a SampleTest
     * const sampleTest = await prisma.sampleTest.upsert({
     *   create: {
     *     // ... data to create a SampleTest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SampleTest we want to update
     *   }
     * })
     */
    upsert<T extends SampleTestUpsertArgs>(args: SelectSubset<T, SampleTestUpsertArgs<ExtArgs>>): Prisma__SampleTestClient<$Result.GetResult<Prisma.$SampleTestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SampleTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTestCountArgs} args - Arguments to filter SampleTests to count.
     * @example
     * // Count the number of SampleTests
     * const count = await prisma.sampleTest.count({
     *   where: {
     *     // ... the filter for the SampleTests we want to count
     *   }
     * })
    **/
    count<T extends SampleTestCountArgs>(
      args?: Subset<T, SampleTestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SampleTestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SampleTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SampleTestAggregateArgs>(args: Subset<T, SampleTestAggregateArgs>): Prisma.PrismaPromise<GetSampleTestAggregateType<T>>

    /**
     * Group by SampleTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SampleTestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SampleTestGroupByArgs['orderBy'] }
        : { orderBy?: SampleTestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SampleTestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSampleTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SampleTest model
   */
  readonly fields: SampleTestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SampleTest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SampleTestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sample<T extends SampleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SampleDefaultArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    test<T extends TestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestDefaultArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submitter<T extends SampleTest$submitterArgs<ExtArgs> = {}>(args?: Subset<T, SampleTest$submitterArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reviewer<T extends SampleTest$reviewerArgs<ExtArgs> = {}>(args?: Subset<T, SampleTest$reviewerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    approver<T extends SampleTest$approverArgs<ExtArgs> = {}>(args?: Subset<T, SampleTest$approverArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SampleTest model
   */
  interface SampleTestFieldRefs {
    readonly id: FieldRef<"SampleTest", 'Int'>
    readonly sampleId: FieldRef<"SampleTest", 'Int'>
    readonly testId: FieldRef<"SampleTest", 'Int'>
    readonly result: FieldRef<"SampleTest", 'String'>
    readonly submittedBy: FieldRef<"SampleTest", 'Int'>
    readonly reviewedBy: FieldRef<"SampleTest", 'Int'>
    readonly approvedBy: FieldRef<"SampleTest", 'Int'>
    readonly submittedAt: FieldRef<"SampleTest", 'DateTime'>
    readonly reviewedAt: FieldRef<"SampleTest", 'DateTime'>
    readonly approvedAt: FieldRef<"SampleTest", 'DateTime'>
    readonly createdAt: FieldRef<"SampleTest", 'DateTime'>
    readonly updatedAt: FieldRef<"SampleTest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SampleTest findUnique
   */
  export type SampleTestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    /**
     * Filter, which SampleTest to fetch.
     */
    where: SampleTestWhereUniqueInput
  }

  /**
   * SampleTest findUniqueOrThrow
   */
  export type SampleTestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    /**
     * Filter, which SampleTest to fetch.
     */
    where: SampleTestWhereUniqueInput
  }

  /**
   * SampleTest findFirst
   */
  export type SampleTestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    /**
     * Filter, which SampleTest to fetch.
     */
    where?: SampleTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleTests to fetch.
     */
    orderBy?: SampleTestOrderByWithRelationInput | SampleTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SampleTests.
     */
    cursor?: SampleTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SampleTests.
     */
    distinct?: SampleTestScalarFieldEnum | SampleTestScalarFieldEnum[]
  }

  /**
   * SampleTest findFirstOrThrow
   */
  export type SampleTestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    /**
     * Filter, which SampleTest to fetch.
     */
    where?: SampleTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleTests to fetch.
     */
    orderBy?: SampleTestOrderByWithRelationInput | SampleTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SampleTests.
     */
    cursor?: SampleTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SampleTests.
     */
    distinct?: SampleTestScalarFieldEnum | SampleTestScalarFieldEnum[]
  }

  /**
   * SampleTest findMany
   */
  export type SampleTestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    /**
     * Filter, which SampleTests to fetch.
     */
    where?: SampleTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleTests to fetch.
     */
    orderBy?: SampleTestOrderByWithRelationInput | SampleTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SampleTests.
     */
    cursor?: SampleTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleTests.
     */
    skip?: number
    distinct?: SampleTestScalarFieldEnum | SampleTestScalarFieldEnum[]
  }

  /**
   * SampleTest create
   */
  export type SampleTestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    /**
     * The data needed to create a SampleTest.
     */
    data: XOR<SampleTestCreateInput, SampleTestUncheckedCreateInput>
  }

  /**
   * SampleTest createMany
   */
  export type SampleTestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SampleTests.
     */
    data: SampleTestCreateManyInput | SampleTestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SampleTest createManyAndReturn
   */
  export type SampleTestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * The data used to create many SampleTests.
     */
    data: SampleTestCreateManyInput | SampleTestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SampleTest update
   */
  export type SampleTestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    /**
     * The data needed to update a SampleTest.
     */
    data: XOR<SampleTestUpdateInput, SampleTestUncheckedUpdateInput>
    /**
     * Choose, which SampleTest to update.
     */
    where: SampleTestWhereUniqueInput
  }

  /**
   * SampleTest updateMany
   */
  export type SampleTestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SampleTests.
     */
    data: XOR<SampleTestUpdateManyMutationInput, SampleTestUncheckedUpdateManyInput>
    /**
     * Filter which SampleTests to update
     */
    where?: SampleTestWhereInput
    /**
     * Limit how many SampleTests to update.
     */
    limit?: number
  }

  /**
   * SampleTest updateManyAndReturn
   */
  export type SampleTestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * The data used to update SampleTests.
     */
    data: XOR<SampleTestUpdateManyMutationInput, SampleTestUncheckedUpdateManyInput>
    /**
     * Filter which SampleTests to update
     */
    where?: SampleTestWhereInput
    /**
     * Limit how many SampleTests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SampleTest upsert
   */
  export type SampleTestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    /**
     * The filter to search for the SampleTest to update in case it exists.
     */
    where: SampleTestWhereUniqueInput
    /**
     * In case the SampleTest found by the `where` argument doesn't exist, create a new SampleTest with this data.
     */
    create: XOR<SampleTestCreateInput, SampleTestUncheckedCreateInput>
    /**
     * In case the SampleTest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SampleTestUpdateInput, SampleTestUncheckedUpdateInput>
  }

  /**
   * SampleTest delete
   */
  export type SampleTestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
    /**
     * Filter which SampleTest to delete.
     */
    where: SampleTestWhereUniqueInput
  }

  /**
   * SampleTest deleteMany
   */
  export type SampleTestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SampleTests to delete
     */
    where?: SampleTestWhereInput
    /**
     * Limit how many SampleTests to delete.
     */
    limit?: number
  }

  /**
   * SampleTest.submitter
   */
  export type SampleTest$submitterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SampleTest.reviewer
   */
  export type SampleTest$reviewerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SampleTest.approver
   */
  export type SampleTest$approverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SampleTest without action
   */
  export type SampleTestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTest
     */
    select?: SampleTestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleTest
     */
    omit?: SampleTestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleTestInclude<ExtArgs> | null
  }


  /**
   * Model SampleLog
   */

  export type AggregateSampleLog = {
    _count: SampleLogCountAggregateOutputType | null
    _avg: SampleLogAvgAggregateOutputType | null
    _sum: SampleLogSumAggregateOutputType | null
    _min: SampleLogMinAggregateOutputType | null
    _max: SampleLogMaxAggregateOutputType | null
  }

  export type SampleLogAvgAggregateOutputType = {
    id: number | null
    sampleId: number | null
    receivedBy: number | null
  }

  export type SampleLogSumAggregateOutputType = {
    id: number | null
    sampleId: number | null
    receivedBy: number | null
  }

  export type SampleLogMinAggregateOutputType = {
    id: number | null
    sampleId: number | null
    receivedBy: number | null
    deliveredBy: string | null
    deliveryContact: string | null
    modeOfTransmit: string | null
    createdAt: Date | null
  }

  export type SampleLogMaxAggregateOutputType = {
    id: number | null
    sampleId: number | null
    receivedBy: number | null
    deliveredBy: string | null
    deliveryContact: string | null
    modeOfTransmit: string | null
    createdAt: Date | null
  }

  export type SampleLogCountAggregateOutputType = {
    id: number
    sampleId: number
    receivedBy: number
    deliveredBy: number
    deliveryContact: number
    modeOfTransmit: number
    createdAt: number
    _all: number
  }


  export type SampleLogAvgAggregateInputType = {
    id?: true
    sampleId?: true
    receivedBy?: true
  }

  export type SampleLogSumAggregateInputType = {
    id?: true
    sampleId?: true
    receivedBy?: true
  }

  export type SampleLogMinAggregateInputType = {
    id?: true
    sampleId?: true
    receivedBy?: true
    deliveredBy?: true
    deliveryContact?: true
    modeOfTransmit?: true
    createdAt?: true
  }

  export type SampleLogMaxAggregateInputType = {
    id?: true
    sampleId?: true
    receivedBy?: true
    deliveredBy?: true
    deliveryContact?: true
    modeOfTransmit?: true
    createdAt?: true
  }

  export type SampleLogCountAggregateInputType = {
    id?: true
    sampleId?: true
    receivedBy?: true
    deliveredBy?: true
    deliveryContact?: true
    modeOfTransmit?: true
    createdAt?: true
    _all?: true
  }

  export type SampleLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SampleLog to aggregate.
     */
    where?: SampleLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleLogs to fetch.
     */
    orderBy?: SampleLogOrderByWithRelationInput | SampleLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SampleLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SampleLogs
    **/
    _count?: true | SampleLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SampleLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SampleLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SampleLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SampleLogMaxAggregateInputType
  }

  export type GetSampleLogAggregateType<T extends SampleLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSampleLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSampleLog[P]>
      : GetScalarType<T[P], AggregateSampleLog[P]>
  }




  export type SampleLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleLogWhereInput
    orderBy?: SampleLogOrderByWithAggregationInput | SampleLogOrderByWithAggregationInput[]
    by: SampleLogScalarFieldEnum[] | SampleLogScalarFieldEnum
    having?: SampleLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SampleLogCountAggregateInputType | true
    _avg?: SampleLogAvgAggregateInputType
    _sum?: SampleLogSumAggregateInputType
    _min?: SampleLogMinAggregateInputType
    _max?: SampleLogMaxAggregateInputType
  }

  export type SampleLogGroupByOutputType = {
    id: number
    sampleId: number
    receivedBy: number
    deliveredBy: string | null
    deliveryContact: string | null
    modeOfTransmit: string
    createdAt: Date
    _count: SampleLogCountAggregateOutputType | null
    _avg: SampleLogAvgAggregateOutputType | null
    _sum: SampleLogSumAggregateOutputType | null
    _min: SampleLogMinAggregateOutputType | null
    _max: SampleLogMaxAggregateOutputType | null
  }

  type GetSampleLogGroupByPayload<T extends SampleLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SampleLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SampleLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SampleLogGroupByOutputType[P]>
            : GetScalarType<T[P], SampleLogGroupByOutputType[P]>
        }
      >
    >


  export type SampleLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    receivedBy?: boolean
    deliveredBy?: boolean
    deliveryContact?: boolean
    modeOfTransmit?: boolean
    createdAt?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sampleLog"]>

  export type SampleLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    receivedBy?: boolean
    deliveredBy?: boolean
    deliveryContact?: boolean
    modeOfTransmit?: boolean
    createdAt?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sampleLog"]>

  export type SampleLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    receivedBy?: boolean
    deliveredBy?: boolean
    deliveryContact?: boolean
    modeOfTransmit?: boolean
    createdAt?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sampleLog"]>

  export type SampleLogSelectScalar = {
    id?: boolean
    sampleId?: boolean
    receivedBy?: boolean
    deliveredBy?: boolean
    deliveryContact?: boolean
    modeOfTransmit?: boolean
    createdAt?: boolean
  }

  export type SampleLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sampleId" | "receivedBy" | "deliveredBy" | "deliveryContact" | "modeOfTransmit" | "createdAt", ExtArgs["result"]["sampleLog"]>
  export type SampleLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SampleLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SampleLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SampleLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SampleLog"
    objects: {
      sample: Prisma.$SamplePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sampleId: number
      receivedBy: number
      deliveredBy: string | null
      deliveryContact: string | null
      modeOfTransmit: string
      createdAt: Date
    }, ExtArgs["result"]["sampleLog"]>
    composites: {}
  }

  type SampleLogGetPayload<S extends boolean | null | undefined | SampleLogDefaultArgs> = $Result.GetResult<Prisma.$SampleLogPayload, S>

  type SampleLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SampleLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SampleLogCountAggregateInputType | true
    }

  export interface SampleLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SampleLog'], meta: { name: 'SampleLog' } }
    /**
     * Find zero or one SampleLog that matches the filter.
     * @param {SampleLogFindUniqueArgs} args - Arguments to find a SampleLog
     * @example
     * // Get one SampleLog
     * const sampleLog = await prisma.sampleLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SampleLogFindUniqueArgs>(args: SelectSubset<T, SampleLogFindUniqueArgs<ExtArgs>>): Prisma__SampleLogClient<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SampleLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SampleLogFindUniqueOrThrowArgs} args - Arguments to find a SampleLog
     * @example
     * // Get one SampleLog
     * const sampleLog = await prisma.sampleLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SampleLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SampleLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SampleLogClient<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SampleLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleLogFindFirstArgs} args - Arguments to find a SampleLog
     * @example
     * // Get one SampleLog
     * const sampleLog = await prisma.sampleLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SampleLogFindFirstArgs>(args?: SelectSubset<T, SampleLogFindFirstArgs<ExtArgs>>): Prisma__SampleLogClient<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SampleLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleLogFindFirstOrThrowArgs} args - Arguments to find a SampleLog
     * @example
     * // Get one SampleLog
     * const sampleLog = await prisma.sampleLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SampleLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SampleLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SampleLogClient<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SampleLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SampleLogs
     * const sampleLogs = await prisma.sampleLog.findMany()
     * 
     * // Get first 10 SampleLogs
     * const sampleLogs = await prisma.sampleLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sampleLogWithIdOnly = await prisma.sampleLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SampleLogFindManyArgs>(args?: SelectSubset<T, SampleLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SampleLog.
     * @param {SampleLogCreateArgs} args - Arguments to create a SampleLog.
     * @example
     * // Create one SampleLog
     * const SampleLog = await prisma.sampleLog.create({
     *   data: {
     *     // ... data to create a SampleLog
     *   }
     * })
     * 
     */
    create<T extends SampleLogCreateArgs>(args: SelectSubset<T, SampleLogCreateArgs<ExtArgs>>): Prisma__SampleLogClient<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SampleLogs.
     * @param {SampleLogCreateManyArgs} args - Arguments to create many SampleLogs.
     * @example
     * // Create many SampleLogs
     * const sampleLog = await prisma.sampleLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SampleLogCreateManyArgs>(args?: SelectSubset<T, SampleLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SampleLogs and returns the data saved in the database.
     * @param {SampleLogCreateManyAndReturnArgs} args - Arguments to create many SampleLogs.
     * @example
     * // Create many SampleLogs
     * const sampleLog = await prisma.sampleLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SampleLogs and only return the `id`
     * const sampleLogWithIdOnly = await prisma.sampleLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SampleLogCreateManyAndReturnArgs>(args?: SelectSubset<T, SampleLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SampleLog.
     * @param {SampleLogDeleteArgs} args - Arguments to delete one SampleLog.
     * @example
     * // Delete one SampleLog
     * const SampleLog = await prisma.sampleLog.delete({
     *   where: {
     *     // ... filter to delete one SampleLog
     *   }
     * })
     * 
     */
    delete<T extends SampleLogDeleteArgs>(args: SelectSubset<T, SampleLogDeleteArgs<ExtArgs>>): Prisma__SampleLogClient<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SampleLog.
     * @param {SampleLogUpdateArgs} args - Arguments to update one SampleLog.
     * @example
     * // Update one SampleLog
     * const sampleLog = await prisma.sampleLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SampleLogUpdateArgs>(args: SelectSubset<T, SampleLogUpdateArgs<ExtArgs>>): Prisma__SampleLogClient<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SampleLogs.
     * @param {SampleLogDeleteManyArgs} args - Arguments to filter SampleLogs to delete.
     * @example
     * // Delete a few SampleLogs
     * const { count } = await prisma.sampleLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SampleLogDeleteManyArgs>(args?: SelectSubset<T, SampleLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SampleLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SampleLogs
     * const sampleLog = await prisma.sampleLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SampleLogUpdateManyArgs>(args: SelectSubset<T, SampleLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SampleLogs and returns the data updated in the database.
     * @param {SampleLogUpdateManyAndReturnArgs} args - Arguments to update many SampleLogs.
     * @example
     * // Update many SampleLogs
     * const sampleLog = await prisma.sampleLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SampleLogs and only return the `id`
     * const sampleLogWithIdOnly = await prisma.sampleLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SampleLogUpdateManyAndReturnArgs>(args: SelectSubset<T, SampleLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SampleLog.
     * @param {SampleLogUpsertArgs} args - Arguments to update or create a SampleLog.
     * @example
     * // Update or create a SampleLog
     * const sampleLog = await prisma.sampleLog.upsert({
     *   create: {
     *     // ... data to create a SampleLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SampleLog we want to update
     *   }
     * })
     */
    upsert<T extends SampleLogUpsertArgs>(args: SelectSubset<T, SampleLogUpsertArgs<ExtArgs>>): Prisma__SampleLogClient<$Result.GetResult<Prisma.$SampleLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SampleLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleLogCountArgs} args - Arguments to filter SampleLogs to count.
     * @example
     * // Count the number of SampleLogs
     * const count = await prisma.sampleLog.count({
     *   where: {
     *     // ... the filter for the SampleLogs we want to count
     *   }
     * })
    **/
    count<T extends SampleLogCountArgs>(
      args?: Subset<T, SampleLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SampleLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SampleLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SampleLogAggregateArgs>(args: Subset<T, SampleLogAggregateArgs>): Prisma.PrismaPromise<GetSampleLogAggregateType<T>>

    /**
     * Group by SampleLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SampleLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SampleLogGroupByArgs['orderBy'] }
        : { orderBy?: SampleLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SampleLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSampleLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SampleLog model
   */
  readonly fields: SampleLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SampleLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SampleLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sample<T extends SampleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SampleDefaultArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SampleLog model
   */
  interface SampleLogFieldRefs {
    readonly id: FieldRef<"SampleLog", 'Int'>
    readonly sampleId: FieldRef<"SampleLog", 'Int'>
    readonly receivedBy: FieldRef<"SampleLog", 'Int'>
    readonly deliveredBy: FieldRef<"SampleLog", 'String'>
    readonly deliveryContact: FieldRef<"SampleLog", 'String'>
    readonly modeOfTransmit: FieldRef<"SampleLog", 'String'>
    readonly createdAt: FieldRef<"SampleLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SampleLog findUnique
   */
  export type SampleLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    /**
     * Filter, which SampleLog to fetch.
     */
    where: SampleLogWhereUniqueInput
  }

  /**
   * SampleLog findUniqueOrThrow
   */
  export type SampleLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    /**
     * Filter, which SampleLog to fetch.
     */
    where: SampleLogWhereUniqueInput
  }

  /**
   * SampleLog findFirst
   */
  export type SampleLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    /**
     * Filter, which SampleLog to fetch.
     */
    where?: SampleLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleLogs to fetch.
     */
    orderBy?: SampleLogOrderByWithRelationInput | SampleLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SampleLogs.
     */
    cursor?: SampleLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SampleLogs.
     */
    distinct?: SampleLogScalarFieldEnum | SampleLogScalarFieldEnum[]
  }

  /**
   * SampleLog findFirstOrThrow
   */
  export type SampleLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    /**
     * Filter, which SampleLog to fetch.
     */
    where?: SampleLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleLogs to fetch.
     */
    orderBy?: SampleLogOrderByWithRelationInput | SampleLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SampleLogs.
     */
    cursor?: SampleLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SampleLogs.
     */
    distinct?: SampleLogScalarFieldEnum | SampleLogScalarFieldEnum[]
  }

  /**
   * SampleLog findMany
   */
  export type SampleLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    /**
     * Filter, which SampleLogs to fetch.
     */
    where?: SampleLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleLogs to fetch.
     */
    orderBy?: SampleLogOrderByWithRelationInput | SampleLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SampleLogs.
     */
    cursor?: SampleLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleLogs.
     */
    skip?: number
    distinct?: SampleLogScalarFieldEnum | SampleLogScalarFieldEnum[]
  }

  /**
   * SampleLog create
   */
  export type SampleLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    /**
     * The data needed to create a SampleLog.
     */
    data: XOR<SampleLogCreateInput, SampleLogUncheckedCreateInput>
  }

  /**
   * SampleLog createMany
   */
  export type SampleLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SampleLogs.
     */
    data: SampleLogCreateManyInput | SampleLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SampleLog createManyAndReturn
   */
  export type SampleLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * The data used to create many SampleLogs.
     */
    data: SampleLogCreateManyInput | SampleLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SampleLog update
   */
  export type SampleLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    /**
     * The data needed to update a SampleLog.
     */
    data: XOR<SampleLogUpdateInput, SampleLogUncheckedUpdateInput>
    /**
     * Choose, which SampleLog to update.
     */
    where: SampleLogWhereUniqueInput
  }

  /**
   * SampleLog updateMany
   */
  export type SampleLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SampleLogs.
     */
    data: XOR<SampleLogUpdateManyMutationInput, SampleLogUncheckedUpdateManyInput>
    /**
     * Filter which SampleLogs to update
     */
    where?: SampleLogWhereInput
    /**
     * Limit how many SampleLogs to update.
     */
    limit?: number
  }

  /**
   * SampleLog updateManyAndReturn
   */
  export type SampleLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * The data used to update SampleLogs.
     */
    data: XOR<SampleLogUpdateManyMutationInput, SampleLogUncheckedUpdateManyInput>
    /**
     * Filter which SampleLogs to update
     */
    where?: SampleLogWhereInput
    /**
     * Limit how many SampleLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SampleLog upsert
   */
  export type SampleLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    /**
     * The filter to search for the SampleLog to update in case it exists.
     */
    where: SampleLogWhereUniqueInput
    /**
     * In case the SampleLog found by the `where` argument doesn't exist, create a new SampleLog with this data.
     */
    create: XOR<SampleLogCreateInput, SampleLogUncheckedCreateInput>
    /**
     * In case the SampleLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SampleLogUpdateInput, SampleLogUncheckedUpdateInput>
  }

  /**
   * SampleLog delete
   */
  export type SampleLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
    /**
     * Filter which SampleLog to delete.
     */
    where: SampleLogWhereUniqueInput
  }

  /**
   * SampleLog deleteMany
   */
  export type SampleLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SampleLogs to delete
     */
    where?: SampleLogWhereInput
    /**
     * Limit how many SampleLogs to delete.
     */
    limit?: number
  }

  /**
   * SampleLog without action
   */
  export type SampleLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleLog
     */
    select?: SampleLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleLog
     */
    omit?: SampleLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleLogInclude<ExtArgs> | null
  }


  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    id: number | null
    sampleId: number | null
    amountUgx: number | null
    amountUsd: number | null
    issuedBy: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    id: number | null
    sampleId: number | null
    amountUgx: number | null
    amountUsd: number | null
    issuedBy: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: number | null
    sampleId: number | null
    amountUgx: number | null
    amountUsd: number | null
    issuedBy: number | null
    issuedAt: Date | null
    paid: boolean | null
    paymentMethod: string | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: number | null
    sampleId: number | null
    amountUgx: number | null
    amountUsd: number | null
    issuedBy: number | null
    issuedAt: Date | null
    paid: boolean | null
    paymentMethod: string | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    sampleId: number
    amountUgx: number
    amountUsd: number
    issuedBy: number
    issuedAt: number
    paid: number
    paymentMethod: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    id?: true
    sampleId?: true
    amountUgx?: true
    amountUsd?: true
    issuedBy?: true
  }

  export type InvoiceSumAggregateInputType = {
    id?: true
    sampleId?: true
    amountUgx?: true
    amountUsd?: true
    issuedBy?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    sampleId?: true
    amountUgx?: true
    amountUsd?: true
    issuedBy?: true
    issuedAt?: true
    paid?: true
    paymentMethod?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    sampleId?: true
    amountUgx?: true
    amountUsd?: true
    issuedBy?: true
    issuedAt?: true
    paid?: true
    paymentMethod?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    sampleId?: true
    amountUgx?: true
    amountUsd?: true
    issuedBy?: true
    issuedAt?: true
    paid?: true
    paymentMethod?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: number
    sampleId: number
    amountUgx: number
    amountUsd: number
    issuedBy: number
    issuedAt: Date
    paid: boolean
    paymentMethod: string | null
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    amountUgx?: boolean
    amountUsd?: boolean
    issuedBy?: boolean
    issuedAt?: boolean
    paid?: boolean
    paymentMethod?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    payments?: boolean | Invoice$paymentsArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    amountUgx?: boolean
    amountUsd?: boolean
    issuedBy?: boolean
    issuedAt?: boolean
    paid?: boolean
    paymentMethod?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sampleId?: boolean
    amountUgx?: boolean
    amountUsd?: boolean
    issuedBy?: boolean
    issuedAt?: boolean
    paid?: boolean
    paymentMethod?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    sampleId?: boolean
    amountUgx?: boolean
    amountUsd?: boolean
    issuedBy?: boolean
    issuedAt?: boolean
    paid?: boolean
    paymentMethod?: boolean
  }

  export type InvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sampleId" | "amountUgx" | "amountUsd" | "issuedBy" | "issuedAt" | "paid" | "paymentMethod", ExtArgs["result"]["invoice"]>
  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    payments?: boolean | Invoice$paymentsArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      sample: Prisma.$SamplePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sampleId: number
      amountUgx: number
      amountUsd: number
      issuedBy: number
      issuedAt: Date
      paid: boolean
      paymentMethod: string | null
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceFindUniqueArgs>(args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceFindFirstArgs>(args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceFindManyArgs>(args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
     */
    create<T extends InvoiceCreateArgs>(args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invoices.
     * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceCreateManyArgs>(args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invoices and returns the data saved in the database.
     * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
     */
    delete<T extends InvoiceDeleteArgs>(args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceUpdateArgs>(args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceDeleteManyArgs>(args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceUpdateManyArgs>(args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices and returns the data updated in the database.
     * @param {InvoiceUpdateManyAndReturnArgs} args - Arguments to update many Invoices.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceUpsertArgs>(args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sample<T extends SampleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SampleDefaultArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payments<T extends Invoice$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invoice model
   */
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'Int'>
    readonly sampleId: FieldRef<"Invoice", 'Int'>
    readonly amountUgx: FieldRef<"Invoice", 'Int'>
    readonly amountUsd: FieldRef<"Invoice", 'Float'>
    readonly issuedBy: FieldRef<"Invoice", 'Int'>
    readonly issuedAt: FieldRef<"Invoice", 'DateTime'>
    readonly paid: FieldRef<"Invoice", 'Boolean'>
    readonly paymentMethod: FieldRef<"Invoice", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }

  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invoice createManyAndReturn
   */
  export type InvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
  }

  /**
   * Invoice updateManyAndReturn
   */
  export type InvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }

  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to delete.
     */
    limit?: number
  }

  /**
   * Invoice.payments
   */
  export type Invoice$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    amountUgx: number | null
    amountUsd: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    amountUgx: number | null
    amountUsd: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    amountUgx: number | null
    amountUsd: number | null
    paymentDate: Date | null
    method: string | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    amountUgx: number | null
    amountUsd: number | null
    paymentDate: Date | null
    method: string | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    invoiceId: number
    amountUgx: number
    amountUsd: number
    paymentDate: number
    method: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    invoiceId?: true
    amountUgx?: true
    amountUsd?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    invoiceId?: true
    amountUgx?: true
    amountUsd?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    invoiceId?: true
    amountUgx?: true
    amountUsd?: true
    paymentDate?: true
    method?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    invoiceId?: true
    amountUgx?: true
    amountUsd?: true
    paymentDate?: true
    method?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    invoiceId?: true
    amountUgx?: true
    amountUsd?: true
    paymentDate?: true
    method?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    invoiceId: number
    amountUgx: number
    amountUsd: number
    paymentDate: Date
    method: string | null
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    amountUgx?: boolean
    amountUsd?: boolean
    paymentDate?: boolean
    method?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    amountUgx?: boolean
    amountUsd?: boolean
    paymentDate?: boolean
    method?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    amountUgx?: boolean
    amountUsd?: boolean
    paymentDate?: boolean
    method?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    invoiceId?: boolean
    amountUgx?: boolean
    amountUsd?: boolean
    paymentDate?: boolean
    method?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceId" | "amountUgx" | "amountUsd" | "paymentDate" | "method", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      invoiceId: number
      amountUgx: number
      amountUsd: number
      paymentDate: Date
      method: string | null
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly invoiceId: FieldRef<"Payment", 'Int'>
    readonly amountUgx: FieldRef<"Payment", 'Int'>
    readonly amountUsd: FieldRef<"Payment", 'Float'>
    readonly paymentDate: FieldRef<"Payment", 'DateTime'>
    readonly method: FieldRef<"Payment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model AccessLevel
   */

  export type AggregateAccessLevel = {
    _count: AccessLevelCountAggregateOutputType | null
    _avg: AccessLevelAvgAggregateOutputType | null
    _sum: AccessLevelSumAggregateOutputType | null
    _min: AccessLevelMinAggregateOutputType | null
    _max: AccessLevelMaxAggregateOutputType | null
  }

  export type AccessLevelAvgAggregateOutputType = {
    id: number | null
    level: number | null
  }

  export type AccessLevelSumAggregateOutputType = {
    id: number | null
    level: number | null
  }

  export type AccessLevelMinAggregateOutputType = {
    id: number | null
    level: number | null
  }

  export type AccessLevelMaxAggregateOutputType = {
    id: number | null
    level: number | null
  }

  export type AccessLevelCountAggregateOutputType = {
    id: number
    level: number
    permissions: number
    _all: number
  }


  export type AccessLevelAvgAggregateInputType = {
    id?: true
    level?: true
  }

  export type AccessLevelSumAggregateInputType = {
    id?: true
    level?: true
  }

  export type AccessLevelMinAggregateInputType = {
    id?: true
    level?: true
  }

  export type AccessLevelMaxAggregateInputType = {
    id?: true
    level?: true
  }

  export type AccessLevelCountAggregateInputType = {
    id?: true
    level?: true
    permissions?: true
    _all?: true
  }

  export type AccessLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccessLevel to aggregate.
     */
    where?: AccessLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessLevels to fetch.
     */
    orderBy?: AccessLevelOrderByWithRelationInput | AccessLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccessLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccessLevels
    **/
    _count?: true | AccessLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccessLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccessLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccessLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccessLevelMaxAggregateInputType
  }

  export type GetAccessLevelAggregateType<T extends AccessLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateAccessLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccessLevel[P]>
      : GetScalarType<T[P], AggregateAccessLevel[P]>
  }




  export type AccessLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccessLevelWhereInput
    orderBy?: AccessLevelOrderByWithAggregationInput | AccessLevelOrderByWithAggregationInput[]
    by: AccessLevelScalarFieldEnum[] | AccessLevelScalarFieldEnum
    having?: AccessLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccessLevelCountAggregateInputType | true
    _avg?: AccessLevelAvgAggregateInputType
    _sum?: AccessLevelSumAggregateInputType
    _min?: AccessLevelMinAggregateInputType
    _max?: AccessLevelMaxAggregateInputType
  }

  export type AccessLevelGroupByOutputType = {
    id: number
    level: number
    permissions: string[]
    _count: AccessLevelCountAggregateOutputType | null
    _avg: AccessLevelAvgAggregateOutputType | null
    _sum: AccessLevelSumAggregateOutputType | null
    _min: AccessLevelMinAggregateOutputType | null
    _max: AccessLevelMaxAggregateOutputType | null
  }

  type GetAccessLevelGroupByPayload<T extends AccessLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccessLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccessLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccessLevelGroupByOutputType[P]>
            : GetScalarType<T[P], AccessLevelGroupByOutputType[P]>
        }
      >
    >


  export type AccessLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    permissions?: boolean
    users?: boolean | AccessLevel$usersArgs<ExtArgs>
    _count?: boolean | AccessLevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accessLevel"]>

  export type AccessLevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    permissions?: boolean
  }, ExtArgs["result"]["accessLevel"]>

  export type AccessLevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    permissions?: boolean
  }, ExtArgs["result"]["accessLevel"]>

  export type AccessLevelSelectScalar = {
    id?: boolean
    level?: boolean
    permissions?: boolean
  }

  export type AccessLevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "level" | "permissions", ExtArgs["result"]["accessLevel"]>
  export type AccessLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AccessLevel$usersArgs<ExtArgs>
    _count?: boolean | AccessLevelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AccessLevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AccessLevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AccessLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccessLevel"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      level: number
      permissions: string[]
    }, ExtArgs["result"]["accessLevel"]>
    composites: {}
  }

  type AccessLevelGetPayload<S extends boolean | null | undefined | AccessLevelDefaultArgs> = $Result.GetResult<Prisma.$AccessLevelPayload, S>

  type AccessLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccessLevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccessLevelCountAggregateInputType | true
    }

  export interface AccessLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccessLevel'], meta: { name: 'AccessLevel' } }
    /**
     * Find zero or one AccessLevel that matches the filter.
     * @param {AccessLevelFindUniqueArgs} args - Arguments to find a AccessLevel
     * @example
     * // Get one AccessLevel
     * const accessLevel = await prisma.accessLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccessLevelFindUniqueArgs>(args: SelectSubset<T, AccessLevelFindUniqueArgs<ExtArgs>>): Prisma__AccessLevelClient<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccessLevel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccessLevelFindUniqueOrThrowArgs} args - Arguments to find a AccessLevel
     * @example
     * // Get one AccessLevel
     * const accessLevel = await prisma.accessLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccessLevelFindUniqueOrThrowArgs>(args: SelectSubset<T, AccessLevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccessLevelClient<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccessLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessLevelFindFirstArgs} args - Arguments to find a AccessLevel
     * @example
     * // Get one AccessLevel
     * const accessLevel = await prisma.accessLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccessLevelFindFirstArgs>(args?: SelectSubset<T, AccessLevelFindFirstArgs<ExtArgs>>): Prisma__AccessLevelClient<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccessLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessLevelFindFirstOrThrowArgs} args - Arguments to find a AccessLevel
     * @example
     * // Get one AccessLevel
     * const accessLevel = await prisma.accessLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccessLevelFindFirstOrThrowArgs>(args?: SelectSubset<T, AccessLevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccessLevelClient<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccessLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessLevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccessLevels
     * const accessLevels = await prisma.accessLevel.findMany()
     * 
     * // Get first 10 AccessLevels
     * const accessLevels = await prisma.accessLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accessLevelWithIdOnly = await prisma.accessLevel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccessLevelFindManyArgs>(args?: SelectSubset<T, AccessLevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccessLevel.
     * @param {AccessLevelCreateArgs} args - Arguments to create a AccessLevel.
     * @example
     * // Create one AccessLevel
     * const AccessLevel = await prisma.accessLevel.create({
     *   data: {
     *     // ... data to create a AccessLevel
     *   }
     * })
     * 
     */
    create<T extends AccessLevelCreateArgs>(args: SelectSubset<T, AccessLevelCreateArgs<ExtArgs>>): Prisma__AccessLevelClient<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccessLevels.
     * @param {AccessLevelCreateManyArgs} args - Arguments to create many AccessLevels.
     * @example
     * // Create many AccessLevels
     * const accessLevel = await prisma.accessLevel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccessLevelCreateManyArgs>(args?: SelectSubset<T, AccessLevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccessLevels and returns the data saved in the database.
     * @param {AccessLevelCreateManyAndReturnArgs} args - Arguments to create many AccessLevels.
     * @example
     * // Create many AccessLevels
     * const accessLevel = await prisma.accessLevel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccessLevels and only return the `id`
     * const accessLevelWithIdOnly = await prisma.accessLevel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccessLevelCreateManyAndReturnArgs>(args?: SelectSubset<T, AccessLevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AccessLevel.
     * @param {AccessLevelDeleteArgs} args - Arguments to delete one AccessLevel.
     * @example
     * // Delete one AccessLevel
     * const AccessLevel = await prisma.accessLevel.delete({
     *   where: {
     *     // ... filter to delete one AccessLevel
     *   }
     * })
     * 
     */
    delete<T extends AccessLevelDeleteArgs>(args: SelectSubset<T, AccessLevelDeleteArgs<ExtArgs>>): Prisma__AccessLevelClient<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccessLevel.
     * @param {AccessLevelUpdateArgs} args - Arguments to update one AccessLevel.
     * @example
     * // Update one AccessLevel
     * const accessLevel = await prisma.accessLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccessLevelUpdateArgs>(args: SelectSubset<T, AccessLevelUpdateArgs<ExtArgs>>): Prisma__AccessLevelClient<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccessLevels.
     * @param {AccessLevelDeleteManyArgs} args - Arguments to filter AccessLevels to delete.
     * @example
     * // Delete a few AccessLevels
     * const { count } = await prisma.accessLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccessLevelDeleteManyArgs>(args?: SelectSubset<T, AccessLevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccessLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccessLevels
     * const accessLevel = await prisma.accessLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccessLevelUpdateManyArgs>(args: SelectSubset<T, AccessLevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccessLevels and returns the data updated in the database.
     * @param {AccessLevelUpdateManyAndReturnArgs} args - Arguments to update many AccessLevels.
     * @example
     * // Update many AccessLevels
     * const accessLevel = await prisma.accessLevel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AccessLevels and only return the `id`
     * const accessLevelWithIdOnly = await prisma.accessLevel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccessLevelUpdateManyAndReturnArgs>(args: SelectSubset<T, AccessLevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AccessLevel.
     * @param {AccessLevelUpsertArgs} args - Arguments to update or create a AccessLevel.
     * @example
     * // Update or create a AccessLevel
     * const accessLevel = await prisma.accessLevel.upsert({
     *   create: {
     *     // ... data to create a AccessLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccessLevel we want to update
     *   }
     * })
     */
    upsert<T extends AccessLevelUpsertArgs>(args: SelectSubset<T, AccessLevelUpsertArgs<ExtArgs>>): Prisma__AccessLevelClient<$Result.GetResult<Prisma.$AccessLevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccessLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessLevelCountArgs} args - Arguments to filter AccessLevels to count.
     * @example
     * // Count the number of AccessLevels
     * const count = await prisma.accessLevel.count({
     *   where: {
     *     // ... the filter for the AccessLevels we want to count
     *   }
     * })
    **/
    count<T extends AccessLevelCountArgs>(
      args?: Subset<T, AccessLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccessLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccessLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccessLevelAggregateArgs>(args: Subset<T, AccessLevelAggregateArgs>): Prisma.PrismaPromise<GetAccessLevelAggregateType<T>>

    /**
     * Group by AccessLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccessLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccessLevelGroupByArgs['orderBy'] }
        : { orderBy?: AccessLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccessLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccessLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccessLevel model
   */
  readonly fields: AccessLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccessLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccessLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends AccessLevel$usersArgs<ExtArgs> = {}>(args?: Subset<T, AccessLevel$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccessLevel model
   */
  interface AccessLevelFieldRefs {
    readonly id: FieldRef<"AccessLevel", 'Int'>
    readonly level: FieldRef<"AccessLevel", 'Int'>
    readonly permissions: FieldRef<"AccessLevel", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * AccessLevel findUnique
   */
  export type AccessLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
    /**
     * Filter, which AccessLevel to fetch.
     */
    where: AccessLevelWhereUniqueInput
  }

  /**
   * AccessLevel findUniqueOrThrow
   */
  export type AccessLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
    /**
     * Filter, which AccessLevel to fetch.
     */
    where: AccessLevelWhereUniqueInput
  }

  /**
   * AccessLevel findFirst
   */
  export type AccessLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
    /**
     * Filter, which AccessLevel to fetch.
     */
    where?: AccessLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessLevels to fetch.
     */
    orderBy?: AccessLevelOrderByWithRelationInput | AccessLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccessLevels.
     */
    cursor?: AccessLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccessLevels.
     */
    distinct?: AccessLevelScalarFieldEnum | AccessLevelScalarFieldEnum[]
  }

  /**
   * AccessLevel findFirstOrThrow
   */
  export type AccessLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
    /**
     * Filter, which AccessLevel to fetch.
     */
    where?: AccessLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessLevels to fetch.
     */
    orderBy?: AccessLevelOrderByWithRelationInput | AccessLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccessLevels.
     */
    cursor?: AccessLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccessLevels.
     */
    distinct?: AccessLevelScalarFieldEnum | AccessLevelScalarFieldEnum[]
  }

  /**
   * AccessLevel findMany
   */
  export type AccessLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
    /**
     * Filter, which AccessLevels to fetch.
     */
    where?: AccessLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessLevels to fetch.
     */
    orderBy?: AccessLevelOrderByWithRelationInput | AccessLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccessLevels.
     */
    cursor?: AccessLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessLevels.
     */
    skip?: number
    distinct?: AccessLevelScalarFieldEnum | AccessLevelScalarFieldEnum[]
  }

  /**
   * AccessLevel create
   */
  export type AccessLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a AccessLevel.
     */
    data: XOR<AccessLevelCreateInput, AccessLevelUncheckedCreateInput>
  }

  /**
   * AccessLevel createMany
   */
  export type AccessLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccessLevels.
     */
    data: AccessLevelCreateManyInput | AccessLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccessLevel createManyAndReturn
   */
  export type AccessLevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * The data used to create many AccessLevels.
     */
    data: AccessLevelCreateManyInput | AccessLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccessLevel update
   */
  export type AccessLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a AccessLevel.
     */
    data: XOR<AccessLevelUpdateInput, AccessLevelUncheckedUpdateInput>
    /**
     * Choose, which AccessLevel to update.
     */
    where: AccessLevelWhereUniqueInput
  }

  /**
   * AccessLevel updateMany
   */
  export type AccessLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccessLevels.
     */
    data: XOR<AccessLevelUpdateManyMutationInput, AccessLevelUncheckedUpdateManyInput>
    /**
     * Filter which AccessLevels to update
     */
    where?: AccessLevelWhereInput
    /**
     * Limit how many AccessLevels to update.
     */
    limit?: number
  }

  /**
   * AccessLevel updateManyAndReturn
   */
  export type AccessLevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * The data used to update AccessLevels.
     */
    data: XOR<AccessLevelUpdateManyMutationInput, AccessLevelUncheckedUpdateManyInput>
    /**
     * Filter which AccessLevels to update
     */
    where?: AccessLevelWhereInput
    /**
     * Limit how many AccessLevels to update.
     */
    limit?: number
  }

  /**
   * AccessLevel upsert
   */
  export type AccessLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the AccessLevel to update in case it exists.
     */
    where: AccessLevelWhereUniqueInput
    /**
     * In case the AccessLevel found by the `where` argument doesn't exist, create a new AccessLevel with this data.
     */
    create: XOR<AccessLevelCreateInput, AccessLevelUncheckedCreateInput>
    /**
     * In case the AccessLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccessLevelUpdateInput, AccessLevelUncheckedUpdateInput>
  }

  /**
   * AccessLevel delete
   */
  export type AccessLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
    /**
     * Filter which AccessLevel to delete.
     */
    where: AccessLevelWhereUniqueInput
  }

  /**
   * AccessLevel deleteMany
   */
  export type AccessLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccessLevels to delete
     */
    where?: AccessLevelWhereInput
    /**
     * Limit how many AccessLevels to delete.
     */
    limit?: number
  }

  /**
   * AccessLevel.users
   */
  export type AccessLevel$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * AccessLevel without action
   */
  export type AccessLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessLevel
     */
    select?: AccessLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessLevel
     */
    omit?: AccessLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessLevelInclude<ExtArgs> | null
  }


  /**
   * Model Log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    sampleId: number | null
  }

  export type LogSumAggregateOutputType = {
    id: number | null
    userId: number | null
    sampleId: number | null
  }

  export type LogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    sampleId: number | null
    actionType: string | null
    description: string | null
    timestamp: Date | null
  }

  export type LogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    sampleId: number | null
    actionType: string | null
    description: string | null
    timestamp: Date | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    userId: number
    sampleId: number
    actionType: number
    description: number
    timestamp: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    id?: true
    userId?: true
    sampleId?: true
  }

  export type LogSumAggregateInputType = {
    id?: true
    userId?: true
    sampleId?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    userId?: true
    sampleId?: true
    actionType?: true
    description?: true
    timestamp?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    userId?: true
    sampleId?: true
    actionType?: true
    description?: true
    timestamp?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    userId?: true
    sampleId?: true
    actionType?: true
    description?: true
    timestamp?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: LogOrderByWithAggregationInput | LogOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: number
    userId: number
    sampleId: number | null
    actionType: string
    description: string
    timestamp: Date
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sampleId?: boolean
    actionType?: boolean
    description?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sample?: boolean | Log$sampleArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sampleId?: boolean
    actionType?: boolean
    description?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sample?: boolean | Log$sampleArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sampleId?: boolean
    actionType?: boolean
    description?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sample?: boolean | Log$sampleArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectScalar = {
    id?: boolean
    userId?: boolean
    sampleId?: boolean
    actionType?: boolean
    description?: boolean
    timestamp?: boolean
  }

  export type LogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "sampleId" | "actionType" | "description" | "timestamp", ExtArgs["result"]["log"]>
  export type LogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sample?: boolean | Log$sampleArgs<ExtArgs>
  }
  export type LogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sample?: boolean | Log$sampleArgs<ExtArgs>
  }
  export type LogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sample?: boolean | Log$sampleArgs<ExtArgs>
  }

  export type $LogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      sample: Prisma.$SamplePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      sampleId: number | null
      actionType: string
      description: string
      timestamp: Date
    }, ExtArgs["result"]["log"]>
    composites: {}
  }

  type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = $Result.GetResult<Prisma.$LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogFindUniqueArgs>(args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Log that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs>(args: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogFindFirstArgs>(args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs>(args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogFindManyArgs>(args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
     */
    create<T extends LogCreateArgs>(args: SelectSubset<T, LogCreateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Logs.
     * @param {LogCreateManyArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogCreateManyArgs>(args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Logs and returns the data saved in the database.
     * @param {LogCreateManyAndReturnArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogCreateManyAndReturnArgs>(args?: SelectSubset<T, LogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
     */
    delete<T extends LogDeleteArgs>(args: SelectSubset<T, LogDeleteArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogUpdateArgs>(args: SelectSubset<T, LogUpdateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogDeleteManyArgs>(args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogUpdateManyArgs>(args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs and returns the data updated in the database.
     * @param {LogUpdateManyAndReturnArgs} args - Arguments to update many Logs.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LogUpdateManyAndReturnArgs>(args: SelectSubset<T, LogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
     */
    upsert<T extends LogUpsertArgs>(args: SelectSubset<T, LogUpsertArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log model
   */
  readonly fields: LogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sample<T extends Log$sampleArgs<ExtArgs> = {}>(args?: Subset<T, Log$sampleArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Log model
   */
  interface LogFieldRefs {
    readonly id: FieldRef<"Log", 'Int'>
    readonly userId: FieldRef<"Log", 'Int'>
    readonly sampleId: FieldRef<"Log", 'Int'>
    readonly actionType: FieldRef<"Log", 'String'>
    readonly description: FieldRef<"Log", 'String'>
    readonly timestamp: FieldRef<"Log", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findFirst
   */
  export type LogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }

  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log createManyAndReturn
   */
  export type LogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to update.
     */
    limit?: number
  }

  /**
   * Log updateManyAndReturn
   */
  export type LogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }

  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to delete.
     */
    limit?: number
  }

  /**
   * Log.sample
   */
  export type Log$sampleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sample
     */
    omit?: SampleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    where?: SampleWhereInput
  }

  /**
   * Log without action
   */
  export type LogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
    content: string | null
    read: boolean | null
    timestamp: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
    content: string | null
    read: boolean | null
    timestamp: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    content: number
    read: number
    timestamp: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    content?: true
    read?: true
    timestamp?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    content?: true
    read?: true
    timestamp?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    content?: true
    read?: true
    timestamp?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    content: string
    read: boolean
    timestamp: Date
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    content?: boolean
    read?: boolean
    timestamp?: boolean
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    content?: boolean
    read?: boolean
    timestamp?: boolean
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    content?: boolean
    read?: boolean
    timestamp?: boolean
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    content?: boolean
    read?: boolean
    timestamp?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fromUserId" | "toUserId" | "content" | "read" | "timestamp", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
    toUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      fromUser: Prisma.$UserPayload<ExtArgs>
      toUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fromUserId: number
      toUserId: number
      content: string
      read: boolean
      timestamp: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fromUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    toUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly fromUserId: FieldRef<"Message", 'Int'>
    readonly toUserId: FieldRef<"Message", 'Int'>
    readonly content: FieldRef<"Message", 'String'>
    readonly read: FieldRef<"Message", 'Boolean'>
    readonly timestamp: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    level: 'level',
    department: 'department',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    contact: 'contact',
    billingName: 'billingName',
    billingAddress: 'billingAddress',
    billingContact: 'billingContact',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    clientId: 'clientId',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const TestScalarFieldEnum: {
    id: 'id',
    code: 'code',
    category: 'category',
    name: 'name',
    method: 'method',
    accredited: 'accredited',
    unit: 'unit',
    priceUgx: 'priceUgx',
    priceUsd: 'priceUsd',
    leadTimeDays: 'leadTimeDays',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TestScalarFieldEnum = (typeof TestScalarFieldEnum)[keyof typeof TestScalarFieldEnum]


  export const SampleScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    clientId: 'clientId',
    assignedTo: 'assignedTo',
    status: 'status',
    receivedDate: 'receivedDate',
    deliveryInfo: 'deliveryInfo',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SampleScalarFieldEnum = (typeof SampleScalarFieldEnum)[keyof typeof SampleScalarFieldEnum]


  export const SampleTestScalarFieldEnum: {
    id: 'id',
    sampleId: 'sampleId',
    testId: 'testId',
    result: 'result',
    submittedBy: 'submittedBy',
    reviewedBy: 'reviewedBy',
    approvedBy: 'approvedBy',
    submittedAt: 'submittedAt',
    reviewedAt: 'reviewedAt',
    approvedAt: 'approvedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SampleTestScalarFieldEnum = (typeof SampleTestScalarFieldEnum)[keyof typeof SampleTestScalarFieldEnum]


  export const SampleLogScalarFieldEnum: {
    id: 'id',
    sampleId: 'sampleId',
    receivedBy: 'receivedBy',
    deliveredBy: 'deliveredBy',
    deliveryContact: 'deliveryContact',
    modeOfTransmit: 'modeOfTransmit',
    createdAt: 'createdAt'
  };

  export type SampleLogScalarFieldEnum = (typeof SampleLogScalarFieldEnum)[keyof typeof SampleLogScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    sampleId: 'sampleId',
    amountUgx: 'amountUgx',
    amountUsd: 'amountUsd',
    issuedBy: 'issuedBy',
    issuedAt: 'issuedAt',
    paid: 'paid',
    paymentMethod: 'paymentMethod'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    invoiceId: 'invoiceId',
    amountUgx: 'amountUgx',
    amountUsd: 'amountUsd',
    paymentDate: 'paymentDate',
    method: 'method'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const AccessLevelScalarFieldEnum: {
    id: 'id',
    level: 'level',
    permissions: 'permissions'
  };

  export type AccessLevelScalarFieldEnum = (typeof AccessLevelScalarFieldEnum)[keyof typeof AccessLevelScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sampleId: 'sampleId',
    actionType: 'actionType',
    description: 'description',
    timestamp: 'timestamp'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    fromUserId: 'fromUserId',
    toUserId: 'toUserId',
    content: 'content',
    read: 'read',
    timestamp: 'timestamp'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    level?: IntFilter<"User"> | number
    department?: StringNullableFilter<"User"> | string | null
    status?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    samples?: SampleListRelationFilter
    logs?: LogListRelationFilter
    sentMessages?: MessageListRelationFilter
    receivedMessages?: MessageListRelationFilter
    accessLevels?: AccessLevelListRelationFilter
    submitterSampleTests?: SampleTestListRelationFilter
    reviewerSampleTests?: SampleTestListRelationFilter
    approverSampleTests?: SampleTestListRelationFilter
    sampleLogs?: SampleLogListRelationFilter
    issuedInvoices?: InvoiceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    level?: SortOrder
    department?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    samples?: SampleOrderByRelationAggregateInput
    logs?: LogOrderByRelationAggregateInput
    sentMessages?: MessageOrderByRelationAggregateInput
    receivedMessages?: MessageOrderByRelationAggregateInput
    accessLevels?: AccessLevelOrderByRelationAggregateInput
    submitterSampleTests?: SampleTestOrderByRelationAggregateInput
    reviewerSampleTests?: SampleTestOrderByRelationAggregateInput
    approverSampleTests?: SampleTestOrderByRelationAggregateInput
    sampleLogs?: SampleLogOrderByRelationAggregateInput
    issuedInvoices?: InvoiceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    level?: IntFilter<"User"> | number
    department?: StringNullableFilter<"User"> | string | null
    status?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    samples?: SampleListRelationFilter
    logs?: LogListRelationFilter
    sentMessages?: MessageListRelationFilter
    receivedMessages?: MessageListRelationFilter
    accessLevels?: AccessLevelListRelationFilter
    submitterSampleTests?: SampleTestListRelationFilter
    reviewerSampleTests?: SampleTestListRelationFilter
    approverSampleTests?: SampleTestListRelationFilter
    sampleLogs?: SampleLogListRelationFilter
    issuedInvoices?: InvoiceListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    level?: SortOrder
    department?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    level?: IntWithAggregatesFilter<"User"> | number
    department?: StringNullableWithAggregatesFilter<"User"> | string | null
    status?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: IntFilter<"Client"> | number
    name?: StringFilter<"Client"> | string
    address?: StringNullableFilter<"Client"> | string | null
    contact?: StringNullableFilter<"Client"> | string | null
    billingName?: StringNullableFilter<"Client"> | string | null
    billingAddress?: StringNullableFilter<"Client"> | string | null
    billingContact?: StringNullableFilter<"Client"> | string | null
    createdBy?: IntNullableFilter<"Client"> | number | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    samples?: SampleListRelationFilter
    projects?: ProjectListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    contact?: SortOrderInput | SortOrder
    billingName?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    billingContact?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    samples?: SampleOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    name?: StringFilter<"Client"> | string
    address?: StringNullableFilter<"Client"> | string | null
    contact?: StringNullableFilter<"Client"> | string | null
    billingName?: StringNullableFilter<"Client"> | string | null
    billingAddress?: StringNullableFilter<"Client"> | string | null
    billingContact?: StringNullableFilter<"Client"> | string | null
    createdBy?: IntNullableFilter<"Client"> | number | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    samples?: SampleListRelationFilter
    projects?: ProjectListRelationFilter
  }, "id">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    contact?: SortOrderInput | SortOrder
    billingName?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    billingContact?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _avg?: ClientAvgOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
    _sum?: ClientSumOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Client"> | number
    name?: StringWithAggregatesFilter<"Client"> | string
    address?: StringNullableWithAggregatesFilter<"Client"> | string | null
    contact?: StringNullableWithAggregatesFilter<"Client"> | string | null
    billingName?: StringNullableWithAggregatesFilter<"Client"> | string | null
    billingAddress?: StringNullableWithAggregatesFilter<"Client"> | string | null
    billingContact?: StringNullableWithAggregatesFilter<"Client"> | string | null
    createdBy?: IntNullableWithAggregatesFilter<"Client"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: IntFilter<"Project"> | number
    title?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    clientId?: IntFilter<"Project"> | number
    createdBy?: IntNullableFilter<"Project"> | number | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    samples?: SampleListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    clientId?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    samples?: SampleOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    title?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    clientId?: IntFilter<"Project"> | number
    createdBy?: IntNullableFilter<"Project"> | number | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    samples?: SampleListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    clientId?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Project"> | number
    title?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    clientId?: IntWithAggregatesFilter<"Project"> | number
    createdBy?: IntNullableWithAggregatesFilter<"Project"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type TestWhereInput = {
    AND?: TestWhereInput | TestWhereInput[]
    OR?: TestWhereInput[]
    NOT?: TestWhereInput | TestWhereInput[]
    id?: IntFilter<"Test"> | number
    code?: StringFilter<"Test"> | string
    category?: StringFilter<"Test"> | string
    name?: StringFilter<"Test"> | string
    method?: StringFilter<"Test"> | string
    accredited?: BoolFilter<"Test"> | boolean
    unit?: StringNullableFilter<"Test"> | string | null
    priceUgx?: IntNullableFilter<"Test"> | number | null
    priceUsd?: FloatNullableFilter<"Test"> | number | null
    leadTimeDays?: IntNullableFilter<"Test"> | number | null
    createdAt?: DateTimeFilter<"Test"> | Date | string
    updatedAt?: DateTimeFilter<"Test"> | Date | string
    sampleTests?: SampleTestListRelationFilter
  }

  export type TestOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    category?: SortOrder
    name?: SortOrder
    method?: SortOrder
    accredited?: SortOrder
    unit?: SortOrderInput | SortOrder
    priceUgx?: SortOrderInput | SortOrder
    priceUsd?: SortOrderInput | SortOrder
    leadTimeDays?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sampleTests?: SampleTestOrderByRelationAggregateInput
  }

  export type TestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: TestWhereInput | TestWhereInput[]
    OR?: TestWhereInput[]
    NOT?: TestWhereInput | TestWhereInput[]
    category?: StringFilter<"Test"> | string
    name?: StringFilter<"Test"> | string
    method?: StringFilter<"Test"> | string
    accredited?: BoolFilter<"Test"> | boolean
    unit?: StringNullableFilter<"Test"> | string | null
    priceUgx?: IntNullableFilter<"Test"> | number | null
    priceUsd?: FloatNullableFilter<"Test"> | number | null
    leadTimeDays?: IntNullableFilter<"Test"> | number | null
    createdAt?: DateTimeFilter<"Test"> | Date | string
    updatedAt?: DateTimeFilter<"Test"> | Date | string
    sampleTests?: SampleTestListRelationFilter
  }, "id" | "code">

  export type TestOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    category?: SortOrder
    name?: SortOrder
    method?: SortOrder
    accredited?: SortOrder
    unit?: SortOrderInput | SortOrder
    priceUgx?: SortOrderInput | SortOrder
    priceUsd?: SortOrderInput | SortOrder
    leadTimeDays?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TestCountOrderByAggregateInput
    _avg?: TestAvgOrderByAggregateInput
    _max?: TestMaxOrderByAggregateInput
    _min?: TestMinOrderByAggregateInput
    _sum?: TestSumOrderByAggregateInput
  }

  export type TestScalarWhereWithAggregatesInput = {
    AND?: TestScalarWhereWithAggregatesInput | TestScalarWhereWithAggregatesInput[]
    OR?: TestScalarWhereWithAggregatesInput[]
    NOT?: TestScalarWhereWithAggregatesInput | TestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Test"> | number
    code?: StringWithAggregatesFilter<"Test"> | string
    category?: StringWithAggregatesFilter<"Test"> | string
    name?: StringWithAggregatesFilter<"Test"> | string
    method?: StringWithAggregatesFilter<"Test"> | string
    accredited?: BoolWithAggregatesFilter<"Test"> | boolean
    unit?: StringNullableWithAggregatesFilter<"Test"> | string | null
    priceUgx?: IntNullableWithAggregatesFilter<"Test"> | number | null
    priceUsd?: FloatNullableWithAggregatesFilter<"Test"> | number | null
    leadTimeDays?: IntNullableWithAggregatesFilter<"Test"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Test"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Test"> | Date | string
  }

  export type SampleWhereInput = {
    AND?: SampleWhereInput | SampleWhereInput[]
    OR?: SampleWhereInput[]
    NOT?: SampleWhereInput | SampleWhereInput[]
    id?: IntFilter<"Sample"> | number
    projectId?: IntFilter<"Sample"> | number
    clientId?: IntFilter<"Sample"> | number
    assignedTo?: IntNullableFilter<"Sample"> | number | null
    status?: StringFilter<"Sample"> | string
    receivedDate?: DateTimeFilter<"Sample"> | Date | string
    deliveryInfo?: StringNullableFilter<"Sample"> | string | null
    notes?: StringNullableFilter<"Sample"> | string | null
    createdAt?: DateTimeFilter<"Sample"> | Date | string
    updatedAt?: DateTimeFilter<"Sample"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    assignedUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    sampleTests?: SampleTestListRelationFilter
    logs?: LogListRelationFilter
    invoices?: InvoiceListRelationFilter
    sampleLogs?: SampleLogListRelationFilter
  }

  export type SampleOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    clientId?: SortOrder
    assignedTo?: SortOrderInput | SortOrder
    status?: SortOrder
    receivedDate?: SortOrder
    deliveryInfo?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
    assignedUser?: UserOrderByWithRelationInput
    sampleTests?: SampleTestOrderByRelationAggregateInput
    logs?: LogOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
    sampleLogs?: SampleLogOrderByRelationAggregateInput
  }

  export type SampleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SampleWhereInput | SampleWhereInput[]
    OR?: SampleWhereInput[]
    NOT?: SampleWhereInput | SampleWhereInput[]
    projectId?: IntFilter<"Sample"> | number
    clientId?: IntFilter<"Sample"> | number
    assignedTo?: IntNullableFilter<"Sample"> | number | null
    status?: StringFilter<"Sample"> | string
    receivedDate?: DateTimeFilter<"Sample"> | Date | string
    deliveryInfo?: StringNullableFilter<"Sample"> | string | null
    notes?: StringNullableFilter<"Sample"> | string | null
    createdAt?: DateTimeFilter<"Sample"> | Date | string
    updatedAt?: DateTimeFilter<"Sample"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    assignedUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    sampleTests?: SampleTestListRelationFilter
    logs?: LogListRelationFilter
    invoices?: InvoiceListRelationFilter
    sampleLogs?: SampleLogListRelationFilter
  }, "id">

  export type SampleOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    clientId?: SortOrder
    assignedTo?: SortOrderInput | SortOrder
    status?: SortOrder
    receivedDate?: SortOrder
    deliveryInfo?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SampleCountOrderByAggregateInput
    _avg?: SampleAvgOrderByAggregateInput
    _max?: SampleMaxOrderByAggregateInput
    _min?: SampleMinOrderByAggregateInput
    _sum?: SampleSumOrderByAggregateInput
  }

  export type SampleScalarWhereWithAggregatesInput = {
    AND?: SampleScalarWhereWithAggregatesInput | SampleScalarWhereWithAggregatesInput[]
    OR?: SampleScalarWhereWithAggregatesInput[]
    NOT?: SampleScalarWhereWithAggregatesInput | SampleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sample"> | number
    projectId?: IntWithAggregatesFilter<"Sample"> | number
    clientId?: IntWithAggregatesFilter<"Sample"> | number
    assignedTo?: IntNullableWithAggregatesFilter<"Sample"> | number | null
    status?: StringWithAggregatesFilter<"Sample"> | string
    receivedDate?: DateTimeWithAggregatesFilter<"Sample"> | Date | string
    deliveryInfo?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Sample"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sample"> | Date | string
  }

  export type SampleTestWhereInput = {
    AND?: SampleTestWhereInput | SampleTestWhereInput[]
    OR?: SampleTestWhereInput[]
    NOT?: SampleTestWhereInput | SampleTestWhereInput[]
    id?: IntFilter<"SampleTest"> | number
    sampleId?: IntFilter<"SampleTest"> | number
    testId?: IntFilter<"SampleTest"> | number
    result?: StringNullableFilter<"SampleTest"> | string | null
    submittedBy?: IntNullableFilter<"SampleTest"> | number | null
    reviewedBy?: IntNullableFilter<"SampleTest"> | number | null
    approvedBy?: IntNullableFilter<"SampleTest"> | number | null
    submittedAt?: DateTimeNullableFilter<"SampleTest"> | Date | string | null
    reviewedAt?: DateTimeNullableFilter<"SampleTest"> | Date | string | null
    approvedAt?: DateTimeNullableFilter<"SampleTest"> | Date | string | null
    createdAt?: DateTimeFilter<"SampleTest"> | Date | string
    updatedAt?: DateTimeFilter<"SampleTest"> | Date | string
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
    test?: XOR<TestScalarRelationFilter, TestWhereInput>
    submitter?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reviewer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type SampleTestOrderByWithRelationInput = {
    id?: SortOrder
    sampleId?: SortOrder
    testId?: SortOrder
    result?: SortOrderInput | SortOrder
    submittedBy?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sample?: SampleOrderByWithRelationInput
    test?: TestOrderByWithRelationInput
    submitter?: UserOrderByWithRelationInput
    reviewer?: UserOrderByWithRelationInput
    approver?: UserOrderByWithRelationInput
  }

  export type SampleTestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SampleTestWhereInput | SampleTestWhereInput[]
    OR?: SampleTestWhereInput[]
    NOT?: SampleTestWhereInput | SampleTestWhereInput[]
    sampleId?: IntFilter<"SampleTest"> | number
    testId?: IntFilter<"SampleTest"> | number
    result?: StringNullableFilter<"SampleTest"> | string | null
    submittedBy?: IntNullableFilter<"SampleTest"> | number | null
    reviewedBy?: IntNullableFilter<"SampleTest"> | number | null
    approvedBy?: IntNullableFilter<"SampleTest"> | number | null
    submittedAt?: DateTimeNullableFilter<"SampleTest"> | Date | string | null
    reviewedAt?: DateTimeNullableFilter<"SampleTest"> | Date | string | null
    approvedAt?: DateTimeNullableFilter<"SampleTest"> | Date | string | null
    createdAt?: DateTimeFilter<"SampleTest"> | Date | string
    updatedAt?: DateTimeFilter<"SampleTest"> | Date | string
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
    test?: XOR<TestScalarRelationFilter, TestWhereInput>
    submitter?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reviewer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    approver?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type SampleTestOrderByWithAggregationInput = {
    id?: SortOrder
    sampleId?: SortOrder
    testId?: SortOrder
    result?: SortOrderInput | SortOrder
    submittedBy?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SampleTestCountOrderByAggregateInput
    _avg?: SampleTestAvgOrderByAggregateInput
    _max?: SampleTestMaxOrderByAggregateInput
    _min?: SampleTestMinOrderByAggregateInput
    _sum?: SampleTestSumOrderByAggregateInput
  }

  export type SampleTestScalarWhereWithAggregatesInput = {
    AND?: SampleTestScalarWhereWithAggregatesInput | SampleTestScalarWhereWithAggregatesInput[]
    OR?: SampleTestScalarWhereWithAggregatesInput[]
    NOT?: SampleTestScalarWhereWithAggregatesInput | SampleTestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SampleTest"> | number
    sampleId?: IntWithAggregatesFilter<"SampleTest"> | number
    testId?: IntWithAggregatesFilter<"SampleTest"> | number
    result?: StringNullableWithAggregatesFilter<"SampleTest"> | string | null
    submittedBy?: IntNullableWithAggregatesFilter<"SampleTest"> | number | null
    reviewedBy?: IntNullableWithAggregatesFilter<"SampleTest"> | number | null
    approvedBy?: IntNullableWithAggregatesFilter<"SampleTest"> | number | null
    submittedAt?: DateTimeNullableWithAggregatesFilter<"SampleTest"> | Date | string | null
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"SampleTest"> | Date | string | null
    approvedAt?: DateTimeNullableWithAggregatesFilter<"SampleTest"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SampleTest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SampleTest"> | Date | string
  }

  export type SampleLogWhereInput = {
    AND?: SampleLogWhereInput | SampleLogWhereInput[]
    OR?: SampleLogWhereInput[]
    NOT?: SampleLogWhereInput | SampleLogWhereInput[]
    id?: IntFilter<"SampleLog"> | number
    sampleId?: IntFilter<"SampleLog"> | number
    receivedBy?: IntFilter<"SampleLog"> | number
    deliveredBy?: StringNullableFilter<"SampleLog"> | string | null
    deliveryContact?: StringNullableFilter<"SampleLog"> | string | null
    modeOfTransmit?: StringFilter<"SampleLog"> | string
    createdAt?: DateTimeFilter<"SampleLog"> | Date | string
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SampleLogOrderByWithRelationInput = {
    id?: SortOrder
    sampleId?: SortOrder
    receivedBy?: SortOrder
    deliveredBy?: SortOrderInput | SortOrder
    deliveryContact?: SortOrderInput | SortOrder
    modeOfTransmit?: SortOrder
    createdAt?: SortOrder
    sample?: SampleOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type SampleLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SampleLogWhereInput | SampleLogWhereInput[]
    OR?: SampleLogWhereInput[]
    NOT?: SampleLogWhereInput | SampleLogWhereInput[]
    sampleId?: IntFilter<"SampleLog"> | number
    receivedBy?: IntFilter<"SampleLog"> | number
    deliveredBy?: StringNullableFilter<"SampleLog"> | string | null
    deliveryContact?: StringNullableFilter<"SampleLog"> | string | null
    modeOfTransmit?: StringFilter<"SampleLog"> | string
    createdAt?: DateTimeFilter<"SampleLog"> | Date | string
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SampleLogOrderByWithAggregationInput = {
    id?: SortOrder
    sampleId?: SortOrder
    receivedBy?: SortOrder
    deliveredBy?: SortOrderInput | SortOrder
    deliveryContact?: SortOrderInput | SortOrder
    modeOfTransmit?: SortOrder
    createdAt?: SortOrder
    _count?: SampleLogCountOrderByAggregateInput
    _avg?: SampleLogAvgOrderByAggregateInput
    _max?: SampleLogMaxOrderByAggregateInput
    _min?: SampleLogMinOrderByAggregateInput
    _sum?: SampleLogSumOrderByAggregateInput
  }

  export type SampleLogScalarWhereWithAggregatesInput = {
    AND?: SampleLogScalarWhereWithAggregatesInput | SampleLogScalarWhereWithAggregatesInput[]
    OR?: SampleLogScalarWhereWithAggregatesInput[]
    NOT?: SampleLogScalarWhereWithAggregatesInput | SampleLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SampleLog"> | number
    sampleId?: IntWithAggregatesFilter<"SampleLog"> | number
    receivedBy?: IntWithAggregatesFilter<"SampleLog"> | number
    deliveredBy?: StringNullableWithAggregatesFilter<"SampleLog"> | string | null
    deliveryContact?: StringNullableWithAggregatesFilter<"SampleLog"> | string | null
    modeOfTransmit?: StringWithAggregatesFilter<"SampleLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SampleLog"> | Date | string
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: IntFilter<"Invoice"> | number
    sampleId?: IntFilter<"Invoice"> | number
    amountUgx?: IntFilter<"Invoice"> | number
    amountUsd?: FloatFilter<"Invoice"> | number
    issuedBy?: IntFilter<"Invoice"> | number
    issuedAt?: DateTimeFilter<"Invoice"> | Date | string
    paid?: BoolFilter<"Invoice"> | boolean
    paymentMethod?: StringNullableFilter<"Invoice"> | string | null
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    payments?: PaymentListRelationFilter
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    sampleId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    issuedBy?: SortOrder
    issuedAt?: SortOrder
    paid?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    sample?: SampleOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    sampleId?: IntFilter<"Invoice"> | number
    amountUgx?: IntFilter<"Invoice"> | number
    amountUsd?: FloatFilter<"Invoice"> | number
    issuedBy?: IntFilter<"Invoice"> | number
    issuedAt?: DateTimeFilter<"Invoice"> | Date | string
    paid?: BoolFilter<"Invoice"> | boolean
    paymentMethod?: StringNullableFilter<"Invoice"> | string | null
    sample?: XOR<SampleScalarRelationFilter, SampleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    payments?: PaymentListRelationFilter
  }, "id">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    sampleId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    issuedBy?: SortOrder
    issuedAt?: SortOrder
    paid?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Invoice"> | number
    sampleId?: IntWithAggregatesFilter<"Invoice"> | number
    amountUgx?: IntWithAggregatesFilter<"Invoice"> | number
    amountUsd?: FloatWithAggregatesFilter<"Invoice"> | number
    issuedBy?: IntWithAggregatesFilter<"Invoice"> | number
    issuedAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    paid?: BoolWithAggregatesFilter<"Invoice"> | boolean
    paymentMethod?: StringNullableWithAggregatesFilter<"Invoice"> | string | null
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    invoiceId?: IntFilter<"Payment"> | number
    amountUgx?: IntFilter<"Payment"> | number
    amountUsd?: FloatFilter<"Payment"> | number
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    method?: StringNullableFilter<"Payment"> | string | null
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    paymentDate?: SortOrder
    method?: SortOrderInput | SortOrder
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    invoiceId?: IntFilter<"Payment"> | number
    amountUgx?: IntFilter<"Payment"> | number
    amountUsd?: FloatFilter<"Payment"> | number
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    method?: StringNullableFilter<"Payment"> | string | null
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    paymentDate?: SortOrder
    method?: SortOrderInput | SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    invoiceId?: IntWithAggregatesFilter<"Payment"> | number
    amountUgx?: IntWithAggregatesFilter<"Payment"> | number
    amountUsd?: FloatWithAggregatesFilter<"Payment"> | number
    paymentDate?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    method?: StringNullableWithAggregatesFilter<"Payment"> | string | null
  }

  export type AccessLevelWhereInput = {
    AND?: AccessLevelWhereInput | AccessLevelWhereInput[]
    OR?: AccessLevelWhereInput[]
    NOT?: AccessLevelWhereInput | AccessLevelWhereInput[]
    id?: IntFilter<"AccessLevel"> | number
    level?: IntFilter<"AccessLevel"> | number
    permissions?: StringNullableListFilter<"AccessLevel">
    users?: UserListRelationFilter
  }

  export type AccessLevelOrderByWithRelationInput = {
    id?: SortOrder
    level?: SortOrder
    permissions?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type AccessLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccessLevelWhereInput | AccessLevelWhereInput[]
    OR?: AccessLevelWhereInput[]
    NOT?: AccessLevelWhereInput | AccessLevelWhereInput[]
    level?: IntFilter<"AccessLevel"> | number
    permissions?: StringNullableListFilter<"AccessLevel">
    users?: UserListRelationFilter
  }, "id">

  export type AccessLevelOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    permissions?: SortOrder
    _count?: AccessLevelCountOrderByAggregateInput
    _avg?: AccessLevelAvgOrderByAggregateInput
    _max?: AccessLevelMaxOrderByAggregateInput
    _min?: AccessLevelMinOrderByAggregateInput
    _sum?: AccessLevelSumOrderByAggregateInput
  }

  export type AccessLevelScalarWhereWithAggregatesInput = {
    AND?: AccessLevelScalarWhereWithAggregatesInput | AccessLevelScalarWhereWithAggregatesInput[]
    OR?: AccessLevelScalarWhereWithAggregatesInput[]
    NOT?: AccessLevelScalarWhereWithAggregatesInput | AccessLevelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AccessLevel"> | number
    level?: IntWithAggregatesFilter<"AccessLevel"> | number
    permissions?: StringNullableListFilter<"AccessLevel">
  }

  export type LogWhereInput = {
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    id?: IntFilter<"Log"> | number
    userId?: IntFilter<"Log"> | number
    sampleId?: IntNullableFilter<"Log"> | number | null
    actionType?: StringFilter<"Log"> | string
    description?: StringFilter<"Log"> | string
    timestamp?: DateTimeFilter<"Log"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    sample?: XOR<SampleNullableScalarRelationFilter, SampleWhereInput> | null
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sampleId?: SortOrderInput | SortOrder
    actionType?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    sample?: SampleOrderByWithRelationInput
  }

  export type LogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    userId?: IntFilter<"Log"> | number
    sampleId?: IntNullableFilter<"Log"> | number | null
    actionType?: StringFilter<"Log"> | string
    description?: StringFilter<"Log"> | string
    timestamp?: DateTimeFilter<"Log"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    sample?: XOR<SampleNullableScalarRelationFilter, SampleWhereInput> | null
  }, "id">

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sampleId?: SortOrderInput | SortOrder
    actionType?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    OR?: LogScalarWhereWithAggregatesInput[]
    NOT?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Log"> | number
    userId?: IntWithAggregatesFilter<"Log"> | number
    sampleId?: IntNullableWithAggregatesFilter<"Log"> | number | null
    actionType?: StringWithAggregatesFilter<"Log"> | string
    description?: StringWithAggregatesFilter<"Log"> | string
    timestamp?: DateTimeWithAggregatesFilter<"Log"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    fromUserId?: IntFilter<"Message"> | number
    toUserId?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    read?: BoolFilter<"Message"> | boolean
    timestamp?: DateTimeFilter<"Message"> | Date | string
    fromUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    toUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    content?: SortOrder
    read?: SortOrder
    timestamp?: SortOrder
    fromUser?: UserOrderByWithRelationInput
    toUser?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    fromUserId?: IntFilter<"Message"> | number
    toUserId?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    read?: BoolFilter<"Message"> | boolean
    timestamp?: DateTimeFilter<"Message"> | Date | string
    fromUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    toUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    content?: SortOrder
    read?: SortOrder
    timestamp?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    fromUserId?: IntWithAggregatesFilter<"Message"> | number
    toUserId?: IntWithAggregatesFilter<"Message"> | number
    content?: StringWithAggregatesFilter<"Message"> | string
    read?: BoolWithAggregatesFilter<"Message"> | boolean
    timestamp?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutAssignedUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutAssignedUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelUncheckedCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestUncheckedCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestUncheckedCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestUncheckedCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUncheckedUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUncheckedUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUncheckedUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientCreateInput = {
    name: string
    address?: string | null
    contact?: string | null
    billingName?: string | null
    billingAddress?: string | null
    billingContact?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutClientInput
    projects?: ProjectCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: number
    name: string
    address?: string | null
    contact?: string | null
    billingName?: string | null
    billingAddress?: string | null
    billingContact?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutClientInput
    projects?: ProjectUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    billingName?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutClientNestedInput
    projects?: ProjectUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    billingName?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutClientNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: number
    name: string
    address?: string | null
    contact?: string | null
    billingName?: string | null
    billingAddress?: string | null
    billingContact?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    billingName?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    billingName?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    title: string
    description?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutProjectsInput
    samples?: SampleCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    clientId: number
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutProjectsNestedInput
    samples?: SampleUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: IntFieldUpdateOperationsInput | number
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    clientId: number
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: IntFieldUpdateOperationsInput | number
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCreateInput = {
    code: string
    category: string
    name: string
    method: string
    accredited: boolean
    unit?: string | null
    priceUgx?: number | null
    priceUsd?: number | null
    leadTimeDays?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sampleTests?: SampleTestCreateNestedManyWithoutTestInput
  }

  export type TestUncheckedCreateInput = {
    id?: number
    code: string
    category: string
    name: string
    method: string
    accredited: boolean
    unit?: string | null
    priceUgx?: number | null
    priceUsd?: number | null
    leadTimeDays?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sampleTests?: SampleTestUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    accredited?: BoolFieldUpdateOperationsInput | boolean
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUgx?: NullableIntFieldUpdateOperationsInput | number | null
    priceUsd?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTests?: SampleTestUpdateManyWithoutTestNestedInput
  }

  export type TestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    accredited?: BoolFieldUpdateOperationsInput | boolean
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUgx?: NullableIntFieldUpdateOperationsInput | number | null
    priceUsd?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTests?: SampleTestUncheckedUpdateManyWithoutTestNestedInput
  }

  export type TestCreateManyInput = {
    id?: number
    code: string
    category: string
    name: string
    method: string
    accredited: boolean
    unit?: string | null
    priceUgx?: number | null
    priceUsd?: number | null
    leadTimeDays?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    accredited?: BoolFieldUpdateOperationsInput | boolean
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUgx?: NullableIntFieldUpdateOperationsInput | number | null
    priceUsd?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    accredited?: BoolFieldUpdateOperationsInput | boolean
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUgx?: NullableIntFieldUpdateOperationsInput | number | null
    priceUsd?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleCreateInput = {
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutSamplesInput
    client: ClientCreateNestedOneWithoutSamplesInput
    assignedUser?: UserCreateNestedOneWithoutSamplesInput
    sampleTests?: SampleTestCreateNestedManyWithoutSampleInput
    logs?: LogCreateNestedManyWithoutSampleInput
    invoices?: InvoiceCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogCreateNestedManyWithoutSampleInput
  }

  export type SampleUncheckedCreateInput = {
    id?: number
    projectId: number
    clientId: number
    assignedTo?: number | null
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sampleTests?: SampleTestUncheckedCreateNestedManyWithoutSampleInput
    logs?: LogUncheckedCreateNestedManyWithoutSampleInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutSampleInput
  }

  export type SampleUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSamplesNestedInput
    client?: ClientUpdateOneRequiredWithoutSamplesNestedInput
    assignedUser?: UserUpdateOneWithoutSamplesNestedInput
    sampleTests?: SampleTestUpdateManyWithoutSampleNestedInput
    logs?: LogUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTests?: SampleTestUncheckedUpdateManyWithoutSampleNestedInput
    logs?: LogUncheckedUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutSampleNestedInput
  }

  export type SampleCreateManyInput = {
    id?: number
    projectId: number
    clientId: number
    assignedTo?: number | null
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestCreateInput = {
    result?: string | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sample: SampleCreateNestedOneWithoutSampleTestsInput
    test: TestCreateNestedOneWithoutSampleTestsInput
    submitter?: UserCreateNestedOneWithoutSubmitterSampleTestsInput
    reviewer?: UserCreateNestedOneWithoutReviewerSampleTestsInput
    approver?: UserCreateNestedOneWithoutApproverSampleTestsInput
  }

  export type SampleTestUncheckedCreateInput = {
    id?: number
    sampleId: number
    testId: number
    result?: string | null
    submittedBy?: number | null
    reviewedBy?: number | null
    approvedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleTestUpdateInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sample?: SampleUpdateOneRequiredWithoutSampleTestsNestedInput
    test?: TestUpdateOneRequiredWithoutSampleTestsNestedInput
    submitter?: UserUpdateOneWithoutSubmitterSampleTestsNestedInput
    reviewer?: UserUpdateOneWithoutReviewerSampleTestsNestedInput
    approver?: UserUpdateOneWithoutApproverSampleTestsNestedInput
  }

  export type SampleTestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestCreateManyInput = {
    id?: number
    sampleId: number
    testId: number
    result?: string | null
    submittedBy?: number | null
    reviewedBy?: number | null
    approvedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleTestUpdateManyMutationInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleLogCreateInput = {
    deliveredBy?: string | null
    deliveryContact?: string | null
    modeOfTransmit: string
    createdAt?: Date | string
    sample: SampleCreateNestedOneWithoutSampleLogsInput
    user: UserCreateNestedOneWithoutSampleLogsInput
  }

  export type SampleLogUncheckedCreateInput = {
    id?: number
    sampleId: number
    receivedBy: number
    deliveredBy?: string | null
    deliveryContact?: string | null
    modeOfTransmit: string
    createdAt?: Date | string
  }

  export type SampleLogUpdateInput = {
    deliveredBy?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryContact?: NullableStringFieldUpdateOperationsInput | string | null
    modeOfTransmit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sample?: SampleUpdateOneRequiredWithoutSampleLogsNestedInput
    user?: UserUpdateOneRequiredWithoutSampleLogsNestedInput
  }

  export type SampleLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    receivedBy?: IntFieldUpdateOperationsInput | number
    deliveredBy?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryContact?: NullableStringFieldUpdateOperationsInput | string | null
    modeOfTransmit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleLogCreateManyInput = {
    id?: number
    sampleId: number
    receivedBy: number
    deliveredBy?: string | null
    deliveryContact?: string | null
    modeOfTransmit: string
    createdAt?: Date | string
  }

  export type SampleLogUpdateManyMutationInput = {
    deliveredBy?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryContact?: NullableStringFieldUpdateOperationsInput | string | null
    modeOfTransmit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    receivedBy?: IntFieldUpdateOperationsInput | number
    deliveredBy?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryContact?: NullableStringFieldUpdateOperationsInput | string | null
    modeOfTransmit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateInput = {
    amountUgx: number
    amountUsd: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
    sample: SampleCreateNestedOneWithoutInvoicesInput
    user: UserCreateNestedOneWithoutIssuedInvoicesInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: number
    sampleId: number
    amountUgx: number
    amountUsd: number
    issuedBy: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUpdateInput = {
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    sample?: SampleUpdateOneRequiredWithoutInvoicesNestedInput
    user?: UserUpdateOneRequiredWithoutIssuedInvoicesNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedBy?: IntFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyInput = {
    id?: number
    sampleId: number
    amountUgx: number
    amountUsd: number
    issuedBy: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
  }

  export type InvoiceUpdateManyMutationInput = {
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedBy?: IntFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateInput = {
    amountUgx: number
    amountUsd: number
    paymentDate?: Date | string
    method?: string | null
    invoice: InvoiceCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    invoiceId: number
    amountUgx: number
    amountUsd: number
    paymentDate?: Date | string
    method?: string | null
  }

  export type PaymentUpdateInput = {
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
    invoice?: InvoiceUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateManyInput = {
    id?: number
    invoiceId: number
    amountUgx: number
    amountUsd: number
    paymentDate?: Date | string
    method?: string | null
  }

  export type PaymentUpdateManyMutationInput = {
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccessLevelCreateInput = {
    level: number
    permissions?: AccessLevelCreatepermissionsInput | string[]
    users?: UserCreateNestedManyWithoutAccessLevelsInput
  }

  export type AccessLevelUncheckedCreateInput = {
    id?: number
    level: number
    permissions?: AccessLevelCreatepermissionsInput | string[]
    users?: UserUncheckedCreateNestedManyWithoutAccessLevelsInput
  }

  export type AccessLevelUpdateInput = {
    level?: IntFieldUpdateOperationsInput | number
    permissions?: AccessLevelUpdatepermissionsInput | string[]
    users?: UserUpdateManyWithoutAccessLevelsNestedInput
  }

  export type AccessLevelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    permissions?: AccessLevelUpdatepermissionsInput | string[]
    users?: UserUncheckedUpdateManyWithoutAccessLevelsNestedInput
  }

  export type AccessLevelCreateManyInput = {
    id?: number
    level: number
    permissions?: AccessLevelCreatepermissionsInput | string[]
  }

  export type AccessLevelUpdateManyMutationInput = {
    level?: IntFieldUpdateOperationsInput | number
    permissions?: AccessLevelUpdatepermissionsInput | string[]
  }

  export type AccessLevelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    permissions?: AccessLevelUpdatepermissionsInput | string[]
  }

  export type LogCreateInput = {
    actionType: string
    description: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutLogsInput
    sample?: SampleCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateInput = {
    id?: number
    userId: number
    sampleId?: number | null
    actionType: string
    description: string
    timestamp?: Date | string
  }

  export type LogUpdateInput = {
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLogsNestedInput
    sample?: SampleUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    sampleId?: NullableIntFieldUpdateOperationsInput | number | null
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogCreateManyInput = {
    id?: number
    userId: number
    sampleId?: number | null
    actionType: string
    description: string
    timestamp?: Date | string
  }

  export type LogUpdateManyMutationInput = {
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    sampleId?: NullableIntFieldUpdateOperationsInput | number | null
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    content: string
    read?: boolean
    timestamp?: Date | string
    fromUser: UserCreateNestedOneWithoutSentMessagesInput
    toUser: UserCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    fromUserId: number
    toUserId: number
    content: string
    read?: boolean
    timestamp?: Date | string
  }

  export type MessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    fromUser?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    toUser?: UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: number
    fromUserId: number
    toUserId: number
    content: string
    read?: boolean
    timestamp?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SampleListRelationFilter = {
    every?: SampleWhereInput
    some?: SampleWhereInput
    none?: SampleWhereInput
  }

  export type LogListRelationFilter = {
    every?: LogWhereInput
    some?: LogWhereInput
    none?: LogWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type AccessLevelListRelationFilter = {
    every?: AccessLevelWhereInput
    some?: AccessLevelWhereInput
    none?: AccessLevelWhereInput
  }

  export type SampleTestListRelationFilter = {
    every?: SampleTestWhereInput
    some?: SampleTestWhereInput
    none?: SampleTestWhereInput
  }

  export type SampleLogListRelationFilter = {
    every?: SampleLogWhereInput
    some?: SampleLogWhereInput
    none?: SampleLogWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SampleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccessLevelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SampleTestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SampleLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    level?: SortOrder
    department?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    level?: SortOrder
    department?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    level?: SortOrder
    department?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    billingName?: SortOrder
    billingAddress?: SortOrder
    billingContact?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    billingName?: SortOrder
    billingAddress?: SortOrder
    billingContact?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    contact?: SortOrder
    billingName?: SortOrder
    billingAddress?: SortOrder
    billingContact?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientSumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ClientScalarRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    clientId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    createdBy?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    clientId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    clientId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    createdBy?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type TestCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    category?: SortOrder
    name?: SortOrder
    method?: SortOrder
    accredited?: SortOrder
    unit?: SortOrder
    priceUgx?: SortOrder
    priceUsd?: SortOrder
    leadTimeDays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestAvgOrderByAggregateInput = {
    id?: SortOrder
    priceUgx?: SortOrder
    priceUsd?: SortOrder
    leadTimeDays?: SortOrder
  }

  export type TestMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    category?: SortOrder
    name?: SortOrder
    method?: SortOrder
    accredited?: SortOrder
    unit?: SortOrder
    priceUgx?: SortOrder
    priceUsd?: SortOrder
    leadTimeDays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    category?: SortOrder
    name?: SortOrder
    method?: SortOrder
    accredited?: SortOrder
    unit?: SortOrder
    priceUgx?: SortOrder
    priceUsd?: SortOrder
    leadTimeDays?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestSumOrderByAggregateInput = {
    id?: SortOrder
    priceUgx?: SortOrder
    priceUsd?: SortOrder
    leadTimeDays?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SampleCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    clientId?: SortOrder
    assignedTo?: SortOrder
    status?: SortOrder
    receivedDate?: SortOrder
    deliveryInfo?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SampleAvgOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    clientId?: SortOrder
    assignedTo?: SortOrder
  }

  export type SampleMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    clientId?: SortOrder
    assignedTo?: SortOrder
    status?: SortOrder
    receivedDate?: SortOrder
    deliveryInfo?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SampleMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    clientId?: SortOrder
    assignedTo?: SortOrder
    status?: SortOrder
    receivedDate?: SortOrder
    deliveryInfo?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SampleSumOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    clientId?: SortOrder
    assignedTo?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SampleScalarRelationFilter = {
    is?: SampleWhereInput
    isNot?: SampleWhereInput
  }

  export type TestScalarRelationFilter = {
    is?: TestWhereInput
    isNot?: TestWhereInput
  }

  export type SampleTestCountOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    testId?: SortOrder
    result?: SortOrder
    submittedBy?: SortOrder
    reviewedBy?: SortOrder
    approvedBy?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SampleTestAvgOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    testId?: SortOrder
    submittedBy?: SortOrder
    reviewedBy?: SortOrder
    approvedBy?: SortOrder
  }

  export type SampleTestMaxOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    testId?: SortOrder
    result?: SortOrder
    submittedBy?: SortOrder
    reviewedBy?: SortOrder
    approvedBy?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SampleTestMinOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    testId?: SortOrder
    result?: SortOrder
    submittedBy?: SortOrder
    reviewedBy?: SortOrder
    approvedBy?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SampleTestSumOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    testId?: SortOrder
    submittedBy?: SortOrder
    reviewedBy?: SortOrder
    approvedBy?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SampleLogCountOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    receivedBy?: SortOrder
    deliveredBy?: SortOrder
    deliveryContact?: SortOrder
    modeOfTransmit?: SortOrder
    createdAt?: SortOrder
  }

  export type SampleLogAvgOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    receivedBy?: SortOrder
  }

  export type SampleLogMaxOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    receivedBy?: SortOrder
    deliveredBy?: SortOrder
    deliveryContact?: SortOrder
    modeOfTransmit?: SortOrder
    createdAt?: SortOrder
  }

  export type SampleLogMinOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    receivedBy?: SortOrder
    deliveredBy?: SortOrder
    deliveryContact?: SortOrder
    modeOfTransmit?: SortOrder
    createdAt?: SortOrder
  }

  export type SampleLogSumOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    receivedBy?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    issuedBy?: SortOrder
    issuedAt?: SortOrder
    paid?: SortOrder
    paymentMethod?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    issuedBy?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    issuedBy?: SortOrder
    issuedAt?: SortOrder
    paid?: SortOrder
    paymentMethod?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    issuedBy?: SortOrder
    issuedAt?: SortOrder
    paid?: SortOrder
    paymentMethod?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    issuedBy?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type InvoiceScalarRelationFilter = {
    is?: InvoiceWhereInput
    isNot?: InvoiceWhereInput
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    paymentDate?: SortOrder
    method?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    paymentDate?: SortOrder
    method?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
    paymentDate?: SortOrder
    method?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amountUgx?: SortOrder
    amountUsd?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccessLevelCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    permissions?: SortOrder
  }

  export type AccessLevelAvgOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type AccessLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type AccessLevelMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type AccessLevelSumOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type SampleNullableScalarRelationFilter = {
    is?: SampleWhereInput | null
    isNot?: SampleWhereInput | null
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sampleId?: SortOrder
    actionType?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sampleId?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sampleId?: SortOrder
    actionType?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sampleId?: SortOrder
    actionType?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sampleId?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    content?: SortOrder
    read?: SortOrder
    timestamp?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    content?: SortOrder
    read?: SortOrder
    timestamp?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    content?: SortOrder
    read?: SortOrder
    timestamp?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
  }

  export type SampleCreateNestedManyWithoutAssignedUserInput = {
    create?: XOR<SampleCreateWithoutAssignedUserInput, SampleUncheckedCreateWithoutAssignedUserInput> | SampleCreateWithoutAssignedUserInput[] | SampleUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutAssignedUserInput | SampleCreateOrConnectWithoutAssignedUserInput[]
    createMany?: SampleCreateManyAssignedUserInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type LogCreateNestedManyWithoutUserInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutFromUserInput = {
    create?: XOR<MessageCreateWithoutFromUserInput, MessageUncheckedCreateWithoutFromUserInput> | MessageCreateWithoutFromUserInput[] | MessageUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutFromUserInput | MessageCreateOrConnectWithoutFromUserInput[]
    createMany?: MessageCreateManyFromUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutToUserInput = {
    create?: XOR<MessageCreateWithoutToUserInput, MessageUncheckedCreateWithoutToUserInput> | MessageCreateWithoutToUserInput[] | MessageUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutToUserInput | MessageCreateOrConnectWithoutToUserInput[]
    createMany?: MessageCreateManyToUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type AccessLevelCreateNestedManyWithoutUsersInput = {
    create?: XOR<AccessLevelCreateWithoutUsersInput, AccessLevelUncheckedCreateWithoutUsersInput> | AccessLevelCreateWithoutUsersInput[] | AccessLevelUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AccessLevelCreateOrConnectWithoutUsersInput | AccessLevelCreateOrConnectWithoutUsersInput[]
    connect?: AccessLevelWhereUniqueInput | AccessLevelWhereUniqueInput[]
  }

  export type SampleTestCreateNestedManyWithoutSubmitterInput = {
    create?: XOR<SampleTestCreateWithoutSubmitterInput, SampleTestUncheckedCreateWithoutSubmitterInput> | SampleTestCreateWithoutSubmitterInput[] | SampleTestUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutSubmitterInput | SampleTestCreateOrConnectWithoutSubmitterInput[]
    createMany?: SampleTestCreateManySubmitterInputEnvelope
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
  }

  export type SampleTestCreateNestedManyWithoutReviewerInput = {
    create?: XOR<SampleTestCreateWithoutReviewerInput, SampleTestUncheckedCreateWithoutReviewerInput> | SampleTestCreateWithoutReviewerInput[] | SampleTestUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutReviewerInput | SampleTestCreateOrConnectWithoutReviewerInput[]
    createMany?: SampleTestCreateManyReviewerInputEnvelope
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
  }

  export type SampleTestCreateNestedManyWithoutApproverInput = {
    create?: XOR<SampleTestCreateWithoutApproverInput, SampleTestUncheckedCreateWithoutApproverInput> | SampleTestCreateWithoutApproverInput[] | SampleTestUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutApproverInput | SampleTestCreateOrConnectWithoutApproverInput[]
    createMany?: SampleTestCreateManyApproverInputEnvelope
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
  }

  export type SampleLogCreateNestedManyWithoutUserInput = {
    create?: XOR<SampleLogCreateWithoutUserInput, SampleLogUncheckedCreateWithoutUserInput> | SampleLogCreateWithoutUserInput[] | SampleLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SampleLogCreateOrConnectWithoutUserInput | SampleLogCreateOrConnectWithoutUserInput[]
    createMany?: SampleLogCreateManyUserInputEnvelope
    connect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutUserInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type SampleUncheckedCreateNestedManyWithoutAssignedUserInput = {
    create?: XOR<SampleCreateWithoutAssignedUserInput, SampleUncheckedCreateWithoutAssignedUserInput> | SampleCreateWithoutAssignedUserInput[] | SampleUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutAssignedUserInput | SampleCreateOrConnectWithoutAssignedUserInput[]
    createMany?: SampleCreateManyAssignedUserInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutFromUserInput = {
    create?: XOR<MessageCreateWithoutFromUserInput, MessageUncheckedCreateWithoutFromUserInput> | MessageCreateWithoutFromUserInput[] | MessageUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutFromUserInput | MessageCreateOrConnectWithoutFromUserInput[]
    createMany?: MessageCreateManyFromUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutToUserInput = {
    create?: XOR<MessageCreateWithoutToUserInput, MessageUncheckedCreateWithoutToUserInput> | MessageCreateWithoutToUserInput[] | MessageUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutToUserInput | MessageCreateOrConnectWithoutToUserInput[]
    createMany?: MessageCreateManyToUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type AccessLevelUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<AccessLevelCreateWithoutUsersInput, AccessLevelUncheckedCreateWithoutUsersInput> | AccessLevelCreateWithoutUsersInput[] | AccessLevelUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AccessLevelCreateOrConnectWithoutUsersInput | AccessLevelCreateOrConnectWithoutUsersInput[]
    connect?: AccessLevelWhereUniqueInput | AccessLevelWhereUniqueInput[]
  }

  export type SampleTestUncheckedCreateNestedManyWithoutSubmitterInput = {
    create?: XOR<SampleTestCreateWithoutSubmitterInput, SampleTestUncheckedCreateWithoutSubmitterInput> | SampleTestCreateWithoutSubmitterInput[] | SampleTestUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutSubmitterInput | SampleTestCreateOrConnectWithoutSubmitterInput[]
    createMany?: SampleTestCreateManySubmitterInputEnvelope
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
  }

  export type SampleTestUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<SampleTestCreateWithoutReviewerInput, SampleTestUncheckedCreateWithoutReviewerInput> | SampleTestCreateWithoutReviewerInput[] | SampleTestUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutReviewerInput | SampleTestCreateOrConnectWithoutReviewerInput[]
    createMany?: SampleTestCreateManyReviewerInputEnvelope
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
  }

  export type SampleTestUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<SampleTestCreateWithoutApproverInput, SampleTestUncheckedCreateWithoutApproverInput> | SampleTestCreateWithoutApproverInput[] | SampleTestUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutApproverInput | SampleTestCreateOrConnectWithoutApproverInput[]
    createMany?: SampleTestCreateManyApproverInputEnvelope
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
  }

  export type SampleLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SampleLogCreateWithoutUserInput, SampleLogUncheckedCreateWithoutUserInput> | SampleLogCreateWithoutUserInput[] | SampleLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SampleLogCreateOrConnectWithoutUserInput | SampleLogCreateOrConnectWithoutUserInput[]
    createMany?: SampleLogCreateManyUserInputEnvelope
    connect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SampleUpdateManyWithoutAssignedUserNestedInput = {
    create?: XOR<SampleCreateWithoutAssignedUserInput, SampleUncheckedCreateWithoutAssignedUserInput> | SampleCreateWithoutAssignedUserInput[] | SampleUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutAssignedUserInput | SampleCreateOrConnectWithoutAssignedUserInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutAssignedUserInput | SampleUpsertWithWhereUniqueWithoutAssignedUserInput[]
    createMany?: SampleCreateManyAssignedUserInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutAssignedUserInput | SampleUpdateWithWhereUniqueWithoutAssignedUserInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutAssignedUserInput | SampleUpdateManyWithWhereWithoutAssignedUserInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type LogUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutUserInput | LogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutUserInput | LogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogUpdateManyWithWhereWithoutUserInput | LogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<MessageCreateWithoutFromUserInput, MessageUncheckedCreateWithoutFromUserInput> | MessageCreateWithoutFromUserInput[] | MessageUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutFromUserInput | MessageCreateOrConnectWithoutFromUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutFromUserInput | MessageUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: MessageCreateManyFromUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutFromUserInput | MessageUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutFromUserInput | MessageUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutToUserNestedInput = {
    create?: XOR<MessageCreateWithoutToUserInput, MessageUncheckedCreateWithoutToUserInput> | MessageCreateWithoutToUserInput[] | MessageUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutToUserInput | MessageCreateOrConnectWithoutToUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutToUserInput | MessageUpsertWithWhereUniqueWithoutToUserInput[]
    createMany?: MessageCreateManyToUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutToUserInput | MessageUpdateWithWhereUniqueWithoutToUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutToUserInput | MessageUpdateManyWithWhereWithoutToUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type AccessLevelUpdateManyWithoutUsersNestedInput = {
    create?: XOR<AccessLevelCreateWithoutUsersInput, AccessLevelUncheckedCreateWithoutUsersInput> | AccessLevelCreateWithoutUsersInput[] | AccessLevelUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AccessLevelCreateOrConnectWithoutUsersInput | AccessLevelCreateOrConnectWithoutUsersInput[]
    upsert?: AccessLevelUpsertWithWhereUniqueWithoutUsersInput | AccessLevelUpsertWithWhereUniqueWithoutUsersInput[]
    set?: AccessLevelWhereUniqueInput | AccessLevelWhereUniqueInput[]
    disconnect?: AccessLevelWhereUniqueInput | AccessLevelWhereUniqueInput[]
    delete?: AccessLevelWhereUniqueInput | AccessLevelWhereUniqueInput[]
    connect?: AccessLevelWhereUniqueInput | AccessLevelWhereUniqueInput[]
    update?: AccessLevelUpdateWithWhereUniqueWithoutUsersInput | AccessLevelUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: AccessLevelUpdateManyWithWhereWithoutUsersInput | AccessLevelUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: AccessLevelScalarWhereInput | AccessLevelScalarWhereInput[]
  }

  export type SampleTestUpdateManyWithoutSubmitterNestedInput = {
    create?: XOR<SampleTestCreateWithoutSubmitterInput, SampleTestUncheckedCreateWithoutSubmitterInput> | SampleTestCreateWithoutSubmitterInput[] | SampleTestUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutSubmitterInput | SampleTestCreateOrConnectWithoutSubmitterInput[]
    upsert?: SampleTestUpsertWithWhereUniqueWithoutSubmitterInput | SampleTestUpsertWithWhereUniqueWithoutSubmitterInput[]
    createMany?: SampleTestCreateManySubmitterInputEnvelope
    set?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    disconnect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    delete?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    update?: SampleTestUpdateWithWhereUniqueWithoutSubmitterInput | SampleTestUpdateWithWhereUniqueWithoutSubmitterInput[]
    updateMany?: SampleTestUpdateManyWithWhereWithoutSubmitterInput | SampleTestUpdateManyWithWhereWithoutSubmitterInput[]
    deleteMany?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
  }

  export type SampleTestUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<SampleTestCreateWithoutReviewerInput, SampleTestUncheckedCreateWithoutReviewerInput> | SampleTestCreateWithoutReviewerInput[] | SampleTestUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutReviewerInput | SampleTestCreateOrConnectWithoutReviewerInput[]
    upsert?: SampleTestUpsertWithWhereUniqueWithoutReviewerInput | SampleTestUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: SampleTestCreateManyReviewerInputEnvelope
    set?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    disconnect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    delete?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    update?: SampleTestUpdateWithWhereUniqueWithoutReviewerInput | SampleTestUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: SampleTestUpdateManyWithWhereWithoutReviewerInput | SampleTestUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
  }

  export type SampleTestUpdateManyWithoutApproverNestedInput = {
    create?: XOR<SampleTestCreateWithoutApproverInput, SampleTestUncheckedCreateWithoutApproverInput> | SampleTestCreateWithoutApproverInput[] | SampleTestUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutApproverInput | SampleTestCreateOrConnectWithoutApproverInput[]
    upsert?: SampleTestUpsertWithWhereUniqueWithoutApproverInput | SampleTestUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: SampleTestCreateManyApproverInputEnvelope
    set?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    disconnect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    delete?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    update?: SampleTestUpdateWithWhereUniqueWithoutApproverInput | SampleTestUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: SampleTestUpdateManyWithWhereWithoutApproverInput | SampleTestUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
  }

  export type SampleLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<SampleLogCreateWithoutUserInput, SampleLogUncheckedCreateWithoutUserInput> | SampleLogCreateWithoutUserInput[] | SampleLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SampleLogCreateOrConnectWithoutUserInput | SampleLogCreateOrConnectWithoutUserInput[]
    upsert?: SampleLogUpsertWithWhereUniqueWithoutUserInput | SampleLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SampleLogCreateManyUserInputEnvelope
    set?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    disconnect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    delete?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    connect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    update?: SampleLogUpdateWithWhereUniqueWithoutUserInput | SampleLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SampleLogUpdateManyWithWhereWithoutUserInput | SampleLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SampleLogScalarWhereInput | SampleLogScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutUserInput | InvoiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutUserInput | InvoiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutUserInput | InvoiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type SampleUncheckedUpdateManyWithoutAssignedUserNestedInput = {
    create?: XOR<SampleCreateWithoutAssignedUserInput, SampleUncheckedCreateWithoutAssignedUserInput> | SampleCreateWithoutAssignedUserInput[] | SampleUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutAssignedUserInput | SampleCreateOrConnectWithoutAssignedUserInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutAssignedUserInput | SampleUpsertWithWhereUniqueWithoutAssignedUserInput[]
    createMany?: SampleCreateManyAssignedUserInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutAssignedUserInput | SampleUpdateWithWhereUniqueWithoutAssignedUserInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutAssignedUserInput | SampleUpdateManyWithWhereWithoutAssignedUserInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutUserInput | LogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutUserInput | LogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogUpdateManyWithWhereWithoutUserInput | LogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<MessageCreateWithoutFromUserInput, MessageUncheckedCreateWithoutFromUserInput> | MessageCreateWithoutFromUserInput[] | MessageUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutFromUserInput | MessageCreateOrConnectWithoutFromUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutFromUserInput | MessageUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: MessageCreateManyFromUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutFromUserInput | MessageUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutFromUserInput | MessageUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutToUserNestedInput = {
    create?: XOR<MessageCreateWithoutToUserInput, MessageUncheckedCreateWithoutToUserInput> | MessageCreateWithoutToUserInput[] | MessageUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutToUserInput | MessageCreateOrConnectWithoutToUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutToUserInput | MessageUpsertWithWhereUniqueWithoutToUserInput[]
    createMany?: MessageCreateManyToUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutToUserInput | MessageUpdateWithWhereUniqueWithoutToUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutToUserInput | MessageUpdateManyWithWhereWithoutToUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type AccessLevelUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<AccessLevelCreateWithoutUsersInput, AccessLevelUncheckedCreateWithoutUsersInput> | AccessLevelCreateWithoutUsersInput[] | AccessLevelUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AccessLevelCreateOrConnectWithoutUsersInput | AccessLevelCreateOrConnectWithoutUsersInput[]
    upsert?: AccessLevelUpsertWithWhereUniqueWithoutUsersInput | AccessLevelUpsertWithWhereUniqueWithoutUsersInput[]
    set?: AccessLevelWhereUniqueInput | AccessLevelWhereUniqueInput[]
    disconnect?: AccessLevelWhereUniqueInput | AccessLevelWhereUniqueInput[]
    delete?: AccessLevelWhereUniqueInput | AccessLevelWhereUniqueInput[]
    connect?: AccessLevelWhereUniqueInput | AccessLevelWhereUniqueInput[]
    update?: AccessLevelUpdateWithWhereUniqueWithoutUsersInput | AccessLevelUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: AccessLevelUpdateManyWithWhereWithoutUsersInput | AccessLevelUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: AccessLevelScalarWhereInput | AccessLevelScalarWhereInput[]
  }

  export type SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput = {
    create?: XOR<SampleTestCreateWithoutSubmitterInput, SampleTestUncheckedCreateWithoutSubmitterInput> | SampleTestCreateWithoutSubmitterInput[] | SampleTestUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutSubmitterInput | SampleTestCreateOrConnectWithoutSubmitterInput[]
    upsert?: SampleTestUpsertWithWhereUniqueWithoutSubmitterInput | SampleTestUpsertWithWhereUniqueWithoutSubmitterInput[]
    createMany?: SampleTestCreateManySubmitterInputEnvelope
    set?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    disconnect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    delete?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    update?: SampleTestUpdateWithWhereUniqueWithoutSubmitterInput | SampleTestUpdateWithWhereUniqueWithoutSubmitterInput[]
    updateMany?: SampleTestUpdateManyWithWhereWithoutSubmitterInput | SampleTestUpdateManyWithWhereWithoutSubmitterInput[]
    deleteMany?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
  }

  export type SampleTestUncheckedUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<SampleTestCreateWithoutReviewerInput, SampleTestUncheckedCreateWithoutReviewerInput> | SampleTestCreateWithoutReviewerInput[] | SampleTestUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutReviewerInput | SampleTestCreateOrConnectWithoutReviewerInput[]
    upsert?: SampleTestUpsertWithWhereUniqueWithoutReviewerInput | SampleTestUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: SampleTestCreateManyReviewerInputEnvelope
    set?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    disconnect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    delete?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    update?: SampleTestUpdateWithWhereUniqueWithoutReviewerInput | SampleTestUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: SampleTestUpdateManyWithWhereWithoutReviewerInput | SampleTestUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
  }

  export type SampleTestUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<SampleTestCreateWithoutApproverInput, SampleTestUncheckedCreateWithoutApproverInput> | SampleTestCreateWithoutApproverInput[] | SampleTestUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutApproverInput | SampleTestCreateOrConnectWithoutApproverInput[]
    upsert?: SampleTestUpsertWithWhereUniqueWithoutApproverInput | SampleTestUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: SampleTestCreateManyApproverInputEnvelope
    set?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    disconnect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    delete?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    update?: SampleTestUpdateWithWhereUniqueWithoutApproverInput | SampleTestUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: SampleTestUpdateManyWithWhereWithoutApproverInput | SampleTestUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
  }

  export type SampleLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SampleLogCreateWithoutUserInput, SampleLogUncheckedCreateWithoutUserInput> | SampleLogCreateWithoutUserInput[] | SampleLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SampleLogCreateOrConnectWithoutUserInput | SampleLogCreateOrConnectWithoutUserInput[]
    upsert?: SampleLogUpsertWithWhereUniqueWithoutUserInput | SampleLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SampleLogCreateManyUserInputEnvelope
    set?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    disconnect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    delete?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    connect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    update?: SampleLogUpdateWithWhereUniqueWithoutUserInput | SampleLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SampleLogUpdateManyWithWhereWithoutUserInput | SampleLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SampleLogScalarWhereInput | SampleLogScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutUserInput | InvoiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutUserInput | InvoiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutUserInput | InvoiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type SampleCreateNestedManyWithoutClientInput = {
    create?: XOR<SampleCreateWithoutClientInput, SampleUncheckedCreateWithoutClientInput> | SampleCreateWithoutClientInput[] | SampleUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutClientInput | SampleCreateOrConnectWithoutClientInput[]
    createMany?: SampleCreateManyClientInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutClientInput = {
    create?: XOR<ProjectCreateWithoutClientInput, ProjectUncheckedCreateWithoutClientInput> | ProjectCreateWithoutClientInput[] | ProjectUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientInput | ProjectCreateOrConnectWithoutClientInput[]
    createMany?: ProjectCreateManyClientInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type SampleUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<SampleCreateWithoutClientInput, SampleUncheckedCreateWithoutClientInput> | SampleCreateWithoutClientInput[] | SampleUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutClientInput | SampleCreateOrConnectWithoutClientInput[]
    createMany?: SampleCreateManyClientInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ProjectCreateWithoutClientInput, ProjectUncheckedCreateWithoutClientInput> | ProjectCreateWithoutClientInput[] | ProjectUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientInput | ProjectCreateOrConnectWithoutClientInput[]
    createMany?: ProjectCreateManyClientInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SampleUpdateManyWithoutClientNestedInput = {
    create?: XOR<SampleCreateWithoutClientInput, SampleUncheckedCreateWithoutClientInput> | SampleCreateWithoutClientInput[] | SampleUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutClientInput | SampleCreateOrConnectWithoutClientInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutClientInput | SampleUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: SampleCreateManyClientInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutClientInput | SampleUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutClientInput | SampleUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutClientNestedInput = {
    create?: XOR<ProjectCreateWithoutClientInput, ProjectUncheckedCreateWithoutClientInput> | ProjectCreateWithoutClientInput[] | ProjectUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientInput | ProjectCreateOrConnectWithoutClientInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutClientInput | ProjectUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ProjectCreateManyClientInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutClientInput | ProjectUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutClientInput | ProjectUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type SampleUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<SampleCreateWithoutClientInput, SampleUncheckedCreateWithoutClientInput> | SampleCreateWithoutClientInput[] | SampleUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutClientInput | SampleCreateOrConnectWithoutClientInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutClientInput | SampleUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: SampleCreateManyClientInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutClientInput | SampleUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutClientInput | SampleUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ProjectCreateWithoutClientInput, ProjectUncheckedCreateWithoutClientInput> | ProjectCreateWithoutClientInput[] | ProjectUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutClientInput | ProjectCreateOrConnectWithoutClientInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutClientInput | ProjectUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ProjectCreateManyClientInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutClientInput | ProjectUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutClientInput | ProjectUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutProjectsInput = {
    create?: XOR<ClientCreateWithoutProjectsInput, ClientUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutProjectsInput
    connect?: ClientWhereUniqueInput
  }

  export type SampleCreateNestedManyWithoutProjectInput = {
    create?: XOR<SampleCreateWithoutProjectInput, SampleUncheckedCreateWithoutProjectInput> | SampleCreateWithoutProjectInput[] | SampleUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutProjectInput | SampleCreateOrConnectWithoutProjectInput[]
    createMany?: SampleCreateManyProjectInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type SampleUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<SampleCreateWithoutProjectInput, SampleUncheckedCreateWithoutProjectInput> | SampleCreateWithoutProjectInput[] | SampleUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutProjectInput | SampleCreateOrConnectWithoutProjectInput[]
    createMany?: SampleCreateManyProjectInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type ClientUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<ClientCreateWithoutProjectsInput, ClientUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutProjectsInput
    upsert?: ClientUpsertWithoutProjectsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutProjectsInput, ClientUpdateWithoutProjectsInput>, ClientUncheckedUpdateWithoutProjectsInput>
  }

  export type SampleUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SampleCreateWithoutProjectInput, SampleUncheckedCreateWithoutProjectInput> | SampleCreateWithoutProjectInput[] | SampleUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutProjectInput | SampleCreateOrConnectWithoutProjectInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutProjectInput | SampleUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SampleCreateManyProjectInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutProjectInput | SampleUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutProjectInput | SampleUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type SampleUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SampleCreateWithoutProjectInput, SampleUncheckedCreateWithoutProjectInput> | SampleCreateWithoutProjectInput[] | SampleUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutProjectInput | SampleCreateOrConnectWithoutProjectInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutProjectInput | SampleUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SampleCreateManyProjectInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutProjectInput | SampleUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutProjectInput | SampleUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type SampleTestCreateNestedManyWithoutTestInput = {
    create?: XOR<SampleTestCreateWithoutTestInput, SampleTestUncheckedCreateWithoutTestInput> | SampleTestCreateWithoutTestInput[] | SampleTestUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutTestInput | SampleTestCreateOrConnectWithoutTestInput[]
    createMany?: SampleTestCreateManyTestInputEnvelope
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
  }

  export type SampleTestUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<SampleTestCreateWithoutTestInput, SampleTestUncheckedCreateWithoutTestInput> | SampleTestCreateWithoutTestInput[] | SampleTestUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutTestInput | SampleTestCreateOrConnectWithoutTestInput[]
    createMany?: SampleTestCreateManyTestInputEnvelope
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SampleTestUpdateManyWithoutTestNestedInput = {
    create?: XOR<SampleTestCreateWithoutTestInput, SampleTestUncheckedCreateWithoutTestInput> | SampleTestCreateWithoutTestInput[] | SampleTestUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutTestInput | SampleTestCreateOrConnectWithoutTestInput[]
    upsert?: SampleTestUpsertWithWhereUniqueWithoutTestInput | SampleTestUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: SampleTestCreateManyTestInputEnvelope
    set?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    disconnect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    delete?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    update?: SampleTestUpdateWithWhereUniqueWithoutTestInput | SampleTestUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: SampleTestUpdateManyWithWhereWithoutTestInput | SampleTestUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
  }

  export type SampleTestUncheckedUpdateManyWithoutTestNestedInput = {
    create?: XOR<SampleTestCreateWithoutTestInput, SampleTestUncheckedCreateWithoutTestInput> | SampleTestCreateWithoutTestInput[] | SampleTestUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutTestInput | SampleTestCreateOrConnectWithoutTestInput[]
    upsert?: SampleTestUpsertWithWhereUniqueWithoutTestInput | SampleTestUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: SampleTestCreateManyTestInputEnvelope
    set?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    disconnect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    delete?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    update?: SampleTestUpdateWithWhereUniqueWithoutTestInput | SampleTestUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: SampleTestUpdateManyWithWhereWithoutTestInput | SampleTestUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutSamplesInput = {
    create?: XOR<ProjectCreateWithoutSamplesInput, ProjectUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSamplesInput
    connect?: ProjectWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutSamplesInput = {
    create?: XOR<ClientCreateWithoutSamplesInput, ClientUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSamplesInput
    connect?: ClientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSamplesInput = {
    create?: XOR<UserCreateWithoutSamplesInput, UserUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSamplesInput
    connect?: UserWhereUniqueInput
  }

  export type SampleTestCreateNestedManyWithoutSampleInput = {
    create?: XOR<SampleTestCreateWithoutSampleInput, SampleTestUncheckedCreateWithoutSampleInput> | SampleTestCreateWithoutSampleInput[] | SampleTestUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutSampleInput | SampleTestCreateOrConnectWithoutSampleInput[]
    createMany?: SampleTestCreateManySampleInputEnvelope
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
  }

  export type LogCreateNestedManyWithoutSampleInput = {
    create?: XOR<LogCreateWithoutSampleInput, LogUncheckedCreateWithoutSampleInput> | LogCreateWithoutSampleInput[] | LogUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: LogCreateOrConnectWithoutSampleInput | LogCreateOrConnectWithoutSampleInput[]
    createMany?: LogCreateManySampleInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutSampleInput = {
    create?: XOR<InvoiceCreateWithoutSampleInput, InvoiceUncheckedCreateWithoutSampleInput> | InvoiceCreateWithoutSampleInput[] | InvoiceUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutSampleInput | InvoiceCreateOrConnectWithoutSampleInput[]
    createMany?: InvoiceCreateManySampleInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type SampleLogCreateNestedManyWithoutSampleInput = {
    create?: XOR<SampleLogCreateWithoutSampleInput, SampleLogUncheckedCreateWithoutSampleInput> | SampleLogCreateWithoutSampleInput[] | SampleLogUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleLogCreateOrConnectWithoutSampleInput | SampleLogCreateOrConnectWithoutSampleInput[]
    createMany?: SampleLogCreateManySampleInputEnvelope
    connect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
  }

  export type SampleTestUncheckedCreateNestedManyWithoutSampleInput = {
    create?: XOR<SampleTestCreateWithoutSampleInput, SampleTestUncheckedCreateWithoutSampleInput> | SampleTestCreateWithoutSampleInput[] | SampleTestUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutSampleInput | SampleTestCreateOrConnectWithoutSampleInput[]
    createMany?: SampleTestCreateManySampleInputEnvelope
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutSampleInput = {
    create?: XOR<LogCreateWithoutSampleInput, LogUncheckedCreateWithoutSampleInput> | LogCreateWithoutSampleInput[] | LogUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: LogCreateOrConnectWithoutSampleInput | LogCreateOrConnectWithoutSampleInput[]
    createMany?: LogCreateManySampleInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutSampleInput = {
    create?: XOR<InvoiceCreateWithoutSampleInput, InvoiceUncheckedCreateWithoutSampleInput> | InvoiceCreateWithoutSampleInput[] | InvoiceUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutSampleInput | InvoiceCreateOrConnectWithoutSampleInput[]
    createMany?: InvoiceCreateManySampleInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type SampleLogUncheckedCreateNestedManyWithoutSampleInput = {
    create?: XOR<SampleLogCreateWithoutSampleInput, SampleLogUncheckedCreateWithoutSampleInput> | SampleLogCreateWithoutSampleInput[] | SampleLogUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleLogCreateOrConnectWithoutSampleInput | SampleLogCreateOrConnectWithoutSampleInput[]
    createMany?: SampleLogCreateManySampleInputEnvelope
    connect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutSamplesNestedInput = {
    create?: XOR<ProjectCreateWithoutSamplesInput, ProjectUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSamplesInput
    upsert?: ProjectUpsertWithoutSamplesInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutSamplesInput, ProjectUpdateWithoutSamplesInput>, ProjectUncheckedUpdateWithoutSamplesInput>
  }

  export type ClientUpdateOneRequiredWithoutSamplesNestedInput = {
    create?: XOR<ClientCreateWithoutSamplesInput, ClientUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSamplesInput
    upsert?: ClientUpsertWithoutSamplesInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutSamplesInput, ClientUpdateWithoutSamplesInput>, ClientUncheckedUpdateWithoutSamplesInput>
  }

  export type UserUpdateOneWithoutSamplesNestedInput = {
    create?: XOR<UserCreateWithoutSamplesInput, UserUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSamplesInput
    upsert?: UserUpsertWithoutSamplesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSamplesInput, UserUpdateWithoutSamplesInput>, UserUncheckedUpdateWithoutSamplesInput>
  }

  export type SampleTestUpdateManyWithoutSampleNestedInput = {
    create?: XOR<SampleTestCreateWithoutSampleInput, SampleTestUncheckedCreateWithoutSampleInput> | SampleTestCreateWithoutSampleInput[] | SampleTestUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutSampleInput | SampleTestCreateOrConnectWithoutSampleInput[]
    upsert?: SampleTestUpsertWithWhereUniqueWithoutSampleInput | SampleTestUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: SampleTestCreateManySampleInputEnvelope
    set?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    disconnect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    delete?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    update?: SampleTestUpdateWithWhereUniqueWithoutSampleInput | SampleTestUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: SampleTestUpdateManyWithWhereWithoutSampleInput | SampleTestUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
  }

  export type LogUpdateManyWithoutSampleNestedInput = {
    create?: XOR<LogCreateWithoutSampleInput, LogUncheckedCreateWithoutSampleInput> | LogCreateWithoutSampleInput[] | LogUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: LogCreateOrConnectWithoutSampleInput | LogCreateOrConnectWithoutSampleInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutSampleInput | LogUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: LogCreateManySampleInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutSampleInput | LogUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: LogUpdateManyWithWhereWithoutSampleInput | LogUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutSampleNestedInput = {
    create?: XOR<InvoiceCreateWithoutSampleInput, InvoiceUncheckedCreateWithoutSampleInput> | InvoiceCreateWithoutSampleInput[] | InvoiceUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutSampleInput | InvoiceCreateOrConnectWithoutSampleInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutSampleInput | InvoiceUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: InvoiceCreateManySampleInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutSampleInput | InvoiceUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutSampleInput | InvoiceUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type SampleLogUpdateManyWithoutSampleNestedInput = {
    create?: XOR<SampleLogCreateWithoutSampleInput, SampleLogUncheckedCreateWithoutSampleInput> | SampleLogCreateWithoutSampleInput[] | SampleLogUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleLogCreateOrConnectWithoutSampleInput | SampleLogCreateOrConnectWithoutSampleInput[]
    upsert?: SampleLogUpsertWithWhereUniqueWithoutSampleInput | SampleLogUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: SampleLogCreateManySampleInputEnvelope
    set?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    disconnect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    delete?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    connect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    update?: SampleLogUpdateWithWhereUniqueWithoutSampleInput | SampleLogUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: SampleLogUpdateManyWithWhereWithoutSampleInput | SampleLogUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: SampleLogScalarWhereInput | SampleLogScalarWhereInput[]
  }

  export type SampleTestUncheckedUpdateManyWithoutSampleNestedInput = {
    create?: XOR<SampleTestCreateWithoutSampleInput, SampleTestUncheckedCreateWithoutSampleInput> | SampleTestCreateWithoutSampleInput[] | SampleTestUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleTestCreateOrConnectWithoutSampleInput | SampleTestCreateOrConnectWithoutSampleInput[]
    upsert?: SampleTestUpsertWithWhereUniqueWithoutSampleInput | SampleTestUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: SampleTestCreateManySampleInputEnvelope
    set?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    disconnect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    delete?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    connect?: SampleTestWhereUniqueInput | SampleTestWhereUniqueInput[]
    update?: SampleTestUpdateWithWhereUniqueWithoutSampleInput | SampleTestUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: SampleTestUpdateManyWithWhereWithoutSampleInput | SampleTestUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutSampleNestedInput = {
    create?: XOR<LogCreateWithoutSampleInput, LogUncheckedCreateWithoutSampleInput> | LogCreateWithoutSampleInput[] | LogUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: LogCreateOrConnectWithoutSampleInput | LogCreateOrConnectWithoutSampleInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutSampleInput | LogUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: LogCreateManySampleInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutSampleInput | LogUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: LogUpdateManyWithWhereWithoutSampleInput | LogUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutSampleNestedInput = {
    create?: XOR<InvoiceCreateWithoutSampleInput, InvoiceUncheckedCreateWithoutSampleInput> | InvoiceCreateWithoutSampleInput[] | InvoiceUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutSampleInput | InvoiceCreateOrConnectWithoutSampleInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutSampleInput | InvoiceUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: InvoiceCreateManySampleInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutSampleInput | InvoiceUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutSampleInput | InvoiceUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type SampleLogUncheckedUpdateManyWithoutSampleNestedInput = {
    create?: XOR<SampleLogCreateWithoutSampleInput, SampleLogUncheckedCreateWithoutSampleInput> | SampleLogCreateWithoutSampleInput[] | SampleLogUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleLogCreateOrConnectWithoutSampleInput | SampleLogCreateOrConnectWithoutSampleInput[]
    upsert?: SampleLogUpsertWithWhereUniqueWithoutSampleInput | SampleLogUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: SampleLogCreateManySampleInputEnvelope
    set?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    disconnect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    delete?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    connect?: SampleLogWhereUniqueInput | SampleLogWhereUniqueInput[]
    update?: SampleLogUpdateWithWhereUniqueWithoutSampleInput | SampleLogUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: SampleLogUpdateManyWithWhereWithoutSampleInput | SampleLogUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: SampleLogScalarWhereInput | SampleLogScalarWhereInput[]
  }

  export type SampleCreateNestedOneWithoutSampleTestsInput = {
    create?: XOR<SampleCreateWithoutSampleTestsInput, SampleUncheckedCreateWithoutSampleTestsInput>
    connectOrCreate?: SampleCreateOrConnectWithoutSampleTestsInput
    connect?: SampleWhereUniqueInput
  }

  export type TestCreateNestedOneWithoutSampleTestsInput = {
    create?: XOR<TestCreateWithoutSampleTestsInput, TestUncheckedCreateWithoutSampleTestsInput>
    connectOrCreate?: TestCreateOrConnectWithoutSampleTestsInput
    connect?: TestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubmitterSampleTestsInput = {
    create?: XOR<UserCreateWithoutSubmitterSampleTestsInput, UserUncheckedCreateWithoutSubmitterSampleTestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmitterSampleTestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewerSampleTestsInput = {
    create?: XOR<UserCreateWithoutReviewerSampleTestsInput, UserUncheckedCreateWithoutReviewerSampleTestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewerSampleTestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApproverSampleTestsInput = {
    create?: XOR<UserCreateWithoutApproverSampleTestsInput, UserUncheckedCreateWithoutApproverSampleTestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApproverSampleTestsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SampleUpdateOneRequiredWithoutSampleTestsNestedInput = {
    create?: XOR<SampleCreateWithoutSampleTestsInput, SampleUncheckedCreateWithoutSampleTestsInput>
    connectOrCreate?: SampleCreateOrConnectWithoutSampleTestsInput
    upsert?: SampleUpsertWithoutSampleTestsInput
    connect?: SampleWhereUniqueInput
    update?: XOR<XOR<SampleUpdateToOneWithWhereWithoutSampleTestsInput, SampleUpdateWithoutSampleTestsInput>, SampleUncheckedUpdateWithoutSampleTestsInput>
  }

  export type TestUpdateOneRequiredWithoutSampleTestsNestedInput = {
    create?: XOR<TestCreateWithoutSampleTestsInput, TestUncheckedCreateWithoutSampleTestsInput>
    connectOrCreate?: TestCreateOrConnectWithoutSampleTestsInput
    upsert?: TestUpsertWithoutSampleTestsInput
    connect?: TestWhereUniqueInput
    update?: XOR<XOR<TestUpdateToOneWithWhereWithoutSampleTestsInput, TestUpdateWithoutSampleTestsInput>, TestUncheckedUpdateWithoutSampleTestsInput>
  }

  export type UserUpdateOneWithoutSubmitterSampleTestsNestedInput = {
    create?: XOR<UserCreateWithoutSubmitterSampleTestsInput, UserUncheckedCreateWithoutSubmitterSampleTestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmitterSampleTestsInput
    upsert?: UserUpsertWithoutSubmitterSampleTestsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmitterSampleTestsInput, UserUpdateWithoutSubmitterSampleTestsInput>, UserUncheckedUpdateWithoutSubmitterSampleTestsInput>
  }

  export type UserUpdateOneWithoutReviewerSampleTestsNestedInput = {
    create?: XOR<UserCreateWithoutReviewerSampleTestsInput, UserUncheckedCreateWithoutReviewerSampleTestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewerSampleTestsInput
    upsert?: UserUpsertWithoutReviewerSampleTestsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewerSampleTestsInput, UserUpdateWithoutReviewerSampleTestsInput>, UserUncheckedUpdateWithoutReviewerSampleTestsInput>
  }

  export type UserUpdateOneWithoutApproverSampleTestsNestedInput = {
    create?: XOR<UserCreateWithoutApproverSampleTestsInput, UserUncheckedCreateWithoutApproverSampleTestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApproverSampleTestsInput
    upsert?: UserUpsertWithoutApproverSampleTestsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApproverSampleTestsInput, UserUpdateWithoutApproverSampleTestsInput>, UserUncheckedUpdateWithoutApproverSampleTestsInput>
  }

  export type SampleCreateNestedOneWithoutSampleLogsInput = {
    create?: XOR<SampleCreateWithoutSampleLogsInput, SampleUncheckedCreateWithoutSampleLogsInput>
    connectOrCreate?: SampleCreateOrConnectWithoutSampleLogsInput
    connect?: SampleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSampleLogsInput = {
    create?: XOR<UserCreateWithoutSampleLogsInput, UserUncheckedCreateWithoutSampleLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSampleLogsInput
    connect?: UserWhereUniqueInput
  }

  export type SampleUpdateOneRequiredWithoutSampleLogsNestedInput = {
    create?: XOR<SampleCreateWithoutSampleLogsInput, SampleUncheckedCreateWithoutSampleLogsInput>
    connectOrCreate?: SampleCreateOrConnectWithoutSampleLogsInput
    upsert?: SampleUpsertWithoutSampleLogsInput
    connect?: SampleWhereUniqueInput
    update?: XOR<XOR<SampleUpdateToOneWithWhereWithoutSampleLogsInput, SampleUpdateWithoutSampleLogsInput>, SampleUncheckedUpdateWithoutSampleLogsInput>
  }

  export type UserUpdateOneRequiredWithoutSampleLogsNestedInput = {
    create?: XOR<UserCreateWithoutSampleLogsInput, UserUncheckedCreateWithoutSampleLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSampleLogsInput
    upsert?: UserUpsertWithoutSampleLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSampleLogsInput, UserUpdateWithoutSampleLogsInput>, UserUncheckedUpdateWithoutSampleLogsInput>
  }

  export type SampleCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<SampleCreateWithoutInvoicesInput, SampleUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: SampleCreateOrConnectWithoutInvoicesInput
    connect?: SampleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutIssuedInvoicesInput = {
    create?: XOR<UserCreateWithoutIssuedInvoicesInput, UserUncheckedCreateWithoutIssuedInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutIssuedInvoicesInput
    connect?: UserWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SampleUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<SampleCreateWithoutInvoicesInput, SampleUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: SampleCreateOrConnectWithoutInvoicesInput
    upsert?: SampleUpsertWithoutInvoicesInput
    connect?: SampleWhereUniqueInput
    update?: XOR<XOR<SampleUpdateToOneWithWhereWithoutInvoicesInput, SampleUpdateWithoutInvoicesInput>, SampleUncheckedUpdateWithoutInvoicesInput>
  }

  export type UserUpdateOneRequiredWithoutIssuedInvoicesNestedInput = {
    create?: XOR<UserCreateWithoutIssuedInvoicesInput, UserUncheckedCreateWithoutIssuedInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutIssuedInvoicesInput
    upsert?: UserUpsertWithoutIssuedInvoicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutIssuedInvoicesInput, UserUpdateWithoutIssuedInvoicesInput>, UserUncheckedUpdateWithoutIssuedInvoicesInput>
  }

  export type PaymentUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutInvoiceInput | PaymentUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutInvoiceInput | PaymentUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutInvoiceInput | PaymentUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput> | PaymentCreateWithoutInvoiceInput[] | PaymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutInvoiceInput | PaymentCreateOrConnectWithoutInvoiceInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutInvoiceInput | PaymentUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: PaymentCreateManyInvoiceInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutInvoiceInput | PaymentUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutInvoiceInput | PaymentUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type InvoiceCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutPaymentsInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutPaymentsInput
    upsert?: InvoiceUpsertWithoutPaymentsInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutPaymentsInput, InvoiceUpdateWithoutPaymentsInput>, InvoiceUncheckedUpdateWithoutPaymentsInput>
  }

  export type AccessLevelCreatepermissionsInput = {
    set: string[]
  }

  export type UserCreateNestedManyWithoutAccessLevelsInput = {
    create?: XOR<UserCreateWithoutAccessLevelsInput, UserUncheckedCreateWithoutAccessLevelsInput> | UserCreateWithoutAccessLevelsInput[] | UserUncheckedCreateWithoutAccessLevelsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccessLevelsInput | UserCreateOrConnectWithoutAccessLevelsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAccessLevelsInput = {
    create?: XOR<UserCreateWithoutAccessLevelsInput, UserUncheckedCreateWithoutAccessLevelsInput> | UserCreateWithoutAccessLevelsInput[] | UserUncheckedCreateWithoutAccessLevelsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccessLevelsInput | UserCreateOrConnectWithoutAccessLevelsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AccessLevelUpdatepermissionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateManyWithoutAccessLevelsNestedInput = {
    create?: XOR<UserCreateWithoutAccessLevelsInput, UserUncheckedCreateWithoutAccessLevelsInput> | UserCreateWithoutAccessLevelsInput[] | UserUncheckedCreateWithoutAccessLevelsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccessLevelsInput | UserCreateOrConnectWithoutAccessLevelsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAccessLevelsInput | UserUpsertWithWhereUniqueWithoutAccessLevelsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAccessLevelsInput | UserUpdateWithWhereUniqueWithoutAccessLevelsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAccessLevelsInput | UserUpdateManyWithWhereWithoutAccessLevelsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAccessLevelsNestedInput = {
    create?: XOR<UserCreateWithoutAccessLevelsInput, UserUncheckedCreateWithoutAccessLevelsInput> | UserCreateWithoutAccessLevelsInput[] | UserUncheckedCreateWithoutAccessLevelsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccessLevelsInput | UserCreateOrConnectWithoutAccessLevelsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAccessLevelsInput | UserUpsertWithWhereUniqueWithoutAccessLevelsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAccessLevelsInput | UserUpdateWithWhereUniqueWithoutAccessLevelsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAccessLevelsInput | UserUpdateManyWithWhereWithoutAccessLevelsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLogsInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    connect?: UserWhereUniqueInput
  }

  export type SampleCreateNestedOneWithoutLogsInput = {
    create?: XOR<SampleCreateWithoutLogsInput, SampleUncheckedCreateWithoutLogsInput>
    connectOrCreate?: SampleCreateOrConnectWithoutLogsInput
    connect?: SampleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    upsert?: UserUpsertWithoutLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLogsInput, UserUpdateWithoutLogsInput>, UserUncheckedUpdateWithoutLogsInput>
  }

  export type SampleUpdateOneWithoutLogsNestedInput = {
    create?: XOR<SampleCreateWithoutLogsInput, SampleUncheckedCreateWithoutLogsInput>
    connectOrCreate?: SampleCreateOrConnectWithoutLogsInput
    upsert?: SampleUpsertWithoutLogsInput
    disconnect?: SampleWhereInput | boolean
    delete?: SampleWhereInput | boolean
    connect?: SampleWhereUniqueInput
    update?: XOR<XOR<SampleUpdateToOneWithWhereWithoutLogsInput, SampleUpdateWithoutLogsInput>, SampleUncheckedUpdateWithoutLogsInput>
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedMessagesInput = {
    create?: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedMessagesNestedInput = {
    create?: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedMessagesInput
    upsert?: UserUpsertWithoutReceivedMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedMessagesInput, UserUpdateWithoutReceivedMessagesInput>, UserUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SampleCreateWithoutAssignedUserInput = {
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutSamplesInput
    client: ClientCreateNestedOneWithoutSamplesInput
    sampleTests?: SampleTestCreateNestedManyWithoutSampleInput
    logs?: LogCreateNestedManyWithoutSampleInput
    invoices?: InvoiceCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogCreateNestedManyWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutAssignedUserInput = {
    id?: number
    projectId: number
    clientId: number
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sampleTests?: SampleTestUncheckedCreateNestedManyWithoutSampleInput
    logs?: LogUncheckedCreateNestedManyWithoutSampleInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutAssignedUserInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutAssignedUserInput, SampleUncheckedCreateWithoutAssignedUserInput>
  }

  export type SampleCreateManyAssignedUserInputEnvelope = {
    data: SampleCreateManyAssignedUserInput | SampleCreateManyAssignedUserInput[]
    skipDuplicates?: boolean
  }

  export type LogCreateWithoutUserInput = {
    actionType: string
    description: string
    timestamp?: Date | string
    sample?: SampleCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutUserInput = {
    id?: number
    sampleId?: number | null
    actionType: string
    description: string
    timestamp?: Date | string
  }

  export type LogCreateOrConnectWithoutUserInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogCreateManyUserInputEnvelope = {
    data: LogCreateManyUserInput | LogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutFromUserInput = {
    content: string
    read?: boolean
    timestamp?: Date | string
    toUser: UserCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateWithoutFromUserInput = {
    id?: number
    toUserId: number
    content: string
    read?: boolean
    timestamp?: Date | string
  }

  export type MessageCreateOrConnectWithoutFromUserInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutFromUserInput, MessageUncheckedCreateWithoutFromUserInput>
  }

  export type MessageCreateManyFromUserInputEnvelope = {
    data: MessageCreateManyFromUserInput | MessageCreateManyFromUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutToUserInput = {
    content: string
    read?: boolean
    timestamp?: Date | string
    fromUser: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageUncheckedCreateWithoutToUserInput = {
    id?: number
    fromUserId: number
    content: string
    read?: boolean
    timestamp?: Date | string
  }

  export type MessageCreateOrConnectWithoutToUserInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutToUserInput, MessageUncheckedCreateWithoutToUserInput>
  }

  export type MessageCreateManyToUserInputEnvelope = {
    data: MessageCreateManyToUserInput | MessageCreateManyToUserInput[]
    skipDuplicates?: boolean
  }

  export type AccessLevelCreateWithoutUsersInput = {
    level: number
    permissions?: AccessLevelCreatepermissionsInput | string[]
  }

  export type AccessLevelUncheckedCreateWithoutUsersInput = {
    id?: number
    level: number
    permissions?: AccessLevelCreatepermissionsInput | string[]
  }

  export type AccessLevelCreateOrConnectWithoutUsersInput = {
    where: AccessLevelWhereUniqueInput
    create: XOR<AccessLevelCreateWithoutUsersInput, AccessLevelUncheckedCreateWithoutUsersInput>
  }

  export type SampleTestCreateWithoutSubmitterInput = {
    result?: string | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sample: SampleCreateNestedOneWithoutSampleTestsInput
    test: TestCreateNestedOneWithoutSampleTestsInput
    reviewer?: UserCreateNestedOneWithoutReviewerSampleTestsInput
    approver?: UserCreateNestedOneWithoutApproverSampleTestsInput
  }

  export type SampleTestUncheckedCreateWithoutSubmitterInput = {
    id?: number
    sampleId: number
    testId: number
    result?: string | null
    reviewedBy?: number | null
    approvedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleTestCreateOrConnectWithoutSubmitterInput = {
    where: SampleTestWhereUniqueInput
    create: XOR<SampleTestCreateWithoutSubmitterInput, SampleTestUncheckedCreateWithoutSubmitterInput>
  }

  export type SampleTestCreateManySubmitterInputEnvelope = {
    data: SampleTestCreateManySubmitterInput | SampleTestCreateManySubmitterInput[]
    skipDuplicates?: boolean
  }

  export type SampleTestCreateWithoutReviewerInput = {
    result?: string | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sample: SampleCreateNestedOneWithoutSampleTestsInput
    test: TestCreateNestedOneWithoutSampleTestsInput
    submitter?: UserCreateNestedOneWithoutSubmitterSampleTestsInput
    approver?: UserCreateNestedOneWithoutApproverSampleTestsInput
  }

  export type SampleTestUncheckedCreateWithoutReviewerInput = {
    id?: number
    sampleId: number
    testId: number
    result?: string | null
    submittedBy?: number | null
    approvedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleTestCreateOrConnectWithoutReviewerInput = {
    where: SampleTestWhereUniqueInput
    create: XOR<SampleTestCreateWithoutReviewerInput, SampleTestUncheckedCreateWithoutReviewerInput>
  }

  export type SampleTestCreateManyReviewerInputEnvelope = {
    data: SampleTestCreateManyReviewerInput | SampleTestCreateManyReviewerInput[]
    skipDuplicates?: boolean
  }

  export type SampleTestCreateWithoutApproverInput = {
    result?: string | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sample: SampleCreateNestedOneWithoutSampleTestsInput
    test: TestCreateNestedOneWithoutSampleTestsInput
    submitter?: UserCreateNestedOneWithoutSubmitterSampleTestsInput
    reviewer?: UserCreateNestedOneWithoutReviewerSampleTestsInput
  }

  export type SampleTestUncheckedCreateWithoutApproverInput = {
    id?: number
    sampleId: number
    testId: number
    result?: string | null
    submittedBy?: number | null
    reviewedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleTestCreateOrConnectWithoutApproverInput = {
    where: SampleTestWhereUniqueInput
    create: XOR<SampleTestCreateWithoutApproverInput, SampleTestUncheckedCreateWithoutApproverInput>
  }

  export type SampleTestCreateManyApproverInputEnvelope = {
    data: SampleTestCreateManyApproverInput | SampleTestCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type SampleLogCreateWithoutUserInput = {
    deliveredBy?: string | null
    deliveryContact?: string | null
    modeOfTransmit: string
    createdAt?: Date | string
    sample: SampleCreateNestedOneWithoutSampleLogsInput
  }

  export type SampleLogUncheckedCreateWithoutUserInput = {
    id?: number
    sampleId: number
    deliveredBy?: string | null
    deliveryContact?: string | null
    modeOfTransmit: string
    createdAt?: Date | string
  }

  export type SampleLogCreateOrConnectWithoutUserInput = {
    where: SampleLogWhereUniqueInput
    create: XOR<SampleLogCreateWithoutUserInput, SampleLogUncheckedCreateWithoutUserInput>
  }

  export type SampleLogCreateManyUserInputEnvelope = {
    data: SampleLogCreateManyUserInput | SampleLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutUserInput = {
    amountUgx: number
    amountUsd: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
    sample: SampleCreateNestedOneWithoutInvoicesInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutUserInput = {
    id?: number
    sampleId: number
    amountUgx: number
    amountUsd: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput>
  }

  export type InvoiceCreateManyUserInputEnvelope = {
    data: InvoiceCreateManyUserInput | InvoiceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SampleUpsertWithWhereUniqueWithoutAssignedUserInput = {
    where: SampleWhereUniqueInput
    update: XOR<SampleUpdateWithoutAssignedUserInput, SampleUncheckedUpdateWithoutAssignedUserInput>
    create: XOR<SampleCreateWithoutAssignedUserInput, SampleUncheckedCreateWithoutAssignedUserInput>
  }

  export type SampleUpdateWithWhereUniqueWithoutAssignedUserInput = {
    where: SampleWhereUniqueInput
    data: XOR<SampleUpdateWithoutAssignedUserInput, SampleUncheckedUpdateWithoutAssignedUserInput>
  }

  export type SampleUpdateManyWithWhereWithoutAssignedUserInput = {
    where: SampleScalarWhereInput
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyWithoutAssignedUserInput>
  }

  export type SampleScalarWhereInput = {
    AND?: SampleScalarWhereInput | SampleScalarWhereInput[]
    OR?: SampleScalarWhereInput[]
    NOT?: SampleScalarWhereInput | SampleScalarWhereInput[]
    id?: IntFilter<"Sample"> | number
    projectId?: IntFilter<"Sample"> | number
    clientId?: IntFilter<"Sample"> | number
    assignedTo?: IntNullableFilter<"Sample"> | number | null
    status?: StringFilter<"Sample"> | string
    receivedDate?: DateTimeFilter<"Sample"> | Date | string
    deliveryInfo?: StringNullableFilter<"Sample"> | string | null
    notes?: StringNullableFilter<"Sample"> | string | null
    createdAt?: DateTimeFilter<"Sample"> | Date | string
    updatedAt?: DateTimeFilter<"Sample"> | Date | string
  }

  export type LogUpsertWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogUpdateWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
  }

  export type LogUpdateManyWithWhereWithoutUserInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutUserInput>
  }

  export type LogScalarWhereInput = {
    AND?: LogScalarWhereInput | LogScalarWhereInput[]
    OR?: LogScalarWhereInput[]
    NOT?: LogScalarWhereInput | LogScalarWhereInput[]
    id?: IntFilter<"Log"> | number
    userId?: IntFilter<"Log"> | number
    sampleId?: IntNullableFilter<"Log"> | number | null
    actionType?: StringFilter<"Log"> | string
    description?: StringFilter<"Log"> | string
    timestamp?: DateTimeFilter<"Log"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutFromUserInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutFromUserInput, MessageUncheckedUpdateWithoutFromUserInput>
    create: XOR<MessageCreateWithoutFromUserInput, MessageUncheckedCreateWithoutFromUserInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutFromUserInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutFromUserInput, MessageUncheckedUpdateWithoutFromUserInput>
  }

  export type MessageUpdateManyWithWhereWithoutFromUserInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutFromUserInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    fromUserId?: IntFilter<"Message"> | number
    toUserId?: IntFilter<"Message"> | number
    content?: StringFilter<"Message"> | string
    read?: BoolFilter<"Message"> | boolean
    timestamp?: DateTimeFilter<"Message"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutToUserInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutToUserInput, MessageUncheckedUpdateWithoutToUserInput>
    create: XOR<MessageCreateWithoutToUserInput, MessageUncheckedCreateWithoutToUserInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutToUserInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutToUserInput, MessageUncheckedUpdateWithoutToUserInput>
  }

  export type MessageUpdateManyWithWhereWithoutToUserInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutToUserInput>
  }

  export type AccessLevelUpsertWithWhereUniqueWithoutUsersInput = {
    where: AccessLevelWhereUniqueInput
    update: XOR<AccessLevelUpdateWithoutUsersInput, AccessLevelUncheckedUpdateWithoutUsersInput>
    create: XOR<AccessLevelCreateWithoutUsersInput, AccessLevelUncheckedCreateWithoutUsersInput>
  }

  export type AccessLevelUpdateWithWhereUniqueWithoutUsersInput = {
    where: AccessLevelWhereUniqueInput
    data: XOR<AccessLevelUpdateWithoutUsersInput, AccessLevelUncheckedUpdateWithoutUsersInput>
  }

  export type AccessLevelUpdateManyWithWhereWithoutUsersInput = {
    where: AccessLevelScalarWhereInput
    data: XOR<AccessLevelUpdateManyMutationInput, AccessLevelUncheckedUpdateManyWithoutUsersInput>
  }

  export type AccessLevelScalarWhereInput = {
    AND?: AccessLevelScalarWhereInput | AccessLevelScalarWhereInput[]
    OR?: AccessLevelScalarWhereInput[]
    NOT?: AccessLevelScalarWhereInput | AccessLevelScalarWhereInput[]
    id?: IntFilter<"AccessLevel"> | number
    level?: IntFilter<"AccessLevel"> | number
    permissions?: StringNullableListFilter<"AccessLevel">
  }

  export type SampleTestUpsertWithWhereUniqueWithoutSubmitterInput = {
    where: SampleTestWhereUniqueInput
    update: XOR<SampleTestUpdateWithoutSubmitterInput, SampleTestUncheckedUpdateWithoutSubmitterInput>
    create: XOR<SampleTestCreateWithoutSubmitterInput, SampleTestUncheckedCreateWithoutSubmitterInput>
  }

  export type SampleTestUpdateWithWhereUniqueWithoutSubmitterInput = {
    where: SampleTestWhereUniqueInput
    data: XOR<SampleTestUpdateWithoutSubmitterInput, SampleTestUncheckedUpdateWithoutSubmitterInput>
  }

  export type SampleTestUpdateManyWithWhereWithoutSubmitterInput = {
    where: SampleTestScalarWhereInput
    data: XOR<SampleTestUpdateManyMutationInput, SampleTestUncheckedUpdateManyWithoutSubmitterInput>
  }

  export type SampleTestScalarWhereInput = {
    AND?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
    OR?: SampleTestScalarWhereInput[]
    NOT?: SampleTestScalarWhereInput | SampleTestScalarWhereInput[]
    id?: IntFilter<"SampleTest"> | number
    sampleId?: IntFilter<"SampleTest"> | number
    testId?: IntFilter<"SampleTest"> | number
    result?: StringNullableFilter<"SampleTest"> | string | null
    submittedBy?: IntNullableFilter<"SampleTest"> | number | null
    reviewedBy?: IntNullableFilter<"SampleTest"> | number | null
    approvedBy?: IntNullableFilter<"SampleTest"> | number | null
    submittedAt?: DateTimeNullableFilter<"SampleTest"> | Date | string | null
    reviewedAt?: DateTimeNullableFilter<"SampleTest"> | Date | string | null
    approvedAt?: DateTimeNullableFilter<"SampleTest"> | Date | string | null
    createdAt?: DateTimeFilter<"SampleTest"> | Date | string
    updatedAt?: DateTimeFilter<"SampleTest"> | Date | string
  }

  export type SampleTestUpsertWithWhereUniqueWithoutReviewerInput = {
    where: SampleTestWhereUniqueInput
    update: XOR<SampleTestUpdateWithoutReviewerInput, SampleTestUncheckedUpdateWithoutReviewerInput>
    create: XOR<SampleTestCreateWithoutReviewerInput, SampleTestUncheckedCreateWithoutReviewerInput>
  }

  export type SampleTestUpdateWithWhereUniqueWithoutReviewerInput = {
    where: SampleTestWhereUniqueInput
    data: XOR<SampleTestUpdateWithoutReviewerInput, SampleTestUncheckedUpdateWithoutReviewerInput>
  }

  export type SampleTestUpdateManyWithWhereWithoutReviewerInput = {
    where: SampleTestScalarWhereInput
    data: XOR<SampleTestUpdateManyMutationInput, SampleTestUncheckedUpdateManyWithoutReviewerInput>
  }

  export type SampleTestUpsertWithWhereUniqueWithoutApproverInput = {
    where: SampleTestWhereUniqueInput
    update: XOR<SampleTestUpdateWithoutApproverInput, SampleTestUncheckedUpdateWithoutApproverInput>
    create: XOR<SampleTestCreateWithoutApproverInput, SampleTestUncheckedCreateWithoutApproverInput>
  }

  export type SampleTestUpdateWithWhereUniqueWithoutApproverInput = {
    where: SampleTestWhereUniqueInput
    data: XOR<SampleTestUpdateWithoutApproverInput, SampleTestUncheckedUpdateWithoutApproverInput>
  }

  export type SampleTestUpdateManyWithWhereWithoutApproverInput = {
    where: SampleTestScalarWhereInput
    data: XOR<SampleTestUpdateManyMutationInput, SampleTestUncheckedUpdateManyWithoutApproverInput>
  }

  export type SampleLogUpsertWithWhereUniqueWithoutUserInput = {
    where: SampleLogWhereUniqueInput
    update: XOR<SampleLogUpdateWithoutUserInput, SampleLogUncheckedUpdateWithoutUserInput>
    create: XOR<SampleLogCreateWithoutUserInput, SampleLogUncheckedCreateWithoutUserInput>
  }

  export type SampleLogUpdateWithWhereUniqueWithoutUserInput = {
    where: SampleLogWhereUniqueInput
    data: XOR<SampleLogUpdateWithoutUserInput, SampleLogUncheckedUpdateWithoutUserInput>
  }

  export type SampleLogUpdateManyWithWhereWithoutUserInput = {
    where: SampleLogScalarWhereInput
    data: XOR<SampleLogUpdateManyMutationInput, SampleLogUncheckedUpdateManyWithoutUserInput>
  }

  export type SampleLogScalarWhereInput = {
    AND?: SampleLogScalarWhereInput | SampleLogScalarWhereInput[]
    OR?: SampleLogScalarWhereInput[]
    NOT?: SampleLogScalarWhereInput | SampleLogScalarWhereInput[]
    id?: IntFilter<"SampleLog"> | number
    sampleId?: IntFilter<"SampleLog"> | number
    receivedBy?: IntFilter<"SampleLog"> | number
    deliveredBy?: StringNullableFilter<"SampleLog"> | string | null
    deliveryContact?: StringNullableFilter<"SampleLog"> | string | null
    modeOfTransmit?: StringFilter<"SampleLog"> | string
    createdAt?: DateTimeFilter<"SampleLog"> | Date | string
  }

  export type InvoiceUpsertWithWhereUniqueWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutUserInput, InvoiceUncheckedUpdateWithoutUserInput>
    create: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutUserInput, InvoiceUncheckedUpdateWithoutUserInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutUserInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutUserInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: IntFilter<"Invoice"> | number
    sampleId?: IntFilter<"Invoice"> | number
    amountUgx?: IntFilter<"Invoice"> | number
    amountUsd?: FloatFilter<"Invoice"> | number
    issuedBy?: IntFilter<"Invoice"> | number
    issuedAt?: DateTimeFilter<"Invoice"> | Date | string
    paid?: BoolFilter<"Invoice"> | boolean
    paymentMethod?: StringNullableFilter<"Invoice"> | string | null
  }

  export type SampleCreateWithoutClientInput = {
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutSamplesInput
    assignedUser?: UserCreateNestedOneWithoutSamplesInput
    sampleTests?: SampleTestCreateNestedManyWithoutSampleInput
    logs?: LogCreateNestedManyWithoutSampleInput
    invoices?: InvoiceCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogCreateNestedManyWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutClientInput = {
    id?: number
    projectId: number
    assignedTo?: number | null
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sampleTests?: SampleTestUncheckedCreateNestedManyWithoutSampleInput
    logs?: LogUncheckedCreateNestedManyWithoutSampleInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutClientInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutClientInput, SampleUncheckedCreateWithoutClientInput>
  }

  export type SampleCreateManyClientInputEnvelope = {
    data: SampleCreateManyClientInput | SampleCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutClientInput = {
    title: string
    description?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutClientInput = {
    id?: number
    title: string
    description?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutClientInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutClientInput, ProjectUncheckedCreateWithoutClientInput>
  }

  export type ProjectCreateManyClientInputEnvelope = {
    data: ProjectCreateManyClientInput | ProjectCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type SampleUpsertWithWhereUniqueWithoutClientInput = {
    where: SampleWhereUniqueInput
    update: XOR<SampleUpdateWithoutClientInput, SampleUncheckedUpdateWithoutClientInput>
    create: XOR<SampleCreateWithoutClientInput, SampleUncheckedCreateWithoutClientInput>
  }

  export type SampleUpdateWithWhereUniqueWithoutClientInput = {
    where: SampleWhereUniqueInput
    data: XOR<SampleUpdateWithoutClientInput, SampleUncheckedUpdateWithoutClientInput>
  }

  export type SampleUpdateManyWithWhereWithoutClientInput = {
    where: SampleScalarWhereInput
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyWithoutClientInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutClientInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutClientInput, ProjectUncheckedUpdateWithoutClientInput>
    create: XOR<ProjectCreateWithoutClientInput, ProjectUncheckedCreateWithoutClientInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutClientInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutClientInput, ProjectUncheckedUpdateWithoutClientInput>
  }

  export type ProjectUpdateManyWithWhereWithoutClientInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutClientInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: IntFilter<"Project"> | number
    title?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    clientId?: IntFilter<"Project"> | number
    createdBy?: IntNullableFilter<"Project"> | number | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
  }

  export type ClientCreateWithoutProjectsInput = {
    name: string
    address?: string | null
    contact?: string | null
    billingName?: string | null
    billingAddress?: string | null
    billingContact?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutProjectsInput = {
    id?: number
    name: string
    address?: string | null
    contact?: string | null
    billingName?: string | null
    billingAddress?: string | null
    billingContact?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutProjectsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutProjectsInput, ClientUncheckedCreateWithoutProjectsInput>
  }

  export type SampleCreateWithoutProjectInput = {
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutSamplesInput
    assignedUser?: UserCreateNestedOneWithoutSamplesInput
    sampleTests?: SampleTestCreateNestedManyWithoutSampleInput
    logs?: LogCreateNestedManyWithoutSampleInput
    invoices?: InvoiceCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogCreateNestedManyWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutProjectInput = {
    id?: number
    clientId: number
    assignedTo?: number | null
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sampleTests?: SampleTestUncheckedCreateNestedManyWithoutSampleInput
    logs?: LogUncheckedCreateNestedManyWithoutSampleInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutProjectInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutProjectInput, SampleUncheckedCreateWithoutProjectInput>
  }

  export type SampleCreateManyProjectInputEnvelope = {
    data: SampleCreateManyProjectInput | SampleCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutProjectsInput = {
    update: XOR<ClientUpdateWithoutProjectsInput, ClientUncheckedUpdateWithoutProjectsInput>
    create: XOR<ClientCreateWithoutProjectsInput, ClientUncheckedCreateWithoutProjectsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutProjectsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutProjectsInput, ClientUncheckedUpdateWithoutProjectsInput>
  }

  export type ClientUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    billingName?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    billingName?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutClientNestedInput
  }

  export type SampleUpsertWithWhereUniqueWithoutProjectInput = {
    where: SampleWhereUniqueInput
    update: XOR<SampleUpdateWithoutProjectInput, SampleUncheckedUpdateWithoutProjectInput>
    create: XOR<SampleCreateWithoutProjectInput, SampleUncheckedCreateWithoutProjectInput>
  }

  export type SampleUpdateWithWhereUniqueWithoutProjectInput = {
    where: SampleWhereUniqueInput
    data: XOR<SampleUpdateWithoutProjectInput, SampleUncheckedUpdateWithoutProjectInput>
  }

  export type SampleUpdateManyWithWhereWithoutProjectInput = {
    where: SampleScalarWhereInput
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyWithoutProjectInput>
  }

  export type SampleTestCreateWithoutTestInput = {
    result?: string | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sample: SampleCreateNestedOneWithoutSampleTestsInput
    submitter?: UserCreateNestedOneWithoutSubmitterSampleTestsInput
    reviewer?: UserCreateNestedOneWithoutReviewerSampleTestsInput
    approver?: UserCreateNestedOneWithoutApproverSampleTestsInput
  }

  export type SampleTestUncheckedCreateWithoutTestInput = {
    id?: number
    sampleId: number
    result?: string | null
    submittedBy?: number | null
    reviewedBy?: number | null
    approvedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleTestCreateOrConnectWithoutTestInput = {
    where: SampleTestWhereUniqueInput
    create: XOR<SampleTestCreateWithoutTestInput, SampleTestUncheckedCreateWithoutTestInput>
  }

  export type SampleTestCreateManyTestInputEnvelope = {
    data: SampleTestCreateManyTestInput | SampleTestCreateManyTestInput[]
    skipDuplicates?: boolean
  }

  export type SampleTestUpsertWithWhereUniqueWithoutTestInput = {
    where: SampleTestWhereUniqueInput
    update: XOR<SampleTestUpdateWithoutTestInput, SampleTestUncheckedUpdateWithoutTestInput>
    create: XOR<SampleTestCreateWithoutTestInput, SampleTestUncheckedCreateWithoutTestInput>
  }

  export type SampleTestUpdateWithWhereUniqueWithoutTestInput = {
    where: SampleTestWhereUniqueInput
    data: XOR<SampleTestUpdateWithoutTestInput, SampleTestUncheckedUpdateWithoutTestInput>
  }

  export type SampleTestUpdateManyWithWhereWithoutTestInput = {
    where: SampleTestScalarWhereInput
    data: XOR<SampleTestUpdateManyMutationInput, SampleTestUncheckedUpdateManyWithoutTestInput>
  }

  export type ProjectCreateWithoutSamplesInput = {
    title: string
    description?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutSamplesInput = {
    id?: number
    title: string
    description?: string | null
    clientId: number
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateOrConnectWithoutSamplesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutSamplesInput, ProjectUncheckedCreateWithoutSamplesInput>
  }

  export type ClientCreateWithoutSamplesInput = {
    name: string
    address?: string | null
    contact?: string | null
    billingName?: string | null
    billingAddress?: string | null
    billingContact?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutSamplesInput = {
    id?: number
    name: string
    address?: string | null
    contact?: string | null
    billingName?: string | null
    billingAddress?: string | null
    billingContact?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutSamplesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutSamplesInput, ClientUncheckedCreateWithoutSamplesInput>
  }

  export type UserCreateWithoutSamplesInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: LogCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSamplesInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelUncheckedCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestUncheckedCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestUncheckedCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestUncheckedCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSamplesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSamplesInput, UserUncheckedCreateWithoutSamplesInput>
  }

  export type SampleTestCreateWithoutSampleInput = {
    result?: string | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    test: TestCreateNestedOneWithoutSampleTestsInput
    submitter?: UserCreateNestedOneWithoutSubmitterSampleTestsInput
    reviewer?: UserCreateNestedOneWithoutReviewerSampleTestsInput
    approver?: UserCreateNestedOneWithoutApproverSampleTestsInput
  }

  export type SampleTestUncheckedCreateWithoutSampleInput = {
    id?: number
    testId: number
    result?: string | null
    submittedBy?: number | null
    reviewedBy?: number | null
    approvedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleTestCreateOrConnectWithoutSampleInput = {
    where: SampleTestWhereUniqueInput
    create: XOR<SampleTestCreateWithoutSampleInput, SampleTestUncheckedCreateWithoutSampleInput>
  }

  export type SampleTestCreateManySampleInputEnvelope = {
    data: SampleTestCreateManySampleInput | SampleTestCreateManySampleInput[]
    skipDuplicates?: boolean
  }

  export type LogCreateWithoutSampleInput = {
    actionType: string
    description: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutSampleInput = {
    id?: number
    userId: number
    actionType: string
    description: string
    timestamp?: Date | string
  }

  export type LogCreateOrConnectWithoutSampleInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutSampleInput, LogUncheckedCreateWithoutSampleInput>
  }

  export type LogCreateManySampleInputEnvelope = {
    data: LogCreateManySampleInput | LogCreateManySampleInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutSampleInput = {
    amountUgx: number
    amountUsd: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
    user: UserCreateNestedOneWithoutIssuedInvoicesInput
    payments?: PaymentCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutSampleInput = {
    id?: number
    amountUgx: number
    amountUsd: number
    issuedBy: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutSampleInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutSampleInput, InvoiceUncheckedCreateWithoutSampleInput>
  }

  export type InvoiceCreateManySampleInputEnvelope = {
    data: InvoiceCreateManySampleInput | InvoiceCreateManySampleInput[]
    skipDuplicates?: boolean
  }

  export type SampleLogCreateWithoutSampleInput = {
    deliveredBy?: string | null
    deliveryContact?: string | null
    modeOfTransmit: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSampleLogsInput
  }

  export type SampleLogUncheckedCreateWithoutSampleInput = {
    id?: number
    receivedBy: number
    deliveredBy?: string | null
    deliveryContact?: string | null
    modeOfTransmit: string
    createdAt?: Date | string
  }

  export type SampleLogCreateOrConnectWithoutSampleInput = {
    where: SampleLogWhereUniqueInput
    create: XOR<SampleLogCreateWithoutSampleInput, SampleLogUncheckedCreateWithoutSampleInput>
  }

  export type SampleLogCreateManySampleInputEnvelope = {
    data: SampleLogCreateManySampleInput | SampleLogCreateManySampleInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutSamplesInput = {
    update: XOR<ProjectUpdateWithoutSamplesInput, ProjectUncheckedUpdateWithoutSamplesInput>
    create: XOR<ProjectCreateWithoutSamplesInput, ProjectUncheckedCreateWithoutSamplesInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutSamplesInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutSamplesInput, ProjectUncheckedUpdateWithoutSamplesInput>
  }

  export type ProjectUpdateWithoutSamplesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutSamplesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: IntFieldUpdateOperationsInput | number
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUpsertWithoutSamplesInput = {
    update: XOR<ClientUpdateWithoutSamplesInput, ClientUncheckedUpdateWithoutSamplesInput>
    create: XOR<ClientCreateWithoutSamplesInput, ClientUncheckedCreateWithoutSamplesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutSamplesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutSamplesInput, ClientUncheckedUpdateWithoutSamplesInput>
  }

  export type ClientUpdateWithoutSamplesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    billingName?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutSamplesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    billingName?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutClientNestedInput
  }

  export type UserUpsertWithoutSamplesInput = {
    update: XOR<UserUpdateWithoutSamplesInput, UserUncheckedUpdateWithoutSamplesInput>
    create: XOR<UserCreateWithoutSamplesInput, UserUncheckedCreateWithoutSamplesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSamplesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSamplesInput, UserUncheckedUpdateWithoutSamplesInput>
  }

  export type UserUpdateWithoutSamplesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: LogUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSamplesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUncheckedUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUncheckedUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUncheckedUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SampleTestUpsertWithWhereUniqueWithoutSampleInput = {
    where: SampleTestWhereUniqueInput
    update: XOR<SampleTestUpdateWithoutSampleInput, SampleTestUncheckedUpdateWithoutSampleInput>
    create: XOR<SampleTestCreateWithoutSampleInput, SampleTestUncheckedCreateWithoutSampleInput>
  }

  export type SampleTestUpdateWithWhereUniqueWithoutSampleInput = {
    where: SampleTestWhereUniqueInput
    data: XOR<SampleTestUpdateWithoutSampleInput, SampleTestUncheckedUpdateWithoutSampleInput>
  }

  export type SampleTestUpdateManyWithWhereWithoutSampleInput = {
    where: SampleTestScalarWhereInput
    data: XOR<SampleTestUpdateManyMutationInput, SampleTestUncheckedUpdateManyWithoutSampleInput>
  }

  export type LogUpsertWithWhereUniqueWithoutSampleInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutSampleInput, LogUncheckedUpdateWithoutSampleInput>
    create: XOR<LogCreateWithoutSampleInput, LogUncheckedCreateWithoutSampleInput>
  }

  export type LogUpdateWithWhereUniqueWithoutSampleInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutSampleInput, LogUncheckedUpdateWithoutSampleInput>
  }

  export type LogUpdateManyWithWhereWithoutSampleInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutSampleInput>
  }

  export type InvoiceUpsertWithWhereUniqueWithoutSampleInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutSampleInput, InvoiceUncheckedUpdateWithoutSampleInput>
    create: XOR<InvoiceCreateWithoutSampleInput, InvoiceUncheckedCreateWithoutSampleInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutSampleInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutSampleInput, InvoiceUncheckedUpdateWithoutSampleInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutSampleInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutSampleInput>
  }

  export type SampleLogUpsertWithWhereUniqueWithoutSampleInput = {
    where: SampleLogWhereUniqueInput
    update: XOR<SampleLogUpdateWithoutSampleInput, SampleLogUncheckedUpdateWithoutSampleInput>
    create: XOR<SampleLogCreateWithoutSampleInput, SampleLogUncheckedCreateWithoutSampleInput>
  }

  export type SampleLogUpdateWithWhereUniqueWithoutSampleInput = {
    where: SampleLogWhereUniqueInput
    data: XOR<SampleLogUpdateWithoutSampleInput, SampleLogUncheckedUpdateWithoutSampleInput>
  }

  export type SampleLogUpdateManyWithWhereWithoutSampleInput = {
    where: SampleLogScalarWhereInput
    data: XOR<SampleLogUpdateManyMutationInput, SampleLogUncheckedUpdateManyWithoutSampleInput>
  }

  export type SampleCreateWithoutSampleTestsInput = {
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutSamplesInput
    client: ClientCreateNestedOneWithoutSamplesInput
    assignedUser?: UserCreateNestedOneWithoutSamplesInput
    logs?: LogCreateNestedManyWithoutSampleInput
    invoices?: InvoiceCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogCreateNestedManyWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutSampleTestsInput = {
    id?: number
    projectId: number
    clientId: number
    assignedTo?: number | null
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: LogUncheckedCreateNestedManyWithoutSampleInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutSampleTestsInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutSampleTestsInput, SampleUncheckedCreateWithoutSampleTestsInput>
  }

  export type TestCreateWithoutSampleTestsInput = {
    code: string
    category: string
    name: string
    method: string
    accredited: boolean
    unit?: string | null
    priceUgx?: number | null
    priceUsd?: number | null
    leadTimeDays?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestUncheckedCreateWithoutSampleTestsInput = {
    id?: number
    code: string
    category: string
    name: string
    method: string
    accredited: boolean
    unit?: string | null
    priceUgx?: number | null
    priceUsd?: number | null
    leadTimeDays?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCreateOrConnectWithoutSampleTestsInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutSampleTestsInput, TestUncheckedCreateWithoutSampleTestsInput>
  }

  export type UserCreateWithoutSubmitterSampleTestsInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutAssignedUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelCreateNestedManyWithoutUsersInput
    reviewerSampleTests?: SampleTestCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubmitterSampleTestsInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutAssignedUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelUncheckedCreateNestedManyWithoutUsersInput
    reviewerSampleTests?: SampleTestUncheckedCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestUncheckedCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubmitterSampleTestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmitterSampleTestsInput, UserUncheckedCreateWithoutSubmitterSampleTestsInput>
  }

  export type UserCreateWithoutReviewerSampleTestsInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutAssignedUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestCreateNestedManyWithoutSubmitterInput
    approverSampleTests?: SampleTestCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewerSampleTestsInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutAssignedUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelUncheckedCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestUncheckedCreateNestedManyWithoutSubmitterInput
    approverSampleTests?: SampleTestUncheckedCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewerSampleTestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewerSampleTestsInput, UserUncheckedCreateWithoutReviewerSampleTestsInput>
  }

  export type UserCreateWithoutApproverSampleTestsInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutAssignedUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestCreateNestedManyWithoutReviewerInput
    sampleLogs?: SampleLogCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApproverSampleTestsInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutAssignedUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelUncheckedCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestUncheckedCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestUncheckedCreateNestedManyWithoutReviewerInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApproverSampleTestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApproverSampleTestsInput, UserUncheckedCreateWithoutApproverSampleTestsInput>
  }

  export type SampleUpsertWithoutSampleTestsInput = {
    update: XOR<SampleUpdateWithoutSampleTestsInput, SampleUncheckedUpdateWithoutSampleTestsInput>
    create: XOR<SampleCreateWithoutSampleTestsInput, SampleUncheckedCreateWithoutSampleTestsInput>
    where?: SampleWhereInput
  }

  export type SampleUpdateToOneWithWhereWithoutSampleTestsInput = {
    where?: SampleWhereInput
    data: XOR<SampleUpdateWithoutSampleTestsInput, SampleUncheckedUpdateWithoutSampleTestsInput>
  }

  export type SampleUpdateWithoutSampleTestsInput = {
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSamplesNestedInput
    client?: ClientUpdateOneRequiredWithoutSamplesNestedInput
    assignedUser?: UserUpdateOneWithoutSamplesNestedInput
    logs?: LogUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutSampleTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: LogUncheckedUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutSampleNestedInput
  }

  export type TestUpsertWithoutSampleTestsInput = {
    update: XOR<TestUpdateWithoutSampleTestsInput, TestUncheckedUpdateWithoutSampleTestsInput>
    create: XOR<TestCreateWithoutSampleTestsInput, TestUncheckedCreateWithoutSampleTestsInput>
    where?: TestWhereInput
  }

  export type TestUpdateToOneWithWhereWithoutSampleTestsInput = {
    where?: TestWhereInput
    data: XOR<TestUpdateWithoutSampleTestsInput, TestUncheckedUpdateWithoutSampleTestsInput>
  }

  export type TestUpdateWithoutSampleTestsInput = {
    code?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    accredited?: BoolFieldUpdateOperationsInput | boolean
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUgx?: NullableIntFieldUpdateOperationsInput | number | null
    priceUsd?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestUncheckedUpdateWithoutSampleTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    accredited?: BoolFieldUpdateOperationsInput | boolean
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUgx?: NullableIntFieldUpdateOperationsInput | number | null
    priceUsd?: NullableFloatFieldUpdateOperationsInput | number | null
    leadTimeDays?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutSubmitterSampleTestsInput = {
    update: XOR<UserUpdateWithoutSubmitterSampleTestsInput, UserUncheckedUpdateWithoutSubmitterSampleTestsInput>
    create: XOR<UserCreateWithoutSubmitterSampleTestsInput, UserUncheckedCreateWithoutSubmitterSampleTestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmitterSampleTestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmitterSampleTestsInput, UserUncheckedUpdateWithoutSubmitterSampleTestsInput>
  }

  export type UserUpdateWithoutSubmitterSampleTestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUpdateManyWithoutUsersNestedInput
    reviewerSampleTests?: SampleTestUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmitterSampleTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUncheckedUpdateManyWithoutUsersNestedInput
    reviewerSampleTests?: SampleTestUncheckedUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUncheckedUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReviewerSampleTestsInput = {
    update: XOR<UserUpdateWithoutReviewerSampleTestsInput, UserUncheckedUpdateWithoutReviewerSampleTestsInput>
    create: XOR<UserCreateWithoutReviewerSampleTestsInput, UserUncheckedCreateWithoutReviewerSampleTestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewerSampleTestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewerSampleTestsInput, UserUncheckedUpdateWithoutReviewerSampleTestsInput>
  }

  export type UserUpdateWithoutReviewerSampleTestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUpdateManyWithoutSubmitterNestedInput
    approverSampleTests?: SampleTestUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewerSampleTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUncheckedUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput
    approverSampleTests?: SampleTestUncheckedUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutApproverSampleTestsInput = {
    update: XOR<UserUpdateWithoutApproverSampleTestsInput, UserUncheckedUpdateWithoutApproverSampleTestsInput>
    create: XOR<UserCreateWithoutApproverSampleTestsInput, UserUncheckedCreateWithoutApproverSampleTestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApproverSampleTestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApproverSampleTestsInput, UserUncheckedUpdateWithoutApproverSampleTestsInput>
  }

  export type UserUpdateWithoutApproverSampleTestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUpdateManyWithoutReviewerNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApproverSampleTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUncheckedUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUncheckedUpdateManyWithoutReviewerNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SampleCreateWithoutSampleLogsInput = {
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutSamplesInput
    client: ClientCreateNestedOneWithoutSamplesInput
    assignedUser?: UserCreateNestedOneWithoutSamplesInput
    sampleTests?: SampleTestCreateNestedManyWithoutSampleInput
    logs?: LogCreateNestedManyWithoutSampleInput
    invoices?: InvoiceCreateNestedManyWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutSampleLogsInput = {
    id?: number
    projectId: number
    clientId: number
    assignedTo?: number | null
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sampleTests?: SampleTestUncheckedCreateNestedManyWithoutSampleInput
    logs?: LogUncheckedCreateNestedManyWithoutSampleInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutSampleLogsInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutSampleLogsInput, SampleUncheckedCreateWithoutSampleLogsInput>
  }

  export type UserCreateWithoutSampleLogsInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutAssignedUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestCreateNestedManyWithoutApproverInput
    issuedInvoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSampleLogsInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutAssignedUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelUncheckedCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestUncheckedCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestUncheckedCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestUncheckedCreateNestedManyWithoutApproverInput
    issuedInvoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSampleLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSampleLogsInput, UserUncheckedCreateWithoutSampleLogsInput>
  }

  export type SampleUpsertWithoutSampleLogsInput = {
    update: XOR<SampleUpdateWithoutSampleLogsInput, SampleUncheckedUpdateWithoutSampleLogsInput>
    create: XOR<SampleCreateWithoutSampleLogsInput, SampleUncheckedCreateWithoutSampleLogsInput>
    where?: SampleWhereInput
  }

  export type SampleUpdateToOneWithWhereWithoutSampleLogsInput = {
    where?: SampleWhereInput
    data: XOR<SampleUpdateWithoutSampleLogsInput, SampleUncheckedUpdateWithoutSampleLogsInput>
  }

  export type SampleUpdateWithoutSampleLogsInput = {
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSamplesNestedInput
    client?: ClientUpdateOneRequiredWithoutSamplesNestedInput
    assignedUser?: UserUpdateOneWithoutSamplesNestedInput
    sampleTests?: SampleTestUpdateManyWithoutSampleNestedInput
    logs?: LogUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutSampleLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTests?: SampleTestUncheckedUpdateManyWithoutSampleNestedInput
    logs?: LogUncheckedUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutSampleNestedInput
  }

  export type UserUpsertWithoutSampleLogsInput = {
    update: XOR<UserUpdateWithoutSampleLogsInput, UserUncheckedUpdateWithoutSampleLogsInput>
    create: XOR<UserCreateWithoutSampleLogsInput, UserUncheckedCreateWithoutSampleLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSampleLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSampleLogsInput, UserUncheckedUpdateWithoutSampleLogsInput>
  }

  export type UserUpdateWithoutSampleLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUpdateManyWithoutApproverNestedInput
    issuedInvoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSampleLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUncheckedUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUncheckedUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUncheckedUpdateManyWithoutApproverNestedInput
    issuedInvoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SampleCreateWithoutInvoicesInput = {
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutSamplesInput
    client: ClientCreateNestedOneWithoutSamplesInput
    assignedUser?: UserCreateNestedOneWithoutSamplesInput
    sampleTests?: SampleTestCreateNestedManyWithoutSampleInput
    logs?: LogCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogCreateNestedManyWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutInvoicesInput = {
    id?: number
    projectId: number
    clientId: number
    assignedTo?: number | null
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sampleTests?: SampleTestUncheckedCreateNestedManyWithoutSampleInput
    logs?: LogUncheckedCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutInvoicesInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutInvoicesInput, SampleUncheckedCreateWithoutInvoicesInput>
  }

  export type UserCreateWithoutIssuedInvoicesInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutAssignedUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutIssuedInvoicesInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutAssignedUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelUncheckedCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestUncheckedCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestUncheckedCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestUncheckedCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutIssuedInvoicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutIssuedInvoicesInput, UserUncheckedCreateWithoutIssuedInvoicesInput>
  }

  export type PaymentCreateWithoutInvoiceInput = {
    amountUgx: number
    amountUsd: number
    paymentDate?: Date | string
    method?: string | null
  }

  export type PaymentUncheckedCreateWithoutInvoiceInput = {
    id?: number
    amountUgx: number
    amountUsd: number
    paymentDate?: Date | string
    method?: string | null
  }

  export type PaymentCreateOrConnectWithoutInvoiceInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput>
  }

  export type PaymentCreateManyInvoiceInputEnvelope = {
    data: PaymentCreateManyInvoiceInput | PaymentCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type SampleUpsertWithoutInvoicesInput = {
    update: XOR<SampleUpdateWithoutInvoicesInput, SampleUncheckedUpdateWithoutInvoicesInput>
    create: XOR<SampleCreateWithoutInvoicesInput, SampleUncheckedCreateWithoutInvoicesInput>
    where?: SampleWhereInput
  }

  export type SampleUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: SampleWhereInput
    data: XOR<SampleUpdateWithoutInvoicesInput, SampleUncheckedUpdateWithoutInvoicesInput>
  }

  export type SampleUpdateWithoutInvoicesInput = {
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSamplesNestedInput
    client?: ClientUpdateOneRequiredWithoutSamplesNestedInput
    assignedUser?: UserUpdateOneWithoutSamplesNestedInput
    sampleTests?: SampleTestUpdateManyWithoutSampleNestedInput
    logs?: LogUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTests?: SampleTestUncheckedUpdateManyWithoutSampleNestedInput
    logs?: LogUncheckedUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutSampleNestedInput
  }

  export type UserUpsertWithoutIssuedInvoicesInput = {
    update: XOR<UserUpdateWithoutIssuedInvoicesInput, UserUncheckedUpdateWithoutIssuedInvoicesInput>
    create: XOR<UserCreateWithoutIssuedInvoicesInput, UserUncheckedCreateWithoutIssuedInvoicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutIssuedInvoicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutIssuedInvoicesInput, UserUncheckedUpdateWithoutIssuedInvoicesInput>
  }

  export type UserUpdateWithoutIssuedInvoicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutIssuedInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUncheckedUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUncheckedUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUncheckedUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PaymentUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutInvoiceInput, PaymentUncheckedUpdateWithoutInvoiceInput>
    create: XOR<PaymentCreateWithoutInvoiceInput, PaymentUncheckedCreateWithoutInvoiceInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutInvoiceInput, PaymentUncheckedUpdateWithoutInvoiceInput>
  }

  export type PaymentUpdateManyWithWhereWithoutInvoiceInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    invoiceId?: IntFilter<"Payment"> | number
    amountUgx?: IntFilter<"Payment"> | number
    amountUsd?: FloatFilter<"Payment"> | number
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    method?: StringNullableFilter<"Payment"> | string | null
  }

  export type InvoiceCreateWithoutPaymentsInput = {
    amountUgx: number
    amountUsd: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
    sample: SampleCreateNestedOneWithoutInvoicesInput
    user: UserCreateNestedOneWithoutIssuedInvoicesInput
  }

  export type InvoiceUncheckedCreateWithoutPaymentsInput = {
    id?: number
    sampleId: number
    amountUgx: number
    amountUsd: number
    issuedBy: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
  }

  export type InvoiceCreateOrConnectWithoutPaymentsInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
  }

  export type InvoiceUpsertWithoutPaymentsInput = {
    update: XOR<InvoiceUpdateWithoutPaymentsInput, InvoiceUncheckedUpdateWithoutPaymentsInput>
    create: XOR<InvoiceCreateWithoutPaymentsInput, InvoiceUncheckedCreateWithoutPaymentsInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutPaymentsInput, InvoiceUncheckedUpdateWithoutPaymentsInput>
  }

  export type InvoiceUpdateWithoutPaymentsInput = {
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    sample?: SampleUpdateOneRequiredWithoutInvoicesNestedInput
    user?: UserUpdateOneRequiredWithoutIssuedInvoicesNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedBy?: IntFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutAccessLevelsInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutAssignedUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageCreateNestedManyWithoutToUserInput
    submitterSampleTests?: SampleTestCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccessLevelsInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutAssignedUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutToUserInput
    submitterSampleTests?: SampleTestUncheckedCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestUncheckedCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestUncheckedCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccessLevelsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccessLevelsInput, UserUncheckedCreateWithoutAccessLevelsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutAccessLevelsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAccessLevelsInput, UserUncheckedUpdateWithoutAccessLevelsInput>
    create: XOR<UserCreateWithoutAccessLevelsInput, UserUncheckedCreateWithoutAccessLevelsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAccessLevelsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAccessLevelsInput, UserUncheckedUpdateWithoutAccessLevelsInput>
  }

  export type UserUpdateManyWithWhereWithoutAccessLevelsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAccessLevelsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    level?: IntFilter<"User"> | number
    department?: StringNullableFilter<"User"> | string | null
    status?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserCreateWithoutLogsInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutAssignedUserInput
    sentMessages?: MessageCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLogsInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutAssignedUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutFromUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelUncheckedCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestUncheckedCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestUncheckedCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestUncheckedCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
  }

  export type SampleCreateWithoutLogsInput = {
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutSamplesInput
    client: ClientCreateNestedOneWithoutSamplesInput
    assignedUser?: UserCreateNestedOneWithoutSamplesInput
    sampleTests?: SampleTestCreateNestedManyWithoutSampleInput
    invoices?: InvoiceCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogCreateNestedManyWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutLogsInput = {
    id?: number
    projectId: number
    clientId: number
    assignedTo?: number | null
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sampleTests?: SampleTestUncheckedCreateNestedManyWithoutSampleInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutSampleInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutLogsInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutLogsInput, SampleUncheckedCreateWithoutLogsInput>
  }

  export type UserUpsertWithoutLogsInput = {
    update: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
  }

  export type UserUpdateWithoutLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutAssignedUserNestedInput
    sentMessages?: MessageUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutAssignedUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUncheckedUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUncheckedUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUncheckedUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SampleUpsertWithoutLogsInput = {
    update: XOR<SampleUpdateWithoutLogsInput, SampleUncheckedUpdateWithoutLogsInput>
    create: XOR<SampleCreateWithoutLogsInput, SampleUncheckedCreateWithoutLogsInput>
    where?: SampleWhereInput
  }

  export type SampleUpdateToOneWithWhereWithoutLogsInput = {
    where?: SampleWhereInput
    data: XOR<SampleUpdateWithoutLogsInput, SampleUncheckedUpdateWithoutLogsInput>
  }

  export type SampleUpdateWithoutLogsInput = {
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSamplesNestedInput
    client?: ClientUpdateOneRequiredWithoutSamplesNestedInput
    assignedUser?: UserUpdateOneWithoutSamplesNestedInput
    sampleTests?: SampleTestUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTests?: SampleTestUncheckedUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutSampleNestedInput
  }

  export type UserCreateWithoutSentMessagesInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutAssignedUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    receivedMessages?: MessageCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutAssignedUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutToUserInput
    accessLevels?: AccessLevelUncheckedCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestUncheckedCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestUncheckedCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestUncheckedCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type UserCreateWithoutReceivedMessagesInput = {
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleCreateNestedManyWithoutAssignedUserInput
    logs?: LogCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutFromUserInput
    accessLevels?: AccessLevelCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedMessagesInput = {
    id?: number
    name: string
    email: string
    password: string
    level: number
    department?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    samples?: SampleUncheckedCreateNestedManyWithoutAssignedUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutFromUserInput
    accessLevels?: AccessLevelUncheckedCreateNestedManyWithoutUsersInput
    submitterSampleTests?: SampleTestUncheckedCreateNestedManyWithoutSubmitterInput
    reviewerSampleTests?: SampleTestUncheckedCreateNestedManyWithoutReviewerInput
    approverSampleTests?: SampleTestUncheckedCreateNestedManyWithoutApproverInput
    sampleLogs?: SampleLogUncheckedCreateNestedManyWithoutUserInput
    issuedInvoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutToUserNestedInput
    accessLevels?: AccessLevelUncheckedUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUncheckedUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUncheckedUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedMessagesInput = {
    update: XOR<UserUpdateWithoutReceivedMessagesInput, UserUncheckedUpdateWithoutReceivedMessagesInput>
    create: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedMessagesInput, UserUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type UserUpdateWithoutReceivedMessagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutFromUserNestedInput
    accessLevels?: AccessLevelUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutFromUserNestedInput
    accessLevels?: AccessLevelUncheckedUpdateManyWithoutUsersNestedInput
    submitterSampleTests?: SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUncheckedUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUncheckedUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SampleCreateManyAssignedUserInput = {
    id?: number
    projectId: number
    clientId: number
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LogCreateManyUserInput = {
    id?: number
    sampleId?: number | null
    actionType: string
    description: string
    timestamp?: Date | string
  }

  export type MessageCreateManyFromUserInput = {
    id?: number
    toUserId: number
    content: string
    read?: boolean
    timestamp?: Date | string
  }

  export type MessageCreateManyToUserInput = {
    id?: number
    fromUserId: number
    content: string
    read?: boolean
    timestamp?: Date | string
  }

  export type SampleTestCreateManySubmitterInput = {
    id?: number
    sampleId: number
    testId: number
    result?: string | null
    reviewedBy?: number | null
    approvedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleTestCreateManyReviewerInput = {
    id?: number
    sampleId: number
    testId: number
    result?: string | null
    submittedBy?: number | null
    approvedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleTestCreateManyApproverInput = {
    id?: number
    sampleId: number
    testId: number
    result?: string | null
    submittedBy?: number | null
    reviewedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleLogCreateManyUserInput = {
    id?: number
    sampleId: number
    deliveredBy?: string | null
    deliveryContact?: string | null
    modeOfTransmit: string
    createdAt?: Date | string
  }

  export type InvoiceCreateManyUserInput = {
    id?: number
    sampleId: number
    amountUgx: number
    amountUsd: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
  }

  export type SampleUpdateWithoutAssignedUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSamplesNestedInput
    client?: ClientUpdateOneRequiredWithoutSamplesNestedInput
    sampleTests?: SampleTestUpdateManyWithoutSampleNestedInput
    logs?: LogUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutAssignedUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTests?: SampleTestUncheckedUpdateManyWithoutSampleNestedInput
    logs?: LogUncheckedUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateManyWithoutAssignedUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUpdateWithoutUserInput = {
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sample?: SampleUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: NullableIntFieldUpdateOperationsInput | number | null
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: NullableIntFieldUpdateOperationsInput | number | null
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutFromUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    toUser?: UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutFromUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutFromUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutToUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    fromUser?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessLevelUpdateWithoutUsersInput = {
    level?: IntFieldUpdateOperationsInput | number
    permissions?: AccessLevelUpdatepermissionsInput | string[]
  }

  export type AccessLevelUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    permissions?: AccessLevelUpdatepermissionsInput | string[]
  }

  export type AccessLevelUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    permissions?: AccessLevelUpdatepermissionsInput | string[]
  }

  export type SampleTestUpdateWithoutSubmitterInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sample?: SampleUpdateOneRequiredWithoutSampleTestsNestedInput
    test?: TestUpdateOneRequiredWithoutSampleTestsNestedInput
    reviewer?: UserUpdateOneWithoutReviewerSampleTestsNestedInput
    approver?: UserUpdateOneWithoutApproverSampleTestsNestedInput
  }

  export type SampleTestUncheckedUpdateWithoutSubmitterInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestUncheckedUpdateManyWithoutSubmitterInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestUpdateWithoutReviewerInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sample?: SampleUpdateOneRequiredWithoutSampleTestsNestedInput
    test?: TestUpdateOneRequiredWithoutSampleTestsNestedInput
    submitter?: UserUpdateOneWithoutSubmitterSampleTestsNestedInput
    approver?: UserUpdateOneWithoutApproverSampleTestsNestedInput
  }

  export type SampleTestUncheckedUpdateWithoutReviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestUncheckedUpdateManyWithoutReviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestUpdateWithoutApproverInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sample?: SampleUpdateOneRequiredWithoutSampleTestsNestedInput
    test?: TestUpdateOneRequiredWithoutSampleTestsNestedInput
    submitter?: UserUpdateOneWithoutSubmitterSampleTestsNestedInput
    reviewer?: UserUpdateOneWithoutReviewerSampleTestsNestedInput
  }

  export type SampleTestUncheckedUpdateWithoutApproverInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestUncheckedUpdateManyWithoutApproverInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleLogUpdateWithoutUserInput = {
    deliveredBy?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryContact?: NullableStringFieldUpdateOperationsInput | string | null
    modeOfTransmit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sample?: SampleUpdateOneRequiredWithoutSampleLogsNestedInput
  }

  export type SampleLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    deliveredBy?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryContact?: NullableStringFieldUpdateOperationsInput | string | null
    modeOfTransmit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    deliveredBy?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryContact?: NullableStringFieldUpdateOperationsInput | string | null
    modeOfTransmit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutUserInput = {
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    sample?: SampleUpdateOneRequiredWithoutInvoicesNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SampleCreateManyClientInput = {
    id?: number
    projectId: number
    assignedTo?: number | null
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyClientInput = {
    id?: number
    title: string
    description?: string | null
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleUpdateWithoutClientInput = {
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSamplesNestedInput
    assignedUser?: UserUpdateOneWithoutSamplesNestedInput
    sampleTests?: SampleTestUpdateManyWithoutSampleNestedInput
    logs?: LogUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTests?: SampleTestUncheckedUpdateManyWithoutSampleNestedInput
    logs?: LogUncheckedUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutClientInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleCreateManyProjectInput = {
    id?: number
    clientId: number
    assignedTo?: number | null
    status: string
    receivedDate: Date | string
    deliveryInfo?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleUpdateWithoutProjectInput = {
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutSamplesNestedInput
    assignedUser?: UserUpdateOneWithoutSamplesNestedInput
    sampleTests?: SampleTestUpdateManyWithoutSampleNestedInput
    logs?: LogUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTests?: SampleTestUncheckedUpdateManyWithoutSampleNestedInput
    logs?: LogUncheckedUpdateManyWithoutSampleNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutSampleNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    receivedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryInfo?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestCreateManyTestInput = {
    id?: number
    sampleId: number
    result?: string | null
    submittedBy?: number | null
    reviewedBy?: number | null
    approvedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SampleTestUpdateWithoutTestInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sample?: SampleUpdateOneRequiredWithoutSampleTestsNestedInput
    submitter?: UserUpdateOneWithoutSubmitterSampleTestsNestedInput
    reviewer?: UserUpdateOneWithoutReviewerSampleTestsNestedInput
    approver?: UserUpdateOneWithoutApproverSampleTestsNestedInput
  }

  export type SampleTestUncheckedUpdateWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestUncheckedUpdateManyWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestCreateManySampleInput = {
    id?: number
    testId: number
    result?: string | null
    submittedBy?: number | null
    reviewedBy?: number | null
    approvedBy?: number | null
    submittedAt?: Date | string | null
    reviewedAt?: Date | string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LogCreateManySampleInput = {
    id?: number
    userId: number
    actionType: string
    description: string
    timestamp?: Date | string
  }

  export type InvoiceCreateManySampleInput = {
    id?: number
    amountUgx: number
    amountUsd: number
    issuedBy: number
    issuedAt?: Date | string
    paid?: boolean
    paymentMethod?: string | null
  }

  export type SampleLogCreateManySampleInput = {
    id?: number
    receivedBy: number
    deliveredBy?: string | null
    deliveryContact?: string | null
    modeOfTransmit: string
    createdAt?: Date | string
  }

  export type SampleTestUpdateWithoutSampleInput = {
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    test?: TestUpdateOneRequiredWithoutSampleTestsNestedInput
    submitter?: UserUpdateOneWithoutSubmitterSampleTestsNestedInput
    reviewer?: UserUpdateOneWithoutReviewerSampleTestsNestedInput
    approver?: UserUpdateOneWithoutApproverSampleTestsNestedInput
  }

  export type SampleTestUncheckedUpdateWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleTestUncheckedUpdateManyWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    testId?: IntFieldUpdateOperationsInput | number
    result?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableIntFieldUpdateOperationsInput | number | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUpdateWithoutSampleInput = {
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutSampleInput = {
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutIssuedInvoicesNestedInput
    payments?: PaymentUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedBy?: IntFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    issuedBy?: IntFieldUpdateOperationsInput | number
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SampleLogUpdateWithoutSampleInput = {
    deliveredBy?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryContact?: NullableStringFieldUpdateOperationsInput | string | null
    modeOfTransmit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSampleLogsNestedInput
  }

  export type SampleLogUncheckedUpdateWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    receivedBy?: IntFieldUpdateOperationsInput | number
    deliveredBy?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryContact?: NullableStringFieldUpdateOperationsInput | string | null
    modeOfTransmit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleLogUncheckedUpdateManyWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    receivedBy?: IntFieldUpdateOperationsInput | number
    deliveredBy?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryContact?: NullableStringFieldUpdateOperationsInput | string | null
    modeOfTransmit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInvoiceInput = {
    id?: number
    amountUgx: number
    amountUsd: number
    paymentDate?: Date | string
    method?: string | null
  }

  export type PaymentUpdateWithoutInvoiceInput = {
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUncheckedUpdateManyWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    amountUgx?: IntFieldUpdateOperationsInput | number
    amountUsd?: FloatFieldUpdateOperationsInput | number
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutAccessLevelsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutToUserNestedInput
    submitterSampleTests?: SampleTestUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccessLevelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUncheckedUpdateManyWithoutAssignedUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutFromUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutToUserNestedInput
    submitterSampleTests?: SampleTestUncheckedUpdateManyWithoutSubmitterNestedInput
    reviewerSampleTests?: SampleTestUncheckedUpdateManyWithoutReviewerNestedInput
    approverSampleTests?: SampleTestUncheckedUpdateManyWithoutApproverNestedInput
    sampleLogs?: SampleLogUncheckedUpdateManyWithoutUserNestedInput
    issuedInvoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAccessLevelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
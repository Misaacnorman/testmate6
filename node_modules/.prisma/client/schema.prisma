// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  level      Int // 1-5 (access levels), 9 = Super User
  department String? // e.g., "Department of Accounts"
  status     String // active, pending, banned
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  samples          Sample[]
  logs             Log[]
  sentMessages     Message[]     @relation("MessageFrom")
  receivedMessages Message[]     @relation("MessageTo")
  accessLevels     AccessLevel[] // If needed for dynamic permissions

  submitterSampleTests SampleTest[] @relation("SubmittedByUser")
  reviewerSampleTests  SampleTest[] @relation("ReviewedByUser")
  approverSampleTests  SampleTest[] @relation("ApprovedByUser")
  sampleLogs           SampleLog[]  @relation("SampleLogUser")
  issuedInvoices       Invoice[]    @relation("InvoiceUser")
}

model Client {
  id             Int      @id @default(autoincrement())
  name           String
  address        String?
  contact        String?
  billingName    String? // For separate billing info
  billingAddress String?
  billingContact String?
  createdBy      Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  samples  Sample[]
  projects Project[]
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  clientId    Int
  client      Client   @relation(fields: [clientId], references: [id])
  createdBy   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  samples Sample[]
}

model Test {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  category     String // Coarse Aggregates, Fine Aggregates, etc.
  name         String // e.g., "Moisture Content"
  method       String // Testing standards (BS, EN, ASTM)
  accredited   Boolean
  unit         String? // "No.", "LS", etc.
  priceUgx     Int?
  priceUsd     Float?
  leadTimeDays Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sampleTests SampleTest[]
}

model Sample {
  id           Int      @id @default(autoincrement())
  projectId    Int
  clientId     Int
  assignedTo   Int?
  status       String // received, processing, completed
  receivedDate DateTime
  deliveryInfo String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project      Project      @relation(fields: [projectId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id])
  assignedUser User?        @relation(fields: [assignedTo], references: [id])
  sampleTests  SampleTest[]
  logs         Log[]
  invoices     Invoice[]
  sampleLogs   SampleLog[]
}

model SampleTest {
  id          Int       @id @default(autoincrement())
  sampleId    Int
  testId      Int
  result      String? // Test outcome
  submittedBy Int?
  reviewedBy  Int?
  approvedBy  Int?
  submittedAt DateTime?
  reviewedAt  DateTime?
  approvedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  sample    Sample @relation(fields: [sampleId], references: [id])
  test      Test   @relation(fields: [testId], references: [id])
  submitter User?  @relation("SubmittedByUser", fields: [submittedBy], references: [id])
  reviewer  User?  @relation("ReviewedByUser", fields: [reviewedBy], references: [id])
  approver  User?  @relation("ApprovedByUser", fields: [approvedBy], references: [id])
}

model SampleLog {
  id              Int      @id @default(autoincrement())
  sampleId        Int
  receivedBy      Int
  deliveredBy     String?
  deliveryContact String?
  modeOfTransmit  String // Email, WhatsApp, Hardcopy
  createdAt       DateTime @default(now())

  sample Sample @relation(fields: [sampleId], references: [id])
  user   User   @relation("SampleLogUser", fields: [receivedBy], references: [id])
}

model Invoice {
  id            Int      @id @default(autoincrement())
  sampleId      Int
  amountUgx     Int
  amountUsd     Float
  issuedBy      Int
  issuedAt      DateTime @default(now())
  paid          Boolean  @default(false)
  paymentMethod String?

  sample   Sample    @relation(fields: [sampleId], references: [id])
  user     User      @relation("InvoiceUser", fields: [issuedBy], references: [id])
  payments Payment[]
}

model Payment {
  id          Int      @id @default(autoincrement())
  invoiceId   Int
  amountUgx   Int
  amountUsd   Float
  paymentDate DateTime @default(now())
  method      String?

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

model AccessLevel {
  id          Int      @id @default(autoincrement())
  level       Int // 1-5, 9 = Super User
  permissions String[] // JSON array of allowed actions

  users User[] @relation
}

model Log {
  id          Int      @id @default(autoincrement())
  userId      Int
  sampleId    Int?
  actionType  String // sample_received, test_submitted, etc.
  description String
  timestamp   DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id])
  sample Sample? @relation(fields: [sampleId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  content    String
  read       Boolean  @default(false)
  timestamp  DateTime @default(now())

  fromUser User @relation("MessageFrom", fields: [fromUserId], references: [id])
  toUser   User @relation("MessageTo", fields: [toUserId], references: [id])
}
